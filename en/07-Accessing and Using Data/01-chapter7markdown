Chapter 7: Accessing and Using Data

Introduction to Databases and SQL

Adobe ColdFusion lets you create dynamic applications to access and modify data stored in a database. You do not
require a thorough knowledge of databases to develop ColdFusion applications, but you need to know some basic
database and SQL concepts and techniques.

Each database server (such as SQL Server, Oracle, or DB2) has unique capabilities and properties. For more
information, see the documentation that ships with your database server.


What is a database?
A database defines a structure for storing information. Databases are typically organized into tables, which are
collections of related items. You can think of a table as a grid of columns and rows. ColdFusion works primarily with
relational databases, such as Oracle, DB2, and SQL Server.

The following image shows the basic layout of a database table:

                                B




A




Layout of a database table
A. row B. column


A column defines one piece of data stored in all rows of the table. A row contains one item from each column in the
table.

For example, a table contains the ID, name, title, and other information for individuals employed by a company. Each
row, called a data record, corresponds to one employee. The value of a column within a record is referred to as a record
field.

The following image shows an example table, named employees, containing information about company employees:




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   401
Accessing and Using Data




   EmpID           LastName      FirstName          Title        DeptID            Email       Phone




      4             Smith          John           Engineer         3              jsmith        x5833




Example employees table


The record for employee 4 contains the following field values:

· LastName field is "Smith"

· FirstName field is "John"

· Title field is "Engineer"

This example uses the EmpID field as the table's primary key field. The primary key contains a unique identifier to
maintain each record's unique identity. Primary keys field can include an employee ID, part number, or customer
number. Typically, you specify which column contains the primary key when you create a database table.

To access the table to read or modify table data, you use the SQL programming language. For example, the following
SQL statement returns all rows from the table where the department ID is 3:

SELECT * FROM employees WHERE DEPTID=3

Note: The SQL keywords and syntax are represented here as uppercase letters. Table and column names use mixed
uppercase and lowercase letters.


Using multiple database tables
In many database designs, information is distributed to multiple tables. The following image shows two tables, one for
employee information and one for employee addresses:


   EmpID          LastName       FirstName          Title        DeptID            Email       Phone



      1             Jones           Joe           Engineer         3              jjones       x5844


      2             Davis           Ken           Manager          4              kdavis       x5854


      3             Baker           Mary          Engineer         3              mbaker       x5876


      4             Smith           John          Engineer         3              jsmith       x5833


      5             Morris          Jane          Manager          3              jmorris      x5833

Employees table




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     402
Accessing and Using Data




    EmpID           Street            City           State           Zip



       1          4 Main St.         Newton           MA           02158


       2          10 Oak Dr.         Newton           MA           02161


       3          15 Main St.        Newton           MA           02158


      4          56 Maple Ln.       Newton            MA           02160


      5           25 Elm St.        Newton            MA           02160

Addresses tables


In this example, each table contains a column named EmpID. This column associates a row of the employees table with
a row in the addresses table.

For example, to obtain all information about an employee, you request a row from the employees table and the row
from the addresses table with the same value for EmpID.

One advantage of using multiple tables is that you can add tables containing new information without modifying the
structure of your existing tables. For example, to add payroll information, you add a new table to the database where
the first column contains the employee's ID and the columns contain current salary, previous salary, bonus payment,
and 401(k) percent.

Also, an access to a small table is more efficient than an access to a large table. Therefore, if you update the street
address of an employee, you update only the addresses table, without having to access any other table in the database.


Database permissions
In many database environments, a database administrator defines the access privileges for users accessing the database,
usually through user name and password. When a person attempts to connect to a database, the database ensures that
the user name and password are valid and then imposes access requirements on the user.

Privileges can restrict user access so that a user can do the following:

· Read data.

· Read data and add rows.

· Read data, add rows, modify existing tables.

In ColdFusion, you use the ColdFusion Administrator to define database connections, called data sources. As part of
defining these connections, you specify the user name and password used by ColdFusion to connect to the database.
The database can then control access based on this user name and password.

For more information on creating a data source, see Configuring and Administering ColdFusion.


Commits, rollbacks, and transactions
Before you access data stored in a database, it is important to understand several database concepts, including:

· Commit

· Rollback

· Transactions



                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     403
Accessing and Using Data




A database commit occurs when you make a permanent change to a database. For example, when you write a new row
to a database, the write does not occur until the database commits the change.

Rollback is the process of undoing a change to a database. For example, if you write a new row to a table, you can
rollback the write up to the point where you commit the write. After the commit, you can no longer rollback the write.

Most databases support transactions where a transaction consists of one or more SQL statements. Within a
transaction, your SQL statements can read, modify, and write a database. You end a transaction by either committing
all your changes within the transaction or rolling back all of them.

Transactions can be useful when you have multiple writes to a database and want to make sure all writes occurred
without error before committing them. In this case, you wrap all writes within a single transaction and check for errors
after each write. If any write causes an error, rollback all of them. If all writes occur successfully, you commit the
transaction.

A bank might use a transaction to encapsulate a transfer from one account to another. For example, if you transfer
money from your savings account to your checking account, you do not want the bank to debit the balance of your
savings account unless it also credits your checking account. If the update to the checking account fails, the bank can
rollback the debit of the savings account as part of the transaction.

ColdFusion includes the cftransaction tag that lets you implement database transactions for controlling rollback
and commit. For more information, see the CFML Reference.


Database design guidelines
From this basic description, the following database design rules emerge:

· Each record should contain a unique identifier as the primary key such as an employee ID, a part number, or a
    customer number. The primary key is typically the column used to maintain each record's unique identity among
    the tables in a relational database. Databases allow you to use multiple columns for the primary key.

· When you define a column, you define a SQL data type for the column, such as allowing only numeric values to be
    entered in the salary column.

· Assessing user needs and incorporating those needs in the database design is essential to a successful
    implementation. A well-designed database accommodates the changing data needs within an organization.

The best way to familiarize yourself with the capabilities of your database product or database management system
(DBMS) is to review the product documentation.


Using SQL
The following information introduces SQL, describes basic SQL syntax, and contains examples of SQL statements. so
that you can begin to use ColdFusion. For complete SQL information, see the SQL reference that ships with your
database.

A query is a request to a database. The query can ask for information from the database, write new data to the database,
update existing information in the database, or delete records from the database.

Structured Query Language (SQL) is an ANSI/ISO standard programming language for writing database queries. All
databases supported by ColdFusion support SQL, and all ColdFusion tags that access a database let you pass SQL
statements to the tag.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    404
Accessing and Using Data




SQL example
The most commonly used SQL statement in ColdFusion is the SELECT statement. The SELECT statement reads data
from a database and returns it to ColdFusion. For example, the following SQL statement reads all the records from the
employees table:

SELECT * FROM employees

You interpret this statement as "Select all rows from the table employees" where the wildcard symbol (*) corresponds
to all columns.

    If you are using Dreamweaver MX 2004, Adobe Dreamweaver CS3, or HomeSite+, you can use the built-in query
    builder to build SQL statements graphically by selecting the tables and records to retrieve.

In many cases, you do not want all rows from a table, but only a subset of rows. The next example returns all rows from
the employees table, where the value of the DeptID column for the row is 3:

SELECT * FROM employees WHERE DeptID=3

You interpret this statement as "Select all rows from the table employees where the DeptID is 3".

SQL also lets you specify the table columns to return. For example, instead of returning all columns in the table, you
can return a subset of columns:

SELECT LastName, FirstName FROM employees WHERE DeptID=3

You interpret this statement as "Select the columns FirstName and LastName from the table employees where the
DeptID is 3".

In addition to with reading data from a table, you can write data to a table using the SQL INSERT statement. The
following statement adds a new row to the employees table:

INSERT INTO employees(EmpID, LastName, Firstname) VALUES(51, 'Doe', 'John')


Basic SQL syntax elements
The following tables briefly describe the main SQL command elements.


Statements
A SQL statement always begins with a SQL verb. The following keywords identify commonly used SQL verbs:


 Keyword                Description

 SELECT                 Retrieves the specified records.

 INSERT                 Adds a new row.

 UPDATE                 Changes values in the specified rows.

 DELETE                 Removes the specified rows.



Statement clauses
Use the following keywords to refine SQL statements:


 Keyword                Description

 FROM                   Names the data tables for the operation.




                                                  

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                               405
Accessing and Using Data




Keyword                  Description

WHERE                    Sets one or more conditions for the operation.

ORDER BY                 Sorts the result set in the specified order.

GROUP BY                 Groups the result set by the specified select list items.



Operators
The following basic operators specify conditions and perform logical and numeric functions:


Operator                 Description

AND                      Both conditions must be met

OR                       At least one condition must be met

NOT                      Exclude the condition following

LIKE                     Matches with a pattern

IN                       Matches with a list of values

BETWEEN                  Matches with a range of values

=                        Equal to

<>                       Not equal to

<                        Less than

>                        Greater than

<=                       Less than or equal to

>=                       Greater than or equal to

+                        Addition

-                        Subtraction

/                        Division

*                        Multiplication



Case sensitivity with databases
ColdFusion is a case-insensitive programming environment. Case insensitivity means the following statements are
equivalent:

<cfset foo="bar">
<CFSET FOO="BAR">
<CfSet FOO="bar">

However, many databases, especially UNIX databases, are case sensitive. Case sensitivity means that you must match
exactly the case of all column and table names in SQL queries.

For example, the following queries are not equivalent in a case-sensitive database:

SELECT LastName FROM EMPLOYEES
SELECT LASTNAME FROM employees

In a case-sensitive database, employees and EMPLOYEES are two different tables.

For information on how your database handles case, see the product documentation.



                                                     

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      406
Accessing and Using Data




SQL notes and considerations
When writing SQL in ColdFusion, keep in mind the following guidelines:

· If you use a ColdFusion variable in your SQL expression, and the variable value is a string that contains single
   quotes, place the variable in a PreserveSingleQuotes function to prevent ColdFusion from interpreting the
   quotation marks. The following example shows this use:

    <cfset List = "'Suisun', 'San Francisco', 'San Diego'">
   <cfquery name = "GetCenters" datasource = "cfdocexamples">
         SELECT Name, Address1, Address2, City, Phone
         FROM Centers
         WHERE City IN (#PreserveSingleQuotes(List)#)
   </cfquery>

· There is a lot more to SQL than what is covered here. It is a good idea to purchase one or several SQL guides for
   reference.

· To perform a successful query, the data source, columns, and tables that you reference must exist.

· Some DBMS vendors use nonstandard SQL syntax (known as a dialect) in their products. ColdFusion does not
   validate the SQL; it is passed on to the database for validation, so you are free to use any syntax that your database
   supports. Check your DBMS documentation for nonstandard SQL usage.


Reading data from a database
You use the SQL SELECT statement to read data from a database. The SQL statement has the following general syntax:

SELECT column_names
     FROM table_names
     [ WHERE search_condition ]
     [ GROUP BY group_expression ] [HAVING condition]
     [ ORDER BY order_condition [ ASC | DESC ] ]

The statements in brackets [] are optional.

Note: There are additional options to SELECT depending on your database. For a complete syntax description for
SELECT, see the product documentation.


Results of a SELECT statement
When the database processes a SELECT statement, it returns a record set containing the requested data. The format of
a record set is a table with rows and columns. For example, if you write the following query:

SELECT * FROM employees WHERE DeptID=3

The query returns a database table. Because the data returned to ColdFusion by a SELECT statement is in the form of
a database table, ColdFusion lets you write a SQL query on the returned results. This functionality is called query of
queries. For more information on query of queries, see "Accessing and Retrieving Data" on page 410.

The next example uses a SELECT statement to return only a specific set of columns from a table:

SELECT LastName, FirstName FROM employees WHERE DeptID=3


Filtering results
The SELECT statement lets you filter the results of a query to return only those records that meet specific criteria. For
example, if you want to access all database records for employees in department 3, you use the following query:

SELECT * FROM employees WHERE DeptID=3




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    407
Accessing and Using Data




You can combine multiple conditions using the WHERE clause. For example, the following example uses two
conditions:

SELECT * FROM employees WHERE DeptID=3 AND Title='Engineer'


Sorting results
By default, a database does not sort the records returned from a SQL query. In fact, you cannot guarantee that the
records returned from the same query are returned in the same order each time you run the query.

However, if you require records in a specific order, you can write your SQL statement to sort the records returned from
the database. To do so, you include an ORDER BY clause in the SQL statement.

For example, the following SQL statement returns the records of the table ordered by the LastName column:

SELECT * FROM employees ORDER BY LastName

You can combine multiple fields in the ORDER BY clause to perform additional sorting:

SELECT * FROM employees ORDER BY DepartmentID, LastName

This statement returns row ordered by department, then by last name within the department.


Returning a subset of columns
You want only a subset of columns returned from a database table, as in the following example, which returns only the
FirstName, LastName, and Phone columns. This example is useful if you are building a web page that shows the phone
numbers for all employees.

SELECT FirstName, LastName, Phone FROM employees

However, this query does not to return the table rows in alphabetical order. You can include an ORDER clause in the
SQL, as follows:

SELECT the FirstName, LastName, Phone
     FROM employees
     ORDER BY LastName, FirstName


Using column aliases
You have column names that you do not want to retain in the results of your SQL statement. For example, your
database is set up with a column that uses a reserved word in ColdFusion, such as EQ. In this case, you can rename the
column as part of the query, as follows:

SELECT EmpID, LastName, EQ as MyEQ FROM employees

The results returned by this query contains columns named EmpID, LastName, and MyEQ.


Accessing multiple tables
In a database, you can have multiple tables containing related information. You can extract information from multiple
tables as part of a query. In this case, you specify multiple table names in the SELECT statement, as follows:

SELECT LastName, FirstName, Street, City, State, Zip
     FROM employees, addresses
     WHERE employees.EmpID = addresses.EmpID
     ORDER BY LastName, FirstName

This SELECT statement uses the EmpID field to connect the two tables. This query prefixes the EmpID column with
the table name. This is necessary because each table has a column named EmpID. Prefix a column name with its table
name if the column name appears in multiple tables.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                        408
Accessing and Using Data




In this case, you extract LastName and FirstName information from the employees table and Street, City, State, and
ZIP information from the addresses table. You can use output such as this is to generate mailing addresses for an
employee newsletter.

The results of a SELECT statement that references multiple tables is a single result table containing a join of the
information from corresponding rows. A join means information from two or more rows is combined to form a single
row of the result. In this case, the resultant recordset has the following structure:


    LastName        FirstName          Street         City             State         Zip




What is interesting in this result is that even though you used the EmpID field to combine information from the two
tables, you did not include that field in the output.


Modifying a database
You can use SQL to modify a database in the following ways:


Inserting data into a database
You use SQL INSERT statement to write information to a database. A write adds a new row to a database table. The
basic syntax of an INSERT statement is as follows:

INSERT INTO table_name(column_names) VALUES(value_list)

where:

· column_names specifies a comma-separated list of columns.

· value_list specifies a comma-separated list of values. The order of values has to correspond to the order that you
   specified column names.

Note: There are additional options to INSERT depending on your database. For a complete syntax description for
INSERT, see the product documentation.

For example, the following SQL statement adds a new row to the employees table:

INSERT INTO employees(EmpID, LastName, Firstname) VALUES(51, 'Smith', 'John')

This statement creates a row in the employees table and sets the values of the EmpID, LastName, and FirstName fields
of the row. The remaining fields in the row are set to Null. Nullmeans that the field does not contain a value.

When you, or your database administrator, creates a table, you can set properties on the table and the columns of the
table. One of the properties you can set for a column is whether the field supports Null values. If a field supports Nulls,
you can omit the field from the INSERT statement. The database automatically sets the field to Null when you insert
a new row.



                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     409
Accessing and Using Data




However, if the field does not support Nulls, specify a value for the field as part of the INSERT statement; otherwise,
the database issues an error.

The LastName and FirstName values in the query are contained within single-quotation marks. This is necessary
because the table columns are defined to contain character strings. Numeric data does not require the quotation marks.


Updating data in a database
Use the UPDATE statement in SQL to update the values of a table row. Update lets you update the fields of a specific
row or all rows in the table. The UPDATE statement has the following syntax:

UPDATE table_name
     SET column_name1=value1, ... , column_nameN=valueN
     [ WHERE search_condition ]

Note: There are additional options to UPDATE depending on your database. For a complete syntax description for
UPDATE, see the product documentation.

Do not attempt to update a record's primary key field. Your database typically enforces this restriction.

The UPDATE statement uses the optional WHERE clause, much like the SELECT statement, to determine which table
rows to modify. The following UPDATE statement updates the e-mail address of John Smith:

UPDATE employees SET Email='jsmith@mycompany.com' WHERE EmpID = 51

Be careful using UPDATE. If you omit the WHERE clause to execute the following statement:

UPDATE employees SET Email = 'jsmith@mycompany.com'

you update the Email field for all rows in the table.


Deleting data from a database
The DELETE statement removes rows from a table. The DELETE statement has the following syntax:

DELETE FROM table_name
     [ WHERE search_condition ]

Note: There are additional options to DELETE depending on your database. For a complete syntax description for
DELETE, see the product documentation.

You can remove all rows from a table using a statement in the form:

DELETE FROM employees

Typically, you specify a WHERE clause to the DELETE statement to delete specific rows of the table. For example, the
following statement deletes John Smith from the table:

DELETE FROM employees WHERE EmpID=51


Updating multiple tables
The preceding examples describe how to modify a single database table. However, you might have a database that uses
multiple tables to represent information.

One way to update multiple tables is to use one INSERT statement per table and to wrap all INSERT statements within
a database transaction. A transaction contains one or more SQL statements that can be rolled back or committed as a
unit. If any single statement in the transaction fails, you can roll back the entire transaction, canceling any previous
writes that occurred within the transaction. You can use the same technique for selects, updates, and deletes. The
following example uses the cftransaction tag to wrap multiple SQL statements:




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      410
Accessing and Using Data




<cftransaction>


<cfquery name="qInsEmp" datasource="cfdocexamples">
     INSERT INTO Employees (FirstName,LastName,EMail,Phone,Department)
     VALUES ('Simon', 'Horwith', 'SHORWITH','(202)-797-6570','Research and Development')
</cfquery>


<cfquery name="qGetID" datasource="cfdocexamples">
     SELECT MAX(Emp_ID) AS New_Employee
     FROM Employees
</cfquery>


</cftransaction>




Accessing and Retrieving Data

Several ColdFusion tags provide a way to retrieve data from a database and work with query data. Use the cfquery tag
to query a data source, the cfoutput tag to output the query results to a web page, and the cfqueryparam tag to help
reduce security risks in your applications.


Working with dynamic data
A web application page is different from a static web page because it can publish data dynamically. This can involve
querying databases, connecting to LDAP or mail servers, and leveraging COM, DCOM, CORBA, or Java objects to
retrieve, update, insert, and delete data at run time--as your users interact with pages in their browsers.

For ColdFusion developers, the term data source can refer to different types of structured content accessible locally or
across a network. You can query websites, LDAP servers, POP mail servers, and documents in a variety of formats.
Most commonly though, a database drives your applications, and for this discussion a data source means the entry
point from ColdFusion to a database.

Here, you build a query to retrieve data from the cfdocexamples data source.

To query a database, use:

· ColdFusion data sources

· The cfquery tag

· SQL commands


Retrieving data
You can query databases to retrieve data at run time. The retrieved data, called the recordset, is stored on that page as
a query object. A query object is a special entity that contains the recordset values, plus RecordCount, CurrentRow,
ColumnList, SQL, Cached, and SQLParameter query variables. You specify the name of the query object in the name
attribute of the cfquery tag. The query object is often called simply the query.

The following is a simple cfquery tag:

<cfquery name = "GetSals" datasource = "cfdocexamples">
     SELECT * FROM Employee
     ORDER BY LastName
</cfquery>




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   411

Accessing and Using Data




Note: The terms "recordset" and "query object" are often used synonymously when discussing recordsets for queries. For
more information, see "Using Query of Queries" on page 428.

When retrieving data from a database, perform the following tasks:

· To tell ColdFusion how to connect to a database, use the cfquery tag on a page.

· To specify the data that you want to retrieve from the database, write SQL commands inside the cfquery block.

· Reference the query object and use its data values in any tag that presents data, such as cfoutput, cfgrid, cftable,
   cfgraph, or cftree.


The cfquery tag
The cfquery tag is one of the most frequently used CFML tags. You use it to retrieve and reference the data returned
from a query. When ColdFusion encounters a cfquery tag on a page, it does the following:

· Connects to the specified data source.

· Performs SQL commands that are enclosed within the block.

· Returns result set values to the page in a query object.


The cfquery tag syntax
The following code shows the syntax for the cfquery tag:

<cfquery name="EmpList" datasource="cfdocexamples">
     SQL code...
</cfquery>

In this example, the query code tells ColdFusion to do the following:

· Connect to the cfdocexamples data source (the cfdocexamples.mdb database).

· Execute SQL code that you specify.

· Store the retrieved data in the query object EmpList.

When creating queries to retrieve data, keep in mind the following guidelines:

· Use opening <cfquery> and ending </cfquery> tags, because the cfquery tag is a block tag.

· Enter the query name and datasource attributes within the opening cfquery tag.

· To tell the database what to process during the query, place SQL statements inside the cfquery block.

· When referencing text literals in SQL, use single-quotation marks ('). For example, SELECT * FROM mytable
   WHERE FirstName='Jacob' selects every record from mytable in which the first name is Jacob.

· Surround attribute values with double quotation marks ("attrib_value").

· Make sure that a data source exists in the ColdFusion Administrator before you reference it in a cfquery tag.

· Columns and tables that you refer to in your SQL statement must exist, otherwise the query fails.

· Reference the query data by naming the query in one of the presentation tags, such as cfoutput, cfgrid, cftable,
   cfgraph, or cftree.

· When ColdFusion returns database columns, it removes table and owner prefixes. For example, if you query
   Employee.Emp_ID in the query, the Employee, is removed and returns as Emp_ID. You can use an alias to handle
   duplicate column names; for more information, see "Using Query of Queries" on page 428.

· You cannot use SQL reserved words, such as MIN, MAX, COUNT, in a SQL statement. Because reserved words are
   database-dependent, see the documentation of your database for a list of reserved words.



                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     412
Accessing and Using Data




· If you use COMPUTE AVG() in your SQL, ColdFusion 9 returns avg() as the column name. (Previous versions
   (ColdFusion 5 and ColdFusion MX 7) returned ave() as the column name.)

· To retrieve results returned by database triggers, add the following connection parameter in the connection string:

   AlwaysReportTriggerResults=true

   This parameter determines how the driver reports results generated by database triggers (procedures that are stored
   in the database and executed, or fired, when a table is modified). For Microsoft SQL Server 2005, this includes
   triggers fired by Data Definition Language (DDL) events. If set to true, the driver returns all results, including
   results generated by triggers. Multiple trigger results are returned one at a time. Use the method
   Statement.getMoreResults to retrieve individual trigger results. Warnings and errors are reported in the results as
   they are encountered.


Building queries
As discussed earlier, you build queries by using the cfquery tag and SQL.

Note: This procedure and many subsequent procedures use the cfdocexamples data source that connects to the
cfdocexamples.mdb database. This data source is installed by default. For information on adding or configuring a data
source, see Configuring and Administering ColdFusion.


Query the table
1 Create a ColdFusion page with the following content:

   <html>
   <head>
   <title>Employee List</title>
   </head>
   <body>
   <h1>Employee List</h1>
   <cfquery name="EmpList" datasource="cfdocexamples">
        SELECT FirstName, LastName, Salary, Contract
        FROM Employee
   </cfquery>
   </body>
   </html>

   Note: Adobe recommends that you create structured, reusable code by placing queries in ColdFusion components;
   however, for simplicity, the examples here include the query in the body of the ColdFusion page. For more information
   about using ColdFusion components, see "Building and Using ColdFusion Components" on page 177.

2 Save the page as emplist.cfm in the myapps directory under your web_root directory. For example, the default path
   on a Windows computer would be:

   C:\CFusion\wwwroot\myapps\

3 Enter the following URL in your web browser:

   http://localhost/myapps/emplist.cfm

   Only the header appears.

4 View the source in the browser.

   ColdFusion creates the EmpList data set, but only HTML and text return to the browser. When you view the page's
   source, you see only HTML tags and the heading "Employee List." To display the data set on the page, use code tags
   and variables to output the data.




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                             413
Accessing and Using Data




Reviewing the code
The query you just created retrieves data from the cfdocexamples database. The following table describes the
highlighted code and its function:


Code                                                         Description

<cfquery name="EmpList" datasource="cfdocexamples">          Queries the database specified in the cfdocexamples data source.

SELECT FirstName, LastName, Salary, Contract                 Gets information from the FirstName, LastName, Salary, and Contract
                                                             fields in the Employee table.
FROM Employee


</cfquery>                                                   Ends the cfquery block.



Outputting query data
After you define a query, you can use the cfoutput tag with the query attribute to output data from the recordset.
When you use the query attribute, keep in mind the following:

· ColdFusion loops through all the code contained within the cfoutput block, once for each row in the recordset
   returned from the database.

· Reference specific column names within the cfoutput block to output the data to the page.

· You can place text, CFML tags, and HTML tags inside or surrounding the cfoutput block to format the data on
   the page.

· Although you do not have to specify the query name when you refer to a query column, use the query name as a
   prefix for best practices reasons. For example, if you specify the Emplist query in your cfoutput tag, you can refer
   to the Firstname column in the Emplist query as Firstname. However, using the query name as a prefix,
   Emplist.Firstname, is preferred, and is in the following procedure.

The cfoutput tag accepts a variety of optional attributes but, ordinarily, you use the query attribute to define the
name of an existing query.

1 Edit emplist.cfm so that it appears as follows:

   <html>
   <head>
   <title>Employee List</title>
   </head>
   <body>
   <h1>Employee List</h1>
   <cfquery name="EmpList" datasource="cfdocexamples">
         SELECT FirstName, LastName, Salary, Contract
         FROM Employee
   </cfquery>
   <cfoutput query="EmpList">
   #EmpList.FirstName#, #EmpList.LastName#, #EmpList.Salary#, #EmpList.Contract#<br>
   </cfoutput>
   </body>
   </html>

2 Save the file and view it in your web browser:

   A list of employees appears in the browser, with each line displaying one row of data.

Note: If necessary, refresh your browser to see your changes.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                414
Accessing and Using Data




You created a ColdFusion application page that retrieves and displays data from a database. At present, the output is
raw and needs formatting. For more information, see "Introduction to Retrieving and Formatting Data" on page 703.


Reviewing the code
The results of the query appear on the page. The following table describes the highlighted code and its function:


 Code                                                              Description

 <cfoutput query="EmpList">                                        Displays information retrieved in the EmpList query.

 #EmpList.FirstName#, #EmpList.LastName#,                          Displays the value of the FirstName, LastName, Salary, and
                                                                   Contract fields of each record, separated by commas and spaces.
 #EmpList.Salary#, #EmpList.Contract#


 <br>                                                              Inserts a line break (go to the next line) after each record.

 </cfoutput>                                                       Ends the cfoutput block.



Query output notes and considerations
When outputting query results, keep in mind the following guidelines:

· A cfquery must retrieve data before the cfoutput tag can display its results. Although you can include both on
   the same page, Adobe recommends that you place queries in ColdFusion components and output the results on a
   separate page. For more information, see "Building and Using ColdFusion Components" on page 177.

· To output data from all the records of a query, specify the query name by using the query attribute in the cfoutput tag.

· Columns must exist and be retrieved to the application to output their values.

· Inside a cfoutput block that uses a cfquery attribute, you can prefix the query variables with the name of the
   query; for example, Emplist.FirstName.

· As with other attributes, surround the query attribute value with double-quotation marks (").

· As with any variables that you reference for output, surround column names with number signs (#) to tell
   ColdFusion to output the current values of the column.

· Add a <br> tag to the end of the variable references so that ColdFusion starts a new line for each row that the query
   returns.


Getting information about query results
Each time you query a database with the cfquery tag, you get the data (the recordset) and the query variables; together
they make up the query object. The following table describes the query variables, which are sometimes called query
properties:


 Variable               Description

 RecordCount            The total number of records returned by the query.

 ColumnList             A comma-delimited list of the query columns, in alphabetical order.

 SQL                    The SQL statement executed.

 Cached                 Whether the query was cached.

 SQLParameters          Ordered array of cfqueryparam values.

 ExecutionTime          Cumulative time required to process the query, in milliseconds.




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   415
Accessing and Using Data




In your CFML code, use these variables as if they are columns in a database table. Use the result attribute to specify
the name of the structure that ColdFusion populates with these variables. You then use that structure name to refer to
the query variables as the following example shows:


Output information about the query on your page
1 Edit emplist.cfm so that it appears as follows:

    <cfset Emp_ID = 1>
   <cfquery name="EmpList" datasource="cfdocexamples" result="tmpResult">
        SELECT FirstName, LastName, Salary, Contract
        FROM Employee
        WHERE Emp_ID = <cfqueryPARAM value = "#Emp_ID#"
                                  CFSQLType = "CF_SQL_INTEGER">
   </cfquery>
   <cfoutput query="EmpList">
        #EmpList.FirstName#, #EmpList.LastName#, #EmpList.Salary#, #EmpList.Contract#<br>
   </cfoutput> <br>
   <cfoutput>
        The query returned #tmpResult.RecordCount# records.<br>
        The query columns are:#tmpResult.ColumnList#.<br>
        The SQL is #tmpResult.SQL#.<br>
        Whether the query was cached: #tmpResult.Cached#.<br>
        Query execution time: #tmpResult.ExecutionTime#.<br>
   </cfoutput>
   <cfdump var="#tmpResult.SQLParameters#">

2 Save the file and view it in your web browser:

   The number of employees now appears below the list of employees. If necessary, refresh your browser and scroll to
   see the RecordCount output.


Reviewing the code
You now display the number of records retrieved in the query. The following table describes the code and its function:


 Code                                   Description

 <cfoutput>                             Displays what follows.

 The query returned                     Displays the text "The query returned".

 #EmpList.RecordCount#                  Displays the number of records retrieved in the EmpList query.

 records.                               Displays the text "records."

 </cfoutput>                            Ends the cfoutput block.



Query variable notes and considerations
When using query variables, keep in mind the following guidelines:

· Reference the query variable within a cfoutput block so that ColdFusion outputs the query variable value to the page.

· Surround the query variable reference with number signs (#) so that ColdFusion knows to replace the variable
   name with its current value.

· Do not use the cfoutput tag query attribute when you output the RecordCount or ColumnList property. If you
   do, you get one copy of the output for each row. Instead, prefix the variable with the name of the query.




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   416
Accessing and Using Data




Enhancing security with cfqueryparam
Some DBMSs let you send multiple SQL statements in a single query. However, hackers sometimes try to modify URL
or form variables in a dynamic query by appending malicious SQL statements to existing parameters. Be aware of
potential security risks when you pass parameters in a query string. These risks can exist in many development
environments, including ColdFusion, ASP, and CGI. Using the cfqueryparam tag can reduce this risk.


About query string parameters
When you let a query string pass a parameter, ensure that only the expected information is passed. The following
ColdFusion query contains a WHERE clause, which selects only database entries that match the last name specified in
the LastName field of a form:

<cfquery name="GetEmployees" datasource="cfdocexamples">
     SELECT FirstName, LastName, Salary
     FROM Employee
     WHERE LastName='#Form.LastName#'
</cfquery>

Someone could call this page with the following malicious URL:

http://myserver/page.cfm?Emp_ID=7%20DELETE%20FROM%20Employee

The result is that ColdFusion tries to execute the following query:

<cfquery name="GetEmployees" datasource="cfdocexamples">
     SELECT * FROM Employee
     WHERE Emp_ID = 7 DELETE FROM Employee
</cfquery>

In addition to an expected integer for the Emp_ID column, this query also passes malicious string code in the form of
a SQL statement. If this query successfully executes, it deletes all rows from the Employee table--something you
definitely do not want to enable by this method. To prevent such actions, evaluate the contents of query string
parameters.


Using cfqueryparam
You can use the cfqueryparam tag to evaluate query string parameters and pass a ColdFusion variable within a SQL
statement. This tag evaluates variable values before they reach the database. You specify the data type of the
corresponding database column in the cfsqltype attribute of the cfqueryparam tag. In the following example,
because the Emp_ID column in the cfdocexamples data source is an integer, you specify a cfsqltype of
cf_sql_integer:

<cfquery name="EmpList" datasource="cfdocexamples">
     SELECT * FROM Employee
     WHERE Emp_ID = <cfqueryparam value = "#Emp_ID#"
                                    cfsqltype = "cf_sql_integer">
</cfquery>

The cfqueryparam tag checks that the value of Emp_ID is an integer data type. If anything else in the query string is
not an integer, such as a SQL statement to delete a table, the cfquery tag does not execute. Instead, the cfqueryparam
tag returns the following error message:

Invalid data '7 DELETE FROM Employee' for CFSQLTYPE 'CF_SQL_INTEGER'.


Using cfqueryparam with strings
When passing a variable that contains a string to a query, specify a cfsqltype value of cf_sql_char, and specify the
maxLength attribute, as in the following example:



                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       417
Accessing and Using Data




<cfquery name = "getFirst" dataSource = "cfdocexamples">
     SELECT * FROM employees
     WHERE LastName = <cfqueryparam value = "#LastName#"
                                         cfsqltype = "cf_sql_char" maxLength = "17">
</cfquery>

In this case, cfqueryparam performs the following checks:

· It ensures that LastName contains a string.

· It ensures that the string is 17 characters or less.

· It escapes the string with single-quotation marks so that it appears as a single value to the database. Even if a hacker
   passes a bad URL, it appears as follows:

   WHERE LastName = 'Smith DELETE FROM MyCustomerTable'.


Using cfSqlType
The following table lists the available SQL types against which you can evaluate the value attribute of the
cfqueryparam tag:


 BIGINT                   BIT                         CHAR                       DATE

 DECIMAL                  DOUBLE                      FLOAT                      IDSTAMP

 INTEGER                  LONGVARCHAR                 MONEY                      MONEY4

 NUMERIC                  REAL                        REFCURSOR                  SMALLINT

 TIME                     TIMESTAMP                   TINYINT                    VARCHAR


Note: Specifying the cfsqltype attribute causes the DBMS to use bind variables, which can greatly enhance
performance.



Updating Your Database

Adobe ColdFusion lets you insert, update, and delete information in a database.


About updating your database
ColdFusion was originally developed as a way to readily interact with databases. You can quickly insert, update, and
delete the contents of your database by using ColdFusion forms, which are typically a pair of pages. One page displays
the form with which your end user enters values; the other page performs the action (insert, update, or delete).

Depending on the extent and type of data manipulation, you can use CFML with or without SQL commands. If you
use SQL commands, ColdFusion requires a minimal amount of SQL knowledge.


Inserting data
You usually use two application pages to insert data into a database:

· An insert form

· An insert action page




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     418
Accessing and Using Data




You can create an insert form with standard HTML form tags or with cfform tags (see "Creating custom forms with
the cfform tag" on page 723). When the user submits the form, form variables are passed to a ColdFusion action page
that performs an insert operation (and whatever else is called for) on the specified data source. The insert action page
can contain either a cfinsert tag or a cfquery tag with a SQL INSERT statement. The insert action page should also
contain a confirmation message for the end user.


Creating an HTML insert form
The following procedure creates a form using standard HTML tags.

1 Create a ColdFusion page with the following content:

   <html>
   <head>
   <title>Insert Data Form</title>
   </head>


   <body>
   <h2>Insert Data Form</h2>


   <table>
   <!--- begin html form;
   put action page in the "action" attribute of the form tag. --->
   <form action="insert_action.cfm" method="post">
   <tr>
        <td>Employee ID:</td>
        <td><input type="text" name="Emp_ID" size="4" maxlength="4"></td>
   </tr>
   <tr>
        <td>First Name:</td>
        <td><input type="Text" name="FirstName" size="35" maxlength="50"></td>
   </tr>
   <tr>
        <td>Last Name:</td>
        <td><input type="Text" name="LastName" size="35" maxlength="50"></td>
   </tr>
   <tr>
        <td>Department Number:</td>
        <td><input type="Text" name="Dept_ID" size="4" maxlength="4"></td>
   </tr>
   <tr>
        <td>Start Date:</td>
        <td><input type="Text" name="StartDate" size="16" maxlength="16"></td>




                                            

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     419
Accessing and Using Data




    </tr>
    <tr>
         <td>Salary:</td>
         <td><input type="Text" name="Salary" size="10" maxlength="10"></td>
    </tr>
    <tr>
         <td>Contractor:</td>
         <td><input type="checkbox" name="Contract" value="Yes" checked>Yes</td>
    </tr>
    <tr>
         <td>&nbsp;</td>
         <td><input type="Submit" value="Submit">&nbsp;<input type="Reset"
    value="Clear Form"></td>
    </tr>
    </form>
    <!--- end html form --->
    </table>


    </body>
    </html>

2 Save the file as insert_form.cfm in the myapps directory under your web_root and view it in your web browser.

Note: The form does not work until you write an action page for it. For more information, see "Creating an action page
to insert data" on page 419.


Data entry form notes and considerations
If you use the cfinsert tag in the action page to insert the data into the database, follow these rules for creating the
form page:

· Create HTML form fields for only the database columns into which you insert data.

· By default, cfinsert inserts all of the form's fields into the database columns with the same names. For example,
   it places the Form.Emp_ID value in the database Emp_ID column. The tag ignores form fields that lack
   corresponding database column names.

Note: You can also use the formfields attribute of the cfinsert tag to specify which fields to insert; for example,
formfields="prod_ID,Emp_ID,status".


Creating an action page to insert data
You can use the cfinsert tag or the cfquery tag to create an action page that inserts data into a database.


Creating an insert action page with cfinsert
The cfinsert tag is the easiest way to handle simple inserts from either a cfform or an HTML form. This tag inserts
data from all the form fields with names that match database field names.

1 Create a ColdFusion page with the following content:




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                  420
Accessing and Using Data




   <html>
   <head> <title>Input form</title> </head>


   <body>
   <!--- If the Contractor check box is clear,
         set the value of the Form.Contract to "No" --->
   <cfif not isdefined("Form.Contract")>
         <cfset Form.Contract = "N">
   </cfif>


   <!--- Insert the new record --->
   <cfinsert datasource="cfdocexamples" tablename="EMPLOYEE">


   <h1>Employee Added</h1>
   <cfoutput> You have added #Form.FirstName# #Form.Lastname# to the employee database.
   </cfoutput>


   </body>
   </html>

2 Save the page as insert_action.cfm.

3 View insert_form.cfm in your web browser and enter values.

   Note: You might want to compare views of the Employee table in the cfdocexamples data source before and after
   inserting values in the form.

4 Click Submit.

   ColdFusion inserts your values into the Employee table and displays a confirmation message.


Reviewing the code
The following table describes the code and its function:


Code                                              Description

<cfif not isdefined("Form.Contract")>             Sets the value of Form.Contract to No if it is not defined. If the Contractor check
<cfset Form.Contract = "N">                       box is unchecked, no value is passed to the action page; however, the database
</cfif>
                                                  field must have some value.

<cfinsert datasource="cfdocexamples"              Creates a row in the Employee table of the cfdocexamples database. Inserts data
tablename="EMPLOYEE">                             from the form into the database fields with the same names as the form fields.

<cfoutput>You have added #Form.FirstName#         Informs the user that values were inserted into the database.
#Form.Lastname# to the employee
database.</cfoutput>


Note: If you use form variables in cfinsert or cfupdate tags, ColdFusion automatically validates any form data it
sends to numeric, date, or time database columns. You can use the hidden field validation functions for these fields to
display a custom error message. For more information, see "Introduction to Retrieving and Formatting Data" on
page 703.


Creating an insert action page with cfquery
For more complex inserts from a form submittal, you can use a SQL INSERT statement in a cfquery tag instead of
using a cfinsert tag. The SQL INSERT statement is more flexible because you can insert information selectively or
use functions within the statement.




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                      421
Accessing and Using Data




The following procedure assumes that you have created the insert_action.cfm page, as described in "Creating an insert
action page with cfinsert" on page 419.

1 In insert_action.cfm, replace the cfinsert tag with the following highlighted cfquery code:

    <html>
   <head>
        <title>Input form</title>
   </head>


   <body>
   <!--- If the Contractor check box is clear), set the value of the Form.Contract
        to "No" --->
   <cfif not isdefined("Form.Contract")>
        <cfset Form.Contract = "No">
   </cfif>


   <!--- Insert the new record --->
   <cfquery name="AddEmployee" datasource="cfdocexamples">
        INSERT INTO Employee
        VALUES (#Form.Emp_ID#, '#Form.FirstName#',
        '#Form.LastName#', #Form.Dept_ID#,
        '#Form.StartDate#', #Form.Salary#, '#Form.Contract#')
   </cfquery>


   <h1>Employee Added</h1>
   <cfoutput>You have added #Form.FirstName# #Form.Lastname# to the employee database.
   </cfoutput>


   </body>
   </html>

2 Save the page.

3 View insert_form.cfm in your web browser and enter values.

4 Click Submit.

   ColdFusion inserts your values into the Employee table and displays a confirmation message.


Reviewing the code
The following table describes the highlighted code and its function:


Code                                    Description

<cfquery name="AddEmployee"             Inserts a new row into the Employee table of the cfdocexamples database. Specifies each form
datasource="cfdocexamples">             field to be added.
INSERT INTO Employee VALUES
(#Form.Emp_ID#,                         Because you are inserting data into all database fields in the same left-to-right order as in the
'#Form.FirstName#',                     database, you do not have to specify the database field names in the query.
'#Form.LastName#',
#Form.Dept_ID#,                         Because #From.Emp_ID#, #Form.Dept_ID#, and #Form.Salary# are numeric, they do
'#Form.StartDate#',
                                        not need to be enclosed in quotation marks.
#Form.Salary#, '#Form.Contract#')
</cfquery>




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       422
Accessing and Using Data




Inserting into specific fields
The preceding example inserts data into all the fields of a table (the Employee table has seven fields). There might be
times when you do not want users to add data into all fields. To insert data into specific fields, the SQL statement in
the cfquery must specify the field names following both INSERT INTO and VALUES. For example, the following
cfquery omits salary and start date information from the update. Database values for these fields are 0 and NULL,
respectively, according to the database's design.

<cfquery name="AddEmployee" datasource="cfdocexamples">
     INSERT INTO Employee
          (Emp_ID,FirstName,LastName,
          Dept_ID,Contract)
     VALUES
          (#Form.Emp_ID#,'#Form.FirstName#','#Form.LastName#',
          #Form.Dept_ID#,'#Form.Contract#')
</cfquery>



Updating data
You usually use the following two application pages to update data in a database:

· An update form

· An update action page

You can create an update form with cfform tags or HTML form tags. The update form calls an update action page,
which can contain either a cfupdate tag or a cfquery tag with a SQL UPDATE statement. The update action page
should also contain a confirmation message for the end user.


Creating an update form
The following are the key differences between an update form and an insert form:

· An update form contains a reference to the primary key of the record that is being updated.

   A primary key is a fields in a database table that uniquely identifies each record. For example, in a table of employee
   names and addresses, only the Emp_ID is unique to each record.

· An update form is populated with existing record data.

The easiest way to designate the primary key in an update form is to include a hidden input field with the value of the
primary key for the record you want to update. The hidden field indicates to ColdFusion which record to update.

1 Create a ColdFusion page with the following content:




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                         423
Accessing and Using Data




   <html>
   <head>
   <title>Update Form</title>
   </head>


   <body>
   <cfquery name="GetRecordtoUpdate" datasource="cfdocexamples">
        SELECT * FROM Employee
        WHERE Emp_ID = #URL.Emp_ID#
   </cfquery>



   <cfoutput query="GetRecordtoUpdate">
   <table>
   <form action="update_action.cfm" method="Post">
        <input type="Hidden" name="Emp_ID" value="#Emp_ID#"><br>
   <tr>
        <td>First Name:</td>
        <td><input type="text" name="FirstName" value="#FirstName#"></td>
   </tr>
   <tr>
        <td>Last Name:</td>
        <td><input type="text" name="LastName" value="#LastName#"></td>
   </tr>
   <tr>
        <td>Department Number:</td>
        <td><input type="text" name="Dept_ID" value="#Dept_ID#"></td>
   </tr>
   <tr>
        <td>Start Date:</td>
        <td><input type="text" name="StartDate" value="#StartDate#"></td>
   </tr>
   <tr>
        <td>Salary:</td>
        <td><input type="text" name="Salary" value="#Salary#"></td>
   </tr>
   <tr>
        <td>Contractor:</td>
        <td><cfif #Contract# IS "Yes">
              <input type="checkbox" name="Contract" checked>Yes
        <cfelse>
              <input type="checkbox" name="Contract">Yes
        </cfif></td>
   </tr>
   <tr>
        <td>&nbsp;</td>
        <td><input type="Submit" value="Update Information"></td>
   </tr>
   </form>
   </table>
   </cfoutput>


   </body>
   </html>

2 Save the file as update_form.cfm.




                                       

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                               424
Accessing and Using Data




3 View update_form.cfm in your web browser by specifying the page URL and an Employee ID; for example, enter
   the following: http://localhost/myapps/update_form.cfm?Emp_ID=3

Note: Although you can view an employee's information, code an action page before you can update the database. For
more information, see "Creating an action page to update data" on page 424.


Reviewing the code
The following table describes the code and its function:


 Code                                                      Description

 <cfquery name="GetRecordtoUpdate"                         Queries the cfdocexamples data source and returns records in which
 datasource="cfdocexamples">                               the employee ID matches what was entered in the URL that called this
 SELECT * FROM Employee
                                                           page.
 WHERE Emp_ID = #URL.Emp_ID#
 </cfquery>

 <cfoutput query="GetRecordtoUpdate">                      Makes available as variables the results of the GetRecordtoUpdate
 ...                                                       query in the form created in subsequent lines.
 </cfoutput>

 <form action="update_action.cfm" method="Post">           Creates a form whose variables are processed on the
 ...                                                       update_action.cfm action page.
 </form>

 <input type="Hidden" name="Emp_ID"                        Uses a hidden input field to pass the Emp_ID (primary key) value to
 value="#Emp_ID#"><br>                                     the action page.

 First Name:                                               Populates the fields of the update form. This example does not use
 <input type="text" name="FirstName"                       ColdFusion formatting functions. As a result, start dates look like
 value="#FirstName#"><br>
                                                           1985-03-12 00:00:00 and salaries do not have dollar signs or commas.
 Last Name:
                                                           The user can replace the information in any field using any valid input
 <input type="text" name="LastName"
 value="#LastName#"><br>                                   format for the data.
 Department Number:
 <input type="text" name="Dept_ID"
 value="#Dept_ID#"><br>
 Start Date:
 <input type="text" name="StartDate"
 value="#StartDate#"><br>
 Salary:
 <input type="text" name="Salary"
 value="#Salary#"><br>

 Contracto r:                                              The Contract field requires special treatment because a check box
 < cfif #Contract# IS "Yes">                               appears and sets its value. The cfif structure puts a check mark in the
 <input type="checkbox"     name="C ontract"
                                                           check box if the Contract field value is Yes, and leaves the box empty
 checked>Yes<br>
                                                           otherwise.
 <cfelse>
 <input type="checkbox" name="Contract"> Yes <br>
 </cfif>
 <br>
 <input type="Submit" value="Update Information">
 </form>
 </cfoutput>



Creating an action page to update data
You can create an action page to update data with either the cfupdate tag or cfquery with the UPDATE statement.


Creating an update action page with cfupdate
The cfupdate tag is the easiest way to handle simple updates from a front-end form. The cfupdate tag has an almost
identical syntax to the cfinsert tag.




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                     425
Accessing and Using Data




To use the cfupdate tag, include the primary key fields in your form submittal. The cfupdate tag automatically
detects the primary key fields in the table that you are updating and looks for them in the submitted form fields.
ColdFusion uses the primary key fields to select the record to update (therefore, you cannot update the primary key
value itself). It then uses the remaining form fields that you submit to update the corresponding fields in the record.
Your form only needs to have fields for the database fields that you want to change.

1 Create a ColdFusion page with the following content:

   <html>
   <head>
        <title>Update Employee</title>
   </head>
   <body>
   <cfif not isdefined("Form.Contract")>
        <cfset form.contract = "N">
   <cfelse>
        <cfset form.contract = "Y">
   </cfif>


   <cfupdate datasource="cfdocexamples" tablename="EMPLOYEE">


   <h1>Employee Updated</h1>
   <cfoutput>
   You have updated the information for #Form.FirstName# #Form.LastName# in the employee
        database.
   </cfoutput>


   </body>
   </html>

2 Save the page as update_action.cfm.

3 View update_form.cfm in your web browser by specifying the page URL and an Employee ID; for example, enter
   the following: http://localhost/myapps/update_form.cfm?Emp_ID=3

4 Enter new values in any of the fields, and click Update Information.

   ColdFusion updates the record in the Employee table with your new values and displays a confirmation message.


Reviewing the code
The following table describes the code and its function:


Code                                                      Description

<cfif not isdefined("Form.Contract")>                     Sets the value of Form.Contract to No if it is not defined, or to Yes if it is
<cfset Form.contract = "N">                               defined. If the Contractor check box is unchecked, no value is passed to the
<cfelse>
                                                          action page; however, the database field must have some value.
<cfset form.contract = "Y">
</cfif>

<cfupdate datasource="cfdocexamples"                      Updates the record in the database that matches the primary key on the
tablename="EMPLOYEE">                                     form (Emp_ID). Updates all fields in the record with names that match the
                                                          names of form controls.

<cfoutput>                                                Informs the user that the change was made successfully.
You have updated the information for
#Form.FirstName# #Form.LastName# in the employee
database.
</cfoutput>




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                 426
Accessing and Using Data




Creating an update action page with cfquery
For more complicated updates, you can use a SQL UPDATE statement in a cfquery tag instead of a cfupdate tag.
The SQL UPDATE statement is more flexible for complicated updates.

The following procedure assumes that you have created the update_action.cfm page as described in "Creating an
update action page with cfupdate" on page 424.

1 In update_action.cfm, replace the cfupdate tag with the following highlighted cfquery code:

   <html>
   <head>
        <title>Update Employee</title>
   </head>
   <body>
   <cfif not isdefined("Form.Contract")>
        <cfset form.contract = "No">
   <cfelse>
        <cfset form.contract = "Yes">
   </cfif>


   <!--- cfquery requires date formatting when retrieving from
   Access. Use the left function when setting StartDate to trim
   the ".0" from the date when it first appears from the
   Access database --->
        <cfquery name="UpdateEmployee" datasource="cfdocexamples">
        UPDATE Employee
        SET FirstName = '#Form.Firstname#',
              LastName = '#Form.LastName#',
              Dept_ID = #Form.Dept_ID#,
              StartDate = '#left(Form.StartDate,19)#',
              Salary = #Form.Salary#
        WHERE Emp_ID = #Form.Emp_ID#
   </cfquery>


   <h1>Employee Updated</h1>
   <cfoutput>
   You have updated the information for
   #Form.FirstName# #Form.LastName#
   in the employee database.
   </cfoutput>
   </body>
   </html>

2 Save the page.

3 View update_form.cfm in your web browser by specifying the page URL and an Employee ID; for example, enter
   the following: http://localhost/myapps/update_form.cfm?Emp_ID=3

4 Enter new values in any of the fields, and click Update Information.

   ColdFusion updates the record in the Employee table with your new values and displays a confirmation message.

When the cfquery tag retrieves date information from a Microsoft Access database, it displays the date and time with
tenths of seconds, as follows:


Deleting data
You use a cfquery tag with a SQL DELETE statement to delete data from a database. ColdFusion has no cfdelete tag.




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                427
Accessing and Using Data




Deleting a single record
To delete a single record, use the table's primary key in the WHERE condition of a SQL DELETE statement. In the
following procedure, Emp_ID is the primary key, so the SQL Delete statement is as follows:

DELETE FROM Employee WHERE Emp_ID = #Form.Emp_ID#

You often want to see the data before you delete it. The following procedure displays the data to be deleted by reusing
the form page used to insert and update data. Any data that you enter in the form before submitting it is not used, so
you can use a table to display the record to be deleted instead.

1 In update_form.cfm, change the title to "Delete Form" and the text on the submit button to "Delete Record".

2 Change the form tag so that it appears as follows:

    <form action="delete_action.cfm" method="Post">

3 Save the modified file as delete_form.cfm.

4 Create a ColdFusion page with the following content:

    <html>
    <head>
    <title>Delete Employee Record</title>
    </head>
    <body>


    <cfquery name="DeleteEmployee"
        datasource="cfdocexamples">
              DELETE FROM Employee
              WHERE Emp_ID = #Form.Emp_ID#
    </cfquery>


    <h1>The employee record has been deleted.</h1>
    <cfoutput>
    You have deleted #Form.FirstName# #Form.LastName# from the employee database.
    </cfoutput>
    </body>
    </html>

5 Save the page as delete_action.cfm.

6 View delete_form.cfm in your web browser by specifying the page URL and an Employee ID; for example, enter
   the following: http://localhost/myapps/delete_form.cfm?Emp_ID=3.Click Delete Record

   ColdFusion deletes the record in the Employee table and displays a confirmation message.


Reviewing the code
The following table describes the code and its function:


 Code                                                    Description

 <cfquery name="DeleteEmployee"                          Deletes the record in the database whose Emp_ID column matches the
 datasource="cfdocexamples">                             Emp_ID (hidden) field on the form. Since the Emp_ID is the table's primary
 DELETE FROM Employee WHERE Emp_ID = #Form.Emp_ID#
                                                         key, only one record is deleted.
 </cfquery>

 <cfoutput>                                              Informs the user that the record was deleted.
 You have deleted #Form.FirstName#
 #Form.LastName# from the employee database.
 </cfoutput>




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                        428
Accessing and Using Data




Deleting multiple records
You can use a SQL condition to delete several records. The following example deletes the records for everyone in the
Sales department (which has Dept_ID number 4) from the Employee table:

DELETE FROM Employee WHERE Dept_ID = 4

To delete all the records from the Employee table, use the following code:

DELETE FROM Employee

Important: Deleting records from a database is not reversible. Use DELETE statements carefully.



Using Query of Queries

A query that retrieves data from a recordset is called a Query of Queries. After you generate a recordset, you can interact
with its results as if they are database tables by using Query of Queries.


About recordsets
Query of Queries is based on manipulating the recordset, which you can create using the cfquery tag and other ways.

When you execute a database query, Adobe ColdFusion retrieves the data in a recordset. In addition to presenting
recordset data to the user, you can manipulate this recordset to improve the performance of your application.

Because a recordset contains rows (records) and columns (fields), you can think of it as a virtual database table, or as
a spreadsheet. For example, the cfpop tag retrieves a recordset in which each row is a message and each column is a
message component, such as To, From, and Subject.


Creating a recordset
You can perform a Query of Queries on any ColdFusion tag or function that generates a recordset, including the
following:

· cfcollection

· cfdirectory

· cfftp

· cfhttp

· cfindex

· cfldap

· cfmail

· cfpop

· cfprocresult

· cfquery(against a database or against another Query of Queries)

· cfsearch

· cfstoredproc

· cfwddx

· The QueryNew function




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      429
Accessing and Using Data




Creating a recordset with the QueryNew() function
In addition to creating a recordset by using a cfquery or other CFML tags, you can create it with the QueryNew
function.

1 Create a ColdFusion page with the following content:

   <html>
   <head>
   <title>The queryNew function</title>
   </head>
   <body>
   <h2>QueryNew Example</h2>


   <!--- Create a query, specify data types for each column. --->
   <cfset qInstruments = queryNew("name, instrument, years_playing",
        "CF_SQL_VARCHAR, CF_SQL_VARCHAR, CF_SQL_INTEGER")>


   <!--- Add rows. --->
   <cfset newrow = queryaddrow(qInstruments, 3)>


   <!--- Set values in cells. --->
   <cfset temp = querysetcell(qInstruments, "name", "Thor", 1)>
   <cfset temp = querysetcell(qInstruments, "instrument", "hammer", 1)>
   <cfset temp = querysetcell(qInstruments, "years_playing", "1000", 1)>


   <cfset temp = querysetcell(qInstruments, "name", "Bjorn", 2)>
   <cfset temp = querysetcell(qInstruments, "instrument", "sitar", 2)>
   <cfset temp = querysetcell(qInstruments, "years_playing", "24", 2)>


   <cfset temp = querysetcell(qInstruments, "name", "Raoul", 3)>
   <cfset temp = querysetcell(qInstruments, "instrument", "flute", 3)>
   <cfset temp = querysetcell(qInstruments, "years_playing", "12", 3)>


   <!--- Output the query. --->
   <cfoutput query="qInstruments">
        <pre>#name##instrument# #years_playing#</pre>
   </cfoutput>


   <h3>Individual record retrieval:</h3>
   <cfoutput>
   <p>#qInstruments.name[2]# has played #qInstruments.instrument[2]# for
        #qInstruments.years_playing[2]# years.</p>
   </cfoutput>


   </body>
   </html>

2 Save the page as queryNew.cfm in the myapps directory under the web_root directory.

3 Display queryNew.cfm in your browser


About Query of Queries
After you have created a recordset with a tag or function, you can retrieve data from the recordset in one or more
dependent queries. A query that retrieves data from a recordset is called a Query of Queries. A typical use of a Query
of Queries is to retrieve an entire table into memory with one query, and then access the table data (the recordset) with
subsequent sorting or filtering queries. In essence, you query the recordset as if it is a database table.



                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      430
Accessing and Using Data




Note: Because you can generate a recordset in ways other than using the cfquery tag, the term In Memory Query is
sometimes used instead of Query of Queries.


Benefits of Query of Queries
Performing a Query of Queries has many benefits, including the following:

1 When you have to access the same tables multiple times, you greatly reduce access time, because the data is already
   in memory (in the recordset).

   A Query of Queries is ideal for tables of 5,000 to 50,000 rows, and is limited only by the memory of the ColdFusion
   host computer.

2 You can perform joins and union operations on results from different data sources.

   For example, you can perform a union operation on queries from different databases to eliminate duplicates for a
   mailing list.

3 You can efficiently manipulate cached query results in different ways. You can query a database once, and then use
   the results to generate several different summary tables.

   For example, to summarize the total salary by department, by skill, and by job, you can make one query to the
   database and use its results in three separate queries to generate the summaries.

4 You can obtain drill-down, master-detail information for which you do not access the database for the details.

   For example, you can select information about departments and employees in a query, and cache the results. You
   can then display the names of the employees. When users select an employee, the application displays the details of
   the employees by selecting information from the cached query, without accessing the database.

5 You can use a Query of Queries in report definitions to generate subreport data. For more information, see "Using
   subreports" on page 1033.


Performing a Query of Queries
Perform a Query of Queries as follows:

1 Generate a recordset through a master query.

   You can write a master query using a tag or function that creates a recordset. For more information, see "Creating
   a recordset" on page 428.

2 Write a detail query--a cfquery tag that specifies dbtype="query".

3 In the detail query, write a SQL statement that retrieves the relevant records. Specify the names of one or more
   existing queries as the table names in your SQL code. Do not specify a datasource attribute.

4 If the database content does not change rapidly, use the cachedwithin attribute of the master query to cache the
   query results between page requests. This way, ColdFusion accesses the database on the first page request, and does
   not query the database again until the specified time expires. Use the CreateTimeSpan function to specify the
   cachedwithin attribute value (in days, hours, minutes, seconds format).

The detail query generates a new query result set, identified by the value of the name attribute of the detail query. The
following example illustrates the use of a master query and a single detail query that extracts information from the
master.


Use the results of a query in a query
1 Create a ColdFusion page with the following content:




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                               431
Accessing and Using Data




    <h1>Employee List</h1>
   <!--- LastNameSearch (normally generated interactively) --->
   <cfset LastNameSearch="Doe">


   <!--- Master Query --->
   <cfquery datasource="cfdocexamples" name="master"
        cachedwithin=#CreateTimeSpan(0,1,0,0)#>
        SELECT * from Employee
   </cfquery>


   <!--- Detail Query (dbtype=query, no data source) --->
   <cfquery dbtype="query" name="detail">
        SELECT Emp_ID, FirstName, LastName
        FROM master
        WHERE LastName=<cfqueryparam value="#LastNameSearch#"
   cfsqltype="cf_sql_char" maxLength="20"></cfquery>


   <!--- output the detail query results --->
   <p>Output using a query of query:</p>
   <cfoutput query=detail>
        #Emp_ID#: #FirstName# #LastName#<br>
   </cfoutput>


   <p>Columns in the master query:</p>
   <cfoutput>
        #master.columnlist#<br>
   </cfoutput>


   <p>Columns in the detail query:</p>
   <cfoutput>
        #detail.columnlist#<br>
   </cfoutput>

2 Save the page as query_of_query.cfm in the myapps directory under the web_root.

3 Display query_of_query.cfm in your browser


Reviewing the code
The master query retrieves the entire Employee table from the cfdocexamples data source. The detail query selects only
the three columns to display for employees with the specified last name. The following table describes the code and its
function:


 Code                                                   Description

 cfset LastNameSearch="Doe"                             Sets the last name to use in the detail query. In a complete application,
                                                        this information comes from user interaction.

 <cfquery datasource="cfdocexamples" name="master"      Queries the cfdocexamples data source and selects all data in the
 cachedwithin=#CreateTimeSpan(0,1,0,0)#>                Employees table. Caches the query data between requests to this page,
 SELECT * from Employee
                                                        and does not query the database if the cached data is less than an hour
 </cfquery>
                                                        old.

 <cfquery dbtype="query" name="detail">                 Uses the master query as the source of the data in a new query, named
 SELECT Emp_ID, FirstName, LastName FROM master         detail. This new query selects only entries that match the last name
 WHERE LastName=<cfqueryparam
                                                        specified by the LastNameSearch variable. The query also selects only
 value="#LastNameSearch#" cfsqltype="cf_sql_char"
                                                        three columns of data: employee ID, first name, and last name. The query
 maxLength="20">
 </cfquery>                                             uses the cfqueryparam tag to prevent passing erroneous or harmful code.




                                            

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                 432
Accessing and Using Data




 Code                                                    Description

 <cfoutput query=detail>                                 Uses the detail query to display the list of employee IDs, first names, and
 #Emp_ID#: #FirstName# #LastName# <br>                   last names.
 </cfoutput>

 <cfoutput>                                              Lists all the columns returned by the master query.
 #master.columnlist#<br>
 </cfoutput>

 <cfoutput>                                              Lists all the columns returned by the detail query.
 #detail.columnlist#<br>
 </cfoutput>



Displaying recordset data incrementally
If your database is large, you can limit the number of rows displayed at one time. The following example shows how
to do this using the currentRow query variable of a Query of Queries. For more information on query variables, see
"Getting information about query results" on page 414.

1 Create a ColdFusion page with the following content:

    <html>
    <head>
    <title>QoQ with incremental row return</title>
    </head>


    <body>
    <h3>QoQ with incremental row return</h3>
    <!--- define startrow and maxrows to facilitate 'next N' style browsing --->
    <cfparam name = "MaxRows" default = "5">
    <cfparam name = "StartRow" default = "1">


    <!--- master query: retrieve all info from Employee table --->
    <cfquery name = "GetSals" datasource = "cfdocexamples">
        SELECT * FROM Employee
        ORDER BY LastName
    </cfquery>


    <!--- detail query: select 3 fields from the master query --->
    <cfquery name = "GetSals2" dbtype = "query">
        SELECT FirstName, LastName, Salary
        FROM GetSals
        ORDER BY LastName
    </cfquery>


    <!--- build table to display output --->
    <table cellpadding = 1 cellspacing = 1>
        <tr>
        <td bgcolor = f0f0f0>
        <b><i>&nbsp;</i></b>
        </td>


        <td bgcolor = f0f0f0>
        <b><i>FirstName</i></b>
        </td>


        <td bgcolor = f0f0f0>
        <b><i>LastName</i></b>
        </td>



                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                433
Accessing and Using Data




        <td bgcolor = f0f0f0>
        <b><i>Salary</i></b>
        </td>
        </tr>


   <!--- Output the query and define the startrow and maxrows
          parameters. Use the query variable currentRow to
          keep track of the row you are displaying. --->
        <cfoutput query = "GetSals2" startrow = "#StartRow#" maxrows = "#MaxRows#">
        <tr>
        <td valign = top bgcolor = ffffed>
              <b>#GetSals2.currentRow#</b>
        </td>


        <td valign = top>
              <font size = "-1">#FirstName#</font>
        </td>


        <td valign = top>
              <font size = "-1">#LastName#</font>
        </td>


        <td valign = top>
              <font size = "-1">#LSCurrencyFormat(Salary)#</font>
        </td>
        </tr>
        </cfoutput>
   <!--- If the total number of records is less than or equal to
        the total number of rows, provide a link to the same page, with the
        StartRow value incremented by MaxRows (5, in this example) --->
        <tr>
        <td colspan = 4>
        <cfif (startrow + maxrows) lte getsals2.recordcount>
        <a href="qoq_next_row.cfm?startrow=<cfoutput>#Evaluate(StartRow +
              MaxRows)#</cfoutput>">See next <cfoutput>#MaxRows#</cfoutput>
              rows</a>
        </cfif>
        </td>
        </tr>
   </table>
   </body>
   </html>

2 Save the page as qoq_next_row.cfm in the myapps directory under the web_root.

3 Display qoq_next_row.cfm in your browser.


Using the cfdump tag with query results
As you debug your CFML code, you can use the cfdump tag to quickly display the contents of your query. This tag has
the following format:

<cfdump var="#query_name#">

For more information on the cfdump tag, see the CFML Reference.




                                           

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    434
Accessing and Using Data




Using Query of Queries with non-SQL recordsets
A Query of Queries can operate on any CFML tag or function that returns a recordset; you are not limited to operating
on cfquery results. You can perform queries on non-SQL recordsets, such as a cfdirectory tag, a cfsearch tag, a
cfldap tag, and so on.

The following example shows how a Query of Queries interacts with the recordset of a Verity search. This example
assumes that you have a valid Verity collection, called bbb, which contains documents with a target word, film, or its
variants (films, filmed, filming). Change the name of the collection and the search criteria to as appropriate for your
Verity collection. For more information on Verity, see "Building a Search Interface" on page 476.


Use Query of Queries with a Verity recordset
1 Create a ColdFusion page with the following content:

    <html>
   <head>
   <title>QoQ and Verity</title>
   </head>


   <body>
   <!--- Master query: retrieve all documents from the bbb collection
   that contain 'film' (or its stemmed variants); change values for
   collection and criteria as needed for your Verity collection. --->
   <cfsearch name = "quick"
        collection="bbb"
        type = "simple"
        criteria="film">


   <h3>Master query dump:</h3>
   <cfdump var="#quick#">


   <!--- Detail query: retrieve from the master query only those
   documents with a score greater than a criterion (here,
   0.7743). --->
   <cfquery name="qoq" dbtype="query">
        SELECT * from quick
        WHERE quick.score > 0.7743
   </cfquery>


   <h3>Detail query dump:</h3>
   <cfdump var="#qoq#">


   </body>
   </html>

2 Save the page as qoq_verity.cfm in the myapps directory under the web_root.

3 Display qoq_verity.cfm in your browser

The next example shows how a Query of Queries combines recordsets from a cfdirectory tag, which is limited to
retrieval of one file type per use.


Use Query of Queries to combine recordsets
1 Create a ColdFusion page with the following content:




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                          435
Accessing and Using Data




    <html>
    <head>
    <title>Images Folder</title>
    </head>


    <body>
    <h2>Image Retrieval with QoQ</h2>
    <!--- Set the images directory. --->
    <cfset dir = ("C:\pix\")>


    <!--- Retrieve all GIFs. --->
    <cfdirectory name="GetGIF"
        action="list"
        directory="#dir#"
        filter="*.gif">


    <!--- Retrieve all JPGs --->
    <cfdirectory name="GetJPG"
        action="list"
        directory="#dir#"
        filter="*.jpg">


    <!--- Join the queries with a UNION in a QoQ (cfdirectory
               automatically returns the directory name as "Name"). --->
    <cfquery dbtype="query" name="GetBoth">
        SELECT * FROM GetGIF
        UNION
        SELECT * FROM GetJPG
        ORDER BY Name
    </cfquery>


    <!--- Display output in a linked, ordered list. --->
    <cfoutput>
    <p>The <strong>#dir#</strong> directory contains #GetBoth.RecordCount#
        images:<br>
    <ol>
        <cfloop query="GetBoth">
              <li><a href="../images/#Name#">#GetBoth.Name#</a><br>
        </cfloop>
    </ol>
    </cfoutput>


    </body>
    </html>

2 Save the page as qoq_cfdirectory.cfm in the myapps directory under the web_root.

3 Display qoq_cfdirectory.cfm in your browser.


Query of Queries user guide
If you know SQL or have interacted with databases, you might be familiar with some of the Query of Queries
functionality.


Using dot notation
Query of Queries supports using dot notation in table names.



                                           

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    436
Accessing and Using Data




Example
If a structure named A contains a field named B, which contains a table named Products, you can refer to the table with
dot notation, as follows:

SELECT tape_ID, length
FROM A.B.Products;


Using joins
A join operation uses a single SELECT statement to return a result set from multiple, related tables, typically those
tables with a primary key - foreign key relationship. The two SQL clauses that perform joins are:

· WHERE clause: Query of Queries supports joins through a WHERE clause.

· INNER JOIN and OUTER JOIN: Query of Queries does not support joins through INNER JOIN or OUTER JOIN
    clauses.

Note: Query of Queries supports joins between two tables only.


Using unions
The UNION operator lets you combine the results of two or more SELECT expressions into a single recordset. The
original tables must have the same number of columns, and corresponding columns must be UNION-compatible data
types. Columns are UNION-compatible data types if they meet one of the following conditions:

· The same data type; for example, both Tinyint

· Both Numeric; for example, Tinyint, Smallint, Integer, Bigint, Double, Float, Real, Decimal, or Numeric

· Both Characters; for example, Char, Varchar, or LongVarchar

· Both Dates; for example, Time, TimeStamp, or Date

Note: Query Of Queries does not support ODBC-formatted dates and times.


Syntax
select_expression = select_expression UNION [ALL] select_expression


Example
This example uses the following tables:


 Table1

 Type(int)                   Name(varchar)

 1                           Tennis

 2                           Baseball

 3                           Football



 Table2

 ID(int)                     Sport(varchar)

 3                           Football

 4                           Volleyball

 5                           PingPong




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                437
Accessing and Using Data




To combine Table1 and Table2, use a UNION statement, as follows:

SELECT * FROM Table1
UNION
SELECT * FROM Table2

The UNION statement produces the following result (UNION) table:


Result table

Type(int)                   Name(varchar)

1                           Tennis

2                           Baseball

3                           Football

4                           Volleyball

5                           PingPong



Using aliases for column names
The column names of a UNION table are the column names in the result set of the first SELECT statement in the
UNION operation; Query of Queries ignores the column names in the other SELECT statement. To change the
column names of the result table, you can use an alias, as follows:

Select Type as SportType, Name as SportName from Table1
UNION
Select * from Table2


Duplicate rows and multiple tables
By default, the UNION operator removes duplicate rows from the result table. If you use the keyword ALL, then
duplicates are included.

You can combine an unlimited number of tables using the UNION operator, for example:

Select * from Table1
UNION
Select * from Table2
UNION
Select * from Table3
...


Parentheses and evaluation order
By default, the Query of Queries SQL engine evaluates a statement containing UNION operators from left to right.
You can use parentheses to change the order of evaluation. For example, the following two statements are different:




                                            

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                  438
Accessing and Using Data




/* First statement. */
SELECT * FROM TableA
UNION ALL
(SELECT * FROM TableB
     UNION
     SELECT * FROM TableC
)


/* Second statement. */
(SELECT * FROM TableA
     UNION ALL
     SELECT * FROM TableB
)
UNION
SELECT * FROM TableC

In the first statement, there are no duplicates in the union between TableB and TableC. Then, in the union between
that set and TableA, the ALL keyword includes the duplicates. In the second statement, duplicates are included in the
union between TableA and TableB but are eliminated in the subsequent union with TableC. The ALL keyword has no
effect on the final result of this expression.


Using other keywords with UNION
When you perform a UNION, the individual SELECT statements cannot have their own ORDER BY or COMPUTE
clauses. You can only have one ORDER BY or COMPUTE clause after the last SELECT statement; this clause is applied
to the final, combined result set. You can only specify GROUP BY and HAVING expressions in the individual SELECT
statements.


Using conditional operators
Query of Queries lets you use the following conditional operators in your SQL statements:


Test conditional
This conditional tests whether a Boolean expression is True, False, or Unknown.


Syntax
cond_test ::= expression [IS [NOT] {TRUE | FALSE | UNKNOWN} ]


Example
SELECT _isValid FROM Chemicals
WHERE _isValid IS true;


Null conditional
This conditional tests whether an expression is null.


Syntax
null_cond ::= expression IS [NOT] NULL


Example
SELECT bloodVal FROM Standards
WHERE bloodVal IS NOT null;




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    439
Accessing and Using Data




Comparison conditional
This conditional lets you compare an expression against another expression of the same data type (Numeric, String,
Date, or Boolean). You can use it to selectively retrieve only the relevant rows of a recordset.


Syntax
 comparison_cond ::= expression [> | >= | <> | != | < | <=] expression


Example
The following example uses a comparison conditional to retrieve only those dogs whose IQ is at least 150:

 SELECT dog_name, dog_IQ
FROM Dogs
WHERE dog_IQ >= 150;


BETWEEN conditional
This conditional lets you compare an expression against another expression. You can use it to selectively retrieve only
the relevant rows of a recordset. Like the comparison conditional, the BETWEEN conditional also compares; however,
the BETWEEN conditional compares against a range of values. Therefore, its syntax requires two values, which are
inclusive, a minimum and a maximum. Separate these values with the AND keyword.


Syntax
 between_cond ::= expression [NOT] BETWEEN expression AND expression


Example
The following example uses a BETWEEN conditional to retrieve only those dogs whose IQ is between 150 and 165,
inclusive:

 SELECT dog_name, dog_IQ
FROM Dogs
WHERE dog_IQ BETWEEN 150 AND 165;


IN conditional
This conditional lets you specify a comma-delimited list of conditions to match. It is similar in function to the OR
conditional. In addition to being more legible when working with long lists, the IN conditional can contain another
SELECT statement.


Syntax
 in_cond ::= expression [NOT] IN (expression_list)


Example
The following example uses the IN conditional to retrieve only those dogs who were born at either Ken's Kennels or
Barb's Breeders:

 SELECT dog_name, dog_IQ, Kennel_ID
FROM Dogs
WHERE kennel_ID IN ('Kens','Barbs');


LIKE conditional
This conditional lets you perform wildcard searches, in which you compare your data to search patterns. This strategy
differs from other conditionals, such as BETWEEN or IN, because the LIKE conditional compares your data to a value
that is partially unknown.



                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                        440
Accessing and Using Data




Syntax
like_cond ::= left_string_exp [NOT] LIKE right_string_exp [ESCAPE escape_char]

The left_string_exp can be either a constant string, or a column reference to a string column. The right_string_exp can
be either a column reference to a string column, or a search pattern. A search pattern is a search condition that consists
of literal text and at least one wildcard character. A wildcard character is a special character that represents an unknown
part of a search pattern, and is interpreted as follows:

· The underscore (_) represents any single character.

· The percent sign (%) represents zero or more characters.

· Brackets [ ] represents any character in the range.

· Brackets with a caret [^] represent any character not in the range.

· All other characters represent themselves.

Note: Earlier versions of ColdFusion do not support bracketed ranges.


Examples
The following example uses the LIKE conditional to retrieve only those dogs of the breed Terrier, whether the dog is
a Boston Terrier, Jack Russell Terrier, Scottish Terrier, and so on:

SELECT dog_name, dog_IQ, breed
FROM Dogs
WHERE breed LIKE '%Terrier';

The following examples are select statements that use bracketed ranges:

SELECT lname FROM Suspects WHERE lname LIKE 'A[^c]%';
SELECT lname FROM Suspects WHERE lname LIKE '[a-m]%';
SELECT lname FROM Suspects WHERE lname LIKE '%[]';
SELECT lname FROM Suspects WHERE lname LIKE 'A[%]%';
SELECT lname FROM Suspects WHERE lname LIKE 'A[^c-f]%';


Case sensitivity
Unlike the rest of ColdFusion, Query of Queries is case-sensitive. However, Query of Queries supports two string
functions, UPPER() and LOWER(), which you can use to achieve case-insensitive matching.


Examples
The following example matches only 'Sylvester':

SELECT dog_name
FROM Dogs
WHERE dog_name LIKE 'Sylvester';

The following example is not case sensitive; it uses the LOWER() function to treat 'Sylvester', 'sylvester', 'SYLVESTER',
and so on, as all lowercase, and matches them with the all lowercase string, `sylvester':

SELECT dog_name
FROM Dogs
WHERE LOWER(dog_name) LIKE 'sylvester';

If you use a variable on the right side of the LIKE conditional and want to ensure that the comparison is not case-
sensitive, use the LCase or UCase function to force the variable text to be all of one case, as in the following example:

WHERE LOWER(dog_name) LIKE '#LCase(FORM.SearchString)#';




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   441
Accessing and Using Data




Escaping wildcards
You can specify your own escape character by using the conditional ESCAPE clause.


Example
The following example uses the ESCAPE clause to enable a search for a literal percent sign (%), which ColdFusion
normally interprets as a wildcard character:

SELECT emp_discount
FROM Benefits
WHERE emp_discount LIKE '10\%'
ESCAPE '\';


Managing data types for columns
A Query of Queries requires that every column has metadata that defines the data type of the column. All queries that
ColdFusion creates have metadata. However, a query created with QueryNew function that omits the second parameter
does not contain metadata. You use this optional second parameter to define the data type of each column in the query.


Specify column data types in the QueryNew function
 Type a QueryNew function, specifying the column names in the first parameter and the data types in the second
   parameter, as the following example shows:

    <cfset qInstruments = queryNew("name, instrument, years_playing", "CF_SQL_VARCHAR,
   CF_SQL_VARCHAR, CF_SQL_INTEGER")>

   Note: To see the metadata for a Query of Queries, use the GetMetaData function.


Specify the column data types in the QueryAddColumn function
1 Create a query by specifying the QueryNew function with no parameters.

    <!--- Make a query. --->
    <cfset myQuery = QueryNew("")>

2 Add and populate a column with the QueryAddColumn function, specifying the data type in the third parameter:

    <!--- Create an array. --->
    <cfset FastFoodArray = ArrayNew(1)>
    <cfset FastFoodArray[1] = "French Fries">
    <cfset FastFoodArray[2] = "Hot Dogs">
    <cfset FastFoodArray[3] = "Fried Clams">
    <cfset FastFoodArray[4] = "Thick Shakes">
    <!--- Use the array to add a column to the query. --->
    <cfset nColumnNumber = QueryAddColumn(myQuery, "FastFood", "CF_SQL_VARCHAR",
        FastFoodArray)>

If you do not specify the data type, ColdFusion examines the first 50 rows of each column to determine the data type
when performing conditional expressions.

In some cases, ColdFusion can guess a data type that is inappropriate for your application. In particular, if you use
columns in a WHERE clause or other conditional expression, the data types must be compatible. If they are not
compatible, use the CAST function to recast one of the columns to a compatible data type. For more information on
casting, see "Using the CAST function" on page 442. For more information on data type compatibility, see
"Understanding Query of Queries processing" on page 448.

Note: Specifying the data type in the QueryNew function helps you avoid compatibility issues.




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                               442
Accessing and Using Data




Using the CAST function
In some cases, the data type of a column is not compatible with the processing you want to do. For example, query
columns returned by the cfhttp tag are all of type CF_SQL_VARCHAR, even if the contents are numeric. In this case,
use the Query of Queries CAST function to convert a column value into an expression of the correct data type.

The syntax for the CAST function is as follows:

CAST ( expression AS castType )

Where castType is one of the following:

· BINARY

· BIGINIT

· BIT

· DATE

· DECIMAL

· DOUBLE

· INTEGER

· TIME

· TIMESTAMP

· VARCHAR

For example:

<cfhttp
url="http://quote.yahoo.com/download/quotes.csv?Symbols=csco,jnpr&format=sc1l1&ext=.csv"
     method="GET"
     name="qStockItems"
     columns="Symbol,Change,LastTradedPrice"
     textqualifier=""""
     delimiter=","
     firstrowasheaders="no">
<cfoutput>
     <cfdump var="#qStockItems#">
     <cfdump var="#qStockItems.getColumnNames()#">
</cfoutput>


<cfoutput>
<cfloop index="i" from="1" to="#arrayLen(qStockItems.getColumnNames())#">
     #qStockItems.getMetaData().getColumnTypeName(javaCast("int",i))#<br/>
</cfloop>
</cfoutput>
<cftry>
     <cfquery name="hello" dbtype="query">
          SELECT SUM(CAST(qStockItems.LastTradedPrice as INTEGER))
          AS SUMNOW from qStockItems
     </cfquery>
     <cfcatch>Error in Query of Queries</cfcatch>
</cftry>


<cfoutput>
     <cfdump var="#hello#">
</cfoutput>




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                  443
Accessing and Using Data




Using aggregate functions
Aggregate functions operate on a set of data and return a single value. Use these functions for retrieving summary
information from a table, as opposed to retrieving an entire table and then operating on the recordset of the entire
table.

Consider using aggregate functions to perform the following operations:

· To display the average of a column

· To count the number of rows for a column

· To find the earliest date in a column

Since not every relational database management system (RDBMS) supports all aggregate functions, refer to the
documentation of your database. The following table lists the aggregate functions that Query of Queries supports:


 Function               Description

 AVG()                  Returns the average (mean) for a column.

 COUNT()                Returns the number of rows in a column.

 MAX()                  Returns the largest value of a column.

 MIN()                  Returns the lowest value of a column.

 SUM()                  Returns the sum of values of a column.



Syntax
 aggregate_func ::= <COUNT>(* | column_name) | AVG | SUM | MIN | MAX)
([ALL | DISTINCT] numeric_exp)


Example
The following example uses the AVG() function to retrieve the average IQ of all terriers:

 SELECT dog_name, AVG(dog_IQ) AS avg_IQ
FROM Dogs
WHERE breed LIKE '%Terrier';


Arbitrary expressions in aggregate functions
Query of Queries supports aggregate functions of any arbitrary expression, as follows:

 SELECT lorange, count(lorange+hirange)
FROM roysched
GROUP BY lorange;


Aggregate functions in arbitrary expressions
Query of Queries supports mathematical expressions that include aggregate functions, as follows:

 SELECT MIN(lorange) + MAX(hirange)
FROM roysched
GROUP BY lorange;


Using group by and having expressions
Query of Queries supports the use of any arbitrary arithmetic expression, as long as it is referenced by an alias.




                                                  

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                  444
Accessing and Using Data




Examples
The following code is correct:

SELECT (lorange + hirange)/2 AS midrange,
COUNT(*)
FROM roysched
GROUP BY midrange;

The following code is correct:

SELECT (lorange+hirange)/2 AS x,
COUNT(*)
FROM roysched GROUP BY x
HAVING x > 10000;

The following code is not supported in Query of Queries:

SELECT (lorange + hirange)/2 AS midrange,
COUNT(*)
FROM roysched
GROUP BY (lorange + hirange)/2;


Using ORDER BY clauses
Query of Queries supports the ORDER BY clause to sort. Make sure that it is the last clause in your SELECT statement.
You can sort by multiple columns, by relative column position, by nonselected columns. You can specify a descending
sort direction with the DESC keyword (by default, most RDBMS sorts are ascending, which makes the ASC keyword
unnecessary).


Syntax
order_by_column ::= ( <IDENTIFIER> | <INTEGER_LITERAL> ) [<ASC> | <DESC>]


Example
The following example shows a simple sort using an ORDER BY clause:

SELECT acetylcholine_levels, dopamine_levels
FROM results
ORDER BY dopamine_levels

The following example shows a more complex sort; results are first sorted by ascending levels of dopamine, then by
descending levels of acetylcholine. The ASC keyword is unnecessary, and is used only for legibility.

SELECT acetylcholine_levels, dopamine_levels
FROM results
ORDER BY 2 ASC, 1 DESC


Using aliases
Query of Queries supports the use of database column aliases. An alias is an alternate name for a database field or
value. Query of Queries lets you reuse an alias in the same SQL statement.

One way to create an alias is to concatenate (append) two or more columns to generate a value. For example, you can
concatenate a first name and a last name to create the value fullname. Because the new value does not exist in a
database, you refer to it by its alias. The AS keyword assigns the alias in the SELECT statement.


Examples
Query of Queries supports alias substitutions in the ORDER BY, GROUP BY, and HAVING clauses.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                               445
Accessing and Using Data




Note: Query of Queries does not support aliases for table names.

 SELECT FirstName + ' ' + LastName AS fullname
from Employee;

The following examples rely on these two master queries:

 <cfquery name="employee" datasource="2pubs">
     SELECT * FROM employee
</cfquery>


<cfquery name="roysched" datasource="2pubs">
     SELECT * FROM roysched
</cfquery>


ORDER BY example
 <cfquery name="order_by" dbtype="query">
     SELECT (job_id || job_lvl)/2 AS job_value
     FROM employee
     ORDER BY job_value
</cfquery>


GROUP BY example
 <cfquery name="group_by" dbtype="query">
     SELECT lorange || hirange AS x, count(hirange)
     FROM roysched
     GROUP BY x
</cfquery>


HAVING example
 <cfquery name="having" dbtype="query">
     SELECT (lorange || hirange)/2 AS x,
     COUNT(*)
     FROM roysched GROUP BY x
     HAVING x > 10000
</cfquery>


Handling null values
Query of Queries uses Boolean logic to handle conditional expressions. Proper handling of NULL values requires the
use of ternary logic. The IS [NOT] NULL clause works correctly in Query of Queries. However the following
expressions do not work properly when the column breed is NULL:

 WHERE (breed > 'A')
WHERE NOT (breed > 'A')

The correct behavior should not include NULL breed columns in the result set of either expression. To avoid this
limitation, add an explicit rule to the conditionals and rewrite them in the following forms:

 WHERE breed IS NOT NULL AND (breed > 'A')
WHERE breed IS NOT NULL AND not (breed > 'A')


Concatenating strings
Query of Queries support two string concatenation operators: + and ||, as the following examples show:

 LASTNAME + ', ' + FIRSTNAME
LASTNAME || ', ' || FIRSTNAME



                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   446
Accessing and Using Data




Escaping reserved keywords
ColdFusion has a list of reserved keywords, which are typically part of the SQL language and are not normally used for
names of columns or tables. To escape a reserved keyword for a column name or table name, enclose it in brackets.

Important: Earlier versions of ColdFusion let you use some reserved keywords without escaping them.


Examples
Query of Queries supports the following SELECT statement examples:

SELECT [from] FROM parts;
SELECT [group].firstname FROM [group];
SELECT [group].[from] FROM [group];

Query of Queries does not support nested escapes, such as in the following example:

SELECT [[from]] FROM T;

The following table lists ColdFusion reserved keywords:


ABSOLUTE               ACTION              ADD                       ALL                        ALLOCATE

ALTER                  AND                 ANY                       ARE                        AS

ASC                    ASSERTION           AT                        AUTHORIZATION              AVG

BEGIN                  BETWEEN             BIT                       BIT_LENGTH                 BOTH

BY                     CASCADE             CASCADED                  CASE                       CAST

CATALOG                CHAR                CHARACTER                 CHARACTER_LENGTH           CHAR_LENGTH

CHECK                  CLOSE               COALESCE                  COLLATE                    COLLATION

COLUMN                 COMMIT              CONNECT                   CONNECTION                 CONSTRAINT

CONSTRAINTS            CONTINUE            CONVERT                   CORRESPONDING              COUNT

CREATE                 CROSS               CURRENT                   CURRENT_DATE               CURRENT_TIME

CURRENT_TIMESTAMP      CURRENT_USER        CURSOR                    DATE                       DAY

DEALLOCATE             DEC                 DECIMAL                   DECLARE                    DEFAULT

DEFERRABLE             DEFERRED            DELETE                    DESC                       DESCRIBE

DESCRIPTOR             DIAGNOSTICS         DISCONNECT                DISTINCT                   DOMAIN

DOUBLE                 DROP                ELSE                      END                        END-EXEC

ESCAPE                 EXCEPT              EXCEPTION                 EXEC                       EXECUTE

EXISTS                 EXTERNAL            EXTRACT                   FALSE                      FETCH

FIRST                  FLOAT               FOR                       FOREIGN                    FOUND

FROM                   FULL                GET                       GLOBAL                     GO

GOTO                   GRANT               GROUP                     HAVING                     HOUR

IDENTITY               IMMEDIATE           IN                        INDICATOR                  INITIALLY

INNER                  INPUT               INSENSITIVE               INSERT                     INT

INTEGER                INTERSECT           INTERVAL                  INTO                       IS

ISOLATION              JOIN                KEY                       LANGUAGE                   LAST




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   447
Accessing and Using Data




 LEADING               LEFT                  LEVEL                    LIKE                        LOCAL

 LOWER                 MATCH                 MAX                      MIN                         MINUTE

 MODULE                MONTH                 NAMES                    NATIONAL                    NATURAL

 NCHAR                 NEXT                  NO                       NOT                         NULL

 NULLIF                NUMERIC               OCTET_LENGTH             OF                          ON

 ONLY                  OPEN                  OPTION                   OR                          ORDER

 OUTER                 OUTPUT                OVERLAPS                 PAD                         PARTIAL

 POSITION              PRECISION             PREPARE                  PRESERVE                    PRIMARY

 PRIOR                 PRIVILEGES            PROCEDURE                PUBLIC                      READ

 REAL                  REFERENCES            RELATIVE                 RESTRICT                    REVOKE

 RIGHT                 ROLLBACK              ROWS                     SCHEMA                      SCROLL

 SECOND                SECTION               SELECT                   SESSION                     SESSION_USER

 SET                   SMALLINT              SOME                     SPACE

 SQL                   SQLCODE               SQLERROR                 SQLSTATE                    SUBSTRING

 SUM                   SYSTEM_USER           TABLE                    TEMPORARY                   THEN

 TIME                  TIMESTAMP             TIMEZONE_HOUR            TIMEZONE_MINUTE             TO

 TRAILING              TRANSACTION           TRANSLATE                TRANSLATION                 TRIM

 TRUE                  UNION                 UNIQUE                   UNKNOWN                     UPDATE

 UPPER                 USAGE                 USER                     USING                       VALUE

 VALUES                VARCHAR               VARYING                  VIEW                        WHEN

 WHENEVER              WHERE                 WITH                     WORK                        WRITE

 YEAR                  ZONE



Using Queries of Queries with dates
If you create a query object with the QueryNew function and populate a column with date constants, ColdFusion stores
the dates as a string inside the query object until a Query of Queries is applied to the query object. When ColdFusion
applies a Query of Queries to the query object, it converts the string representations into date objects.

Query of Queries supports date constants in SQL and ODBC format, as follows:

· SQL format: Dates, times, or timestamps in one of the following format:

    · Date string: yyyy-mm-dd, for example, 1955-06-13.

    · Time string: hh:mm:ss[.[nnn]], for example, 14:34:30.75.

    · Timestamp string: yyyy-mm-dd hh:mm:ss[.[nnn]], for example, 1924-01-14 12:00:00.000.

· ODBC format: Dates, times, or timestamps in one of the following format:

    · Date string: {d 'value'}, for example, {d '2004-07-06'}.

    · Time string: {t 'value'}, for example, {t '13:45:30'}.

    · Timestamp string: {ts 'value'}, for example, {ts '2004-07-06 13:45:30'}.




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                         448
Accessing and Using Data




    If you want to convert the date to its original format, use the DateFormat function and apply the "mm/dd/yy" mask.



Understanding Query of Queries performance
Query of Queries performs well on single-table query objects that were accessed directly from a database. This happens
because ColdFusion stores meta information for a query object accessed from a database.

When working with a query resulting in a SQL join, Query of Queries performs as follows:

1 Query of Queries is efficient for simple joins in which only one equality exists between two column references or
   constants, for example:

    SELECT T1.a, b, c, d FROM T1, T2 WHERE T1.a = T2.a

2 Query of Queries is less efficient for joins in which the predicate contains multiple expressions, for example:

    SELECT T1.a, b, c, d FROM T1, T2
    WHERE T1.a = T2.a AND T1.b + T1.c = T2.b + T2.c


Understanding Query of Queries processing
Query of Queries can process the following:

· Column comparisons

· Queries passed by reference

· Complex objects


Comparing columns with different data types
Starting with ColdFusion MX 7, ColdFusion includes enhancements that allow you to compare columns with different
data types.

If one of the operands has a known column type (only constants have an unknown column type), Query of Queries
tries to coerce the constant with an unknown type to the type of the operand with metadata. The pairs of allowed
coercions are as follows:

· Binary, string

· Dates, string

· Numeric, bigdecimal

· Boolean, numeric

That is, ColdFusion can coerce between binary and string, but not between date and string.

If both operands have known data types, the types must be the same. The only exception is that ColdFusion can coerce
among integer, float, and double.

If both operands are constants, ColdFusion tries to coerce the values, first to the most restrictive type, then to the least
restrictive type.

· First to binary then to string.

· First to date then to string.

· First to boolean then to numeric.




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       449
Accessing and Using Data




Passing queries by reference
A Query of Queries is copied by reference from its related query; which means that ColdFusion does not create a query
when you create a Query of Queries. It also means that changes to a Query of Queries, such as ordering, modifying,
and deleting data, are also applied to the base query object.

If you do not want the original query to change, use the Duplicate function to create a copy and create the Query of
Queries using the copied query.


Managing complex objects
You cannot use Query Of Queries on a recordset that contains complex objects, such as arrays and structures.

Note: You can store a recordset in a complex object.



Managing LDAP Directories

CFML applications use the cfldap tag to access and manage LDAP (Lightweight Directory Access Protocol)
directories.

The following information teaches you to query and update an LDAP database. It is not assumed that you are familiar
with LDAP, and hence an introduction to LDAP directories and the LDAP protocol is provided. However, it is
assumed that you have information on the structure and attributes of your LDAP database. Hence, procedures to
create an LDAP directory or manage a directory server are not provided. To learn more about LDAP and LDAP
servers, see your LDAP server documentation and published books on LDAP.

The examples here use the Airius sample LDAP database that is supplied with the Netscape and iPlanet Directory
Servers.


About LDAP
The LDAP protocol enables organizations to arrange and access directory information in a hierarchy. In this context,
directory refers to a collection of information, such as a telephone directory, not a collection of files in a folder on a
disk drive.

LDAP originated in the mid-1990s as a response to the need to access ISO X.500 directories from computers that had
limited processing power. Since then, products such as iPlanet Server have been developed that are native LDAP
directory servers. Several companies now provide LDAP access to their directory servers, including Novell NDS,
Microsoft Active Directory Services (ADS), Lotus Domino, and Oracle.

An LDAP directory is typically a hierarchically structured database. Each layer in the hierarchy typically corresponds
to a level of organizational structure.




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       450
Accessing and Using Data




The following image shows a simple directory structure:



    Root                                  World




 Country                        USA                    Italy




Organization               Adobe                           Ferrari




  Unit           R&D               Sales               R&D              Sales




        Jack                 Ben                                 Gina              Sophia


Individual
                  Laura              Amy               Enzo                Marco



This example is fully symmetrical: all the entries at each layer are of the same type.

You can also structure an LDAP directory so that the layers under one entry contain different information from the
layers under another entry.

The following image shows such an asymmetric directory:


                                      airius.com




                   people                                          groups



                                                      HR                             QA
    Bruce                          Ben
                                                  Managers                       Managers




                                                        Directory         Accounting
          Laura               Amy
                                                       Managers            Managers



In this directory structure, the second level of the tree divides the directory into two organizational units: people and
groups. The third level contains entries with information that is specific to the organizational unit. Each person's entry
includes a name, e-mail address, and telephone number. Each group's entry includes the names of group members.




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      451
Accessing and Using Data




This complexity and flexibility is a key to the usefulness. of LDAP. With it, you can represent any organizational
structure.

LDAP offers performance advantages over conventional databases for accessing hierarchical, directory-like
information that is read frequently, and changed infrequently.

Although LDAP is often used for e-mail, address, telephone, or other organizational directories, it is not limited to
these types of applications. For example, you can store ColdFusion Advanced Security information in an LDAP
database.


The LDAP information structure
Several LDAP concepts are the basis of the LDAP information structure:

· Entry

· Attribute

· Distinguished name (DN)

· Schema, including the object class and attribute type


Entry
The basic information object of LDAP is the entry. An entry is composed of one or more attributes. Entries are subject
to content rules defined by the directory schema (see "Schema" on page 452).

Each node, not just the terminal nodes, of an LDAP directory is an entry. In the preceding images, each item is an entry.
For example, in the first diagram, both USA and Ferrari are entries. The USA entry's attributes could include a
Language attribute, and the Ferrari entry could include an entry for the chief executive officer.


Attribute
An LDAP directory entry consists of one or more attributes. Attributes have types and values. The type determines the
information that the values can contain. The type also specifies how the value is processed. For example, the type
determines whether an attribute can have multiple values. The mail attribute type, which contains an e-mail address,
is multivalued so you can store multiple e-mail addresses for one person.

Some commonly used attribute types have short keyword type names. Often these short keyword type names
correspond to longer type names, and the two names can be used interchangeably. The following table lists common
attribute type keywords used in LDAP directories:


 Keyword          Long name                               Comment

 c                CountryName

 st               stateOrProvinceName

 l                LocalityName                            Typically, city, but can be any geographical unit

 street           StreetAddress

 o                OrganizationName

 ou               OrganizationalUnitName

 cn               CommonName                              Typically, first and last name




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      452
Accessing and Using Data




 Keyword          Long name                               Comment

 sn               SurName

 dc               domaincomponent

 mail             mail                                    E-mail address


For more information, see "Attribute type" on page 453.


Distinguished name (DN)
An entry's distinguished name uniquely identifies it in the directory. A DN is made up of relative distinguished names
(RDNs). An RDN identifies the entry among the children of its parent entry. For example, in the first image in About
LDAP, the RDN for the Ferrari entry is "o=Ferrari".

An entry's DN consists of an entry's RDN followed by the DN of its parent. In other words, it consists of the RDNs for
the entry and each of the entry's parent entries, up to the root of the directory tree. Commas and optional spaces
separate the RDNs. For example, in the first image, the DN for the Ferrari entry is "o=Ferrari, c=Italy".

As with file system paths and URLs, entering the correct LDAP name format is essential to successful search
operations.

Note: The RDN is an attribute of a directory entry. The full DN is not. However, you can output the full DN by specifying
"dn" in a query's attributes list. For more information, see cfldap in CFML Reference. Adobe ColdFusion always
returns DNs with spaces after the commas.

A multivalued RDN is made up of more than one attribute-value pair. In multivalued RDNs, a plus sign (+) separates
the attribute-value pairs. In the sample directories, individuals could have complex RDNs consisting of their common
name and their e-mail address, for example, "cn=Robert Boyd + mail=rjboyd@adobe.com".


Schema
The concepts of schemas and object classes are central to a thorough understanding of LDAP. The information
provided here does not have detailed descriptions but is enough to use the cfldap tag effectively.

A directory schema is a set of rules that determines what can be stored in a directory. It defines, at a minimum, the
following two basic directory characteristics:

· The object classes to which entries can belong

· The directory attribute types


Object class
Object classes enable LDAP to group related information. Frequently, an object class corresponds to a real object or
concept, such as a country, person, room, or domain, which are all standard object type names. Each entry in an LDAP
directory must belong to one or more object classes.

The following characteristics define an object class:

· The class name

· A unique object ID that identifies the class

· The attribute types that entries of the class must contain

· The attribute types that entries of the class can optionally contain

· (Optional) A superior class from which the class is derived




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                           453
Accessing and Using Data




If an entry belongs to a class that derives from another class, the entry's objectclass attribute lists the lowest-level class
and all the superior classes from which the lowest-level class derives.

When you add, modify, or delete a directory entry, you must treat the entry's object class as a possibly multivalued
attribute. For example, when you add a new entry, you specify the object class in the cfldap tag attributes attribute.
To retrieve an entry's object class names, specify "objectclass" in the list of query attributes. To retrieve entries that
provide a specific type of information, you can use the object class name in the cfldap tag filter attribute.


Attribute type
The attribute type specification of a schema defines the following properties:

· The attribute type name

· A unique object ID that identifies the attribute type

· (Optional) An indication of whether the type is single-valued or multivalued (the default is multivalued)

· The attribute syntax and matching rules (such as case sensitivity)

The attribute type definition can also determine limits on the range or size of values that the type represents, or provide
an application-specific usage indicator. For standard attributes, a registered numeric ID specifies the syntax and
matching rule information. For more information on attribute syntaxes, see ETF RFC 2252 at
http://www.ietf.org/rfc/rfc2252.txt.

Operational attributes, such as creatorsName or modifyTimeStamp, are managed by the directory service and cannot
be changed by user applications.


Using LDAP with ColdFusion
The cfldap tag extends the ColdFusion query capabilities to LDAP network directory services. The cfldap tag lets you
use LDAP in many ways, such as the following:

· Create Internet White Pages so users can locate people and resources and get information about them.

· Provide a front end to manage and update directory entries.

· Build applications that incorporate data from directory queries in their processes.

· Integrate applications with existing organizational or corporate directory services.

The cfldap tag action attribute supports the following operations on LDAP directories:


Action                   Description

query                    Returns attribute values from a directory.

add                      Adds an entry to a directory.

delete                   Deletes an entry from a directory.

modify                   Adds, deletes, or changes the value of an attribute in a directory entry.

modifyDN                 Renames a directory entry (changes its distinguished name).


The following table lists the attributes that are required and optional for each action. For more information on each
attribute, see the cfldap tag in the CFML Reference.




                                                    

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                  454
Accessing and Using Data




 Action                  Required attributes                       Optional attributes

 query                   server, name, start, attributes           port, username, password, timeout, secure, rebind, referral,
                                                                   scope, filter, sort, sortControl, startRow, maxRows,
                                                                   separator, delimiter


 add                     server, dn, attributes                    port, username, password, timeout, secure, rebind, referral,
                                                                   separator, delimiter


 delete                  server, dn                                port, username, password, timeout, secure, rebind, referral


 modify                  server, dn, attributes                    port, username, password, timeout, secure, rebind, referral,
                                                                   modifyType, separator, delimiter


 modifyDN                server, dn, attributes                    port, username, password, timeout, secure, rebind, referral



Querying an LDAP directory
The cfldap tag lets you search an LDAP directory. The tag returns a ColdFusion query object with the results, which
you can use as you would any query result. When you query an LDAP directory, you specify the directory entry where
the search starts and the attributes whose values to return. You can specify the search scope and attribute content
filtering rules and use other attributes to further control the search.


Scope
The search scope sets the limits of a search. The default scope is the level below the distinguished name specified in the
start attribute. This scope does not include the entry identified by the start attribute. For example, if the start
attribute is "ou=support, o=adobe" the level below support is searched. You can restrict a query to the level of the
start entry, or extend it to the entire subtree below the start entry.


Search filter
The search filter syntax has the form attribute operator value. The default filter, objectclass=*, returns all entries in the
scope.

The following table lists the filter operators:


 Operator           Example                 Matches

 =*                 (mail=*)                All entries that contain a mail attribute.

 =                  (o=adobe)               Entries in which the organization name is adobe.

 ~=                 (sn~=Hansen)            Entries with a surname that approximates Hansen. The matching rules for approximate
                                            matches vary among directory vendors, but anything that "sounds like" the search string
                                            should be matched. In this example, the directory server might return entries with the
                                            surnames Hansen and Hanson.

 >=                 (st>=ma)                The name "ma" and names appearing after "ma" in an alphabetical state attribute list.

 <=                 (st<=ma)                The name "ma" and names appearing before "ma" in an alphabetical state attribute list.

 *                  (o=macro*)              Organization names that start with "macro".

                    (o=*media)              Organization names that end with "media".

                    (o=mac*ia)              Organization names that start with "mac" and end with "ia". You can use more than one *
                                            operator in a string; for example, m*ro*dia.

                    (o=*med*)               Organization names that contain the string "med", including the exact string match "med".




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                  455
Accessing and Using Data




Operator            Example                Matches

&                   (&(o=adobe)            Entries in which the organization name is "adobe" and the country is "usa".

                    (co=usa))

|                   (|(o=adobe)            Entries in which the organization name is "adobe" or the surname is "adobe", or the common
                                           name is "adobe".
                    (sn=adobe)

                    (cn=adobe))

!                   (!(STREET=*))          Entries that do not contain a StreetAddress attribute.


The Boolean operators & and | can operate on more than two attributes and precede all of the attributes on which they
operate. You surround a filter with parentheses and use parentheses to group conditions.

If the pattern that you are matching contains an asterisk, left parenthesis, right parenthesis, backslash, or NUL
character, use the following three-character escape sequence in place of the character:


Character                 Escape sequence

*                         \2A

(                         \28

)                         \29

\                         \5C

NUL                       \00


For example, to match the common name St*r Industries, use the filter:

(cn=St\2Ar Industries).

LDAP v3 supports an extensible match filter that permits server-specific matching rules. For more information on
using extensible match filters, see your LDAP server documentation.


Searching and sorting notes
· To search for multiple values of a multivalued attribute type, use the & operator to combine expressions for each
    attribute value. For example, to search for an entry in which cn=Robert Jones and cn=Bobby Jones, specify the
    following filter:

    filter="(&(cn=Robert Jones)(cn=Bobby Jones))"

· You can use object classes as search filter attributes; for example, you can use the following search filter:

    filter="(objectclass=inetorgperson)"

· To specify how query results are sorted, use the sort field to identify the attribute(s) to sort. By default, ColdFusion
    returns sorted results in case-sensitive ascending order. To specify descending order, case-insensitive sorting, or
    both, use the sortControl attribute.

· ColdFusion requests the LDAP server to do the sorting. Doing so can have the following effects:

    · The sort order can differ between ColdFusion MX and previous versions.

    · If you specify sorting and the LDAP server does not support sorting, ColdFusion generates an error. To sort
       results from servers that do not support sorting, use a query of queries on the results.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       456
Accessing and Using Data




· Using filter operators to construct sophisticated search criteria can degrade performance if the LDAP server is slow
   to process the synchronous search routines that cfldap supports. Use the cfldap tag timeout and maxRows
   attributes to control the apparent performance of pages that perform queries, by limiting the number of entries and
   by exiting the query if the server does not respond in a specified time.


Getting all the attributes of an entry
Typically, you do not use a query that gets all the attributes in an entry. Such a query would return attributes that only
the directory server uses. However, you can get all the attributes by specifying attributes="*" in your query.

If you do this, ColdFusion returns the results in a structure in which each element contains a single attribute name-
value pair. The tag does not return a query object. ColdFusion does this because LDAP directory entries, unlike the
rows in a relational table, vary depending on their object class.

For example, the following code retrieves the contents of the Airius directory:

<cfldap name="GetList"
     server=#myServer#
     action="query"
     attributes="*"
     scope="subtree"
     start="o=airius.com"
     sort="sn,cn">

This tag returns entries for all the people in the organization and entries for all the groups. The group entries have a
different object class, and therefore different attributes from the person entries. If ColdFusion returned both types of
entries in one query object, some rows would have only the group-specific attribute values and the other rows would
have only person-specific attribute values. Instead, ColdFusion returns a structure in which each attribute is an entry.


Example: querying an LDAP directory
The following example uses the cfldap tag to get information about the people in the Airius corporation's Santa Clara
office. Users can enter all or part of a person's name and get a list of matching names with their departments, e-mail
addresses, and telephone numbers.

This example uses the sample Airius corporate directory that is distributed with the Netscape Directory Server. If you
do not have access to this directory, modify the code to work with your LDAP directory.

1 Create a file that looks like the following:




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                       457
Accessing and Using Data




   <!--- This example shows the use of CFLDAP --->
   <html>
   <head> <title>cfldap Query Example</title> </head>


   <h3>cfldap Query Example</h3>


   <body>
   <p>This tool queries the Airius.com database to locate all people in the company's
        Santa Clara office whose common names contain the text entered in the form.</p>


   <p>Enter a full name, first name, last name, or name fragment.</p>


   <form action="cfldap.cfm" method="POST">
        <input type="text" name="name"><br><br>
        <input type="submit" value="Search">
   </form>
   <!--- make the LDAP query --->
   <!-- Note that some search text is required.
        A search filter of cn=** would cause an error -->
   <cfif (isdefined("form.name") AND (form.name IS NOT ""))>
        <cfldap
              server="ldap.airius.com"
              action="query"
              name="results"
              start="ou=People, o=Airius.com"
              scope="onelevel"
              filter="(&(cn=*#form.Name#*)(l=Santa Clara))"
              attributes="cn,sn,ou,mail,telephonenumber"
              sort="ou,sn"
              maxrows=100
              timeout=20000
        >


   <!--- Display results --->
        <table border=0 cellspacing=2 cellpadding=2>
          <tr>
              <th colspan=4><cfoutput>#results.RecordCount# matches found</cfoutput>
              </th>




                                       

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                             458
Accessing and Using Data




          </tr>
          <tr>
              <th>Name</th>
              <th>Department</th>
              <th>E-Mail</th>
              <th>Phone</th>
          </tr>
        <cfoutput query="results">
          <tr>
              <td>#cn#</td>
              <td>#listFirst(ou)#</td>
              <td><a href="mailto:#mail#">#mail#</a></td>
              <td>#telephonenumber#</td>
        </tr>
        </cfoutput>
        </table>
   </cfif>


   </body>
   </html>

2 Change the server attribute from ldap.airius.com to the name of your installation of the Airius database.

3 Save the page as cfldap.cfm and run it in your browser.


Reviewing the code
The following table describes the code:


Code                                              Description

<form action="cfldap.cfm" method="POST">          Uses a form to get the name or name fragment to search for.
 <input type="text" name="name"><br><br>
 <input type="submit" value="Search">
</form>




                                            

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                      459
Accessing and Using Data




 Code                                                 Description

 <cfif (isdefined("form.name") AND (form.name         Ensures that the user has submitted the form. This is necessary because the
 IS NOT ""))>                                         form page is also the action page. Ensures that the user entered search text.

 <cfldap                                              Connects anonymously to LDAP server ldap.airius.com, query the directory, and
  server="ldap.airius.com"                            return the results to a query object named results.
  action="query"
  name="results"                                      Starts the query at the directory entry that has the distinguished name
  start="ou=People, o=Airius.com"                     ou=People, o=Airius.com, and searches the directory level immediately below
  scope="onelevel"
                                                      this entry.
  filter="(&(cn=*#form.Name#*)(l=Santa
 Clara))"
                                                      Requests records for entries that contain the location (l) attribute value "Santa
  attributes="cn,sn,ou,mail,telephonenumber"
                                                      Clara" and the entered text in the common name attribute.
  sort="ou,sn"
  maxrows=100
                                                      Gets the common name, surname, organizational unit, e-mail address, and
  timeout=20000
  >                                                   telephone number for each entry.

                                                      Sorts the results first by organization name, then by surname. Sorts in the
                                                      default sorting order.

                                                      Limit the request to 100 entries. If the server does not return the data in 20
                                                      seconds, generates an error indicating that LDAP timed out.

 <table border=0 cellspacing=2 cellpadding=2>         Starts a table to display the output
   <tr>
  <th
 colspan=4><cfoutput>#results.RecordCount#
 matches found</cfoutput>
  </th>
   </tr>
   <tr>
  <th>Name</th>
  <th>Department</th>
  <th>E-Mail</th>
  <th>Phone</th>
   </tr>
  <cfoutput query="results">
                                                      Displays the number of records returned.
   <tr>
  <td>#cn#</td>
  <td>#listFirst(ou)#</td>
 <td><a href="mailto:#mail#">#mail#</a></td>
                                                      Displays the common name, department, e-mail address, and telephone
  <td>#telephonenumber#</td>
                                                      number of each entry.
  </tr>
  </cfoutput>
                                                      Displays only the first entry in the list of organizational unit values. (For more
  </table>
  </cfif>                                             information, see the description that follows this table.)


This search shows the use of a logical AND statement in a filter. It returns one attribute, the surname, that is used only
for sorting the results.

In this query, the ou attribute value consists of two values in a comma-delimited list. One is the department name. The
other is People. This is because the Airius database uses the ou attribute type twice:

· In the distinguished names, at the second level of the directory tree, where it differentiates between organizational
   units such as people, groups, and directory servers

· As the department identifier in each person's entry

Because the attribute values are returned in order from the person entry to the directory tree root, the ListFirst
function extracts the person's department name.


Updating an LDAP directory
The cfldap tag lets you perform the following actions on LDAP directory entries:

· Add

· Delete


                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       460
Accessing and Using Data




· Add attributes

· Delete attributes

· Replace attributes

· Change the DN (rename the entry)

These actions let you manage LDAP directory contents remotely.

You build a ColdFusion page that lets you manage an LDAP directory. The form displays directory entries in a table
and includes a button that lets you populate the form fields based on the unique user ID.

The example ColdFusion page does not add or delete entry attributes or change the DN. For information on these
operations, see "Adding and deleting attributes of a directory entry" on page 467 and "Changing a directory entry's
DN" on page 468.

To keep the code short, this example has limitations that are not appropriate in a production application. In particular,
it has the following limitations:

· If you enter an invalid user ID and click either the Update or the Delete button, ColdFusion generates a "No such
   object" error, because there is no directory entry to update or delete. Your application should verify that the ID
   exists in the directory before it tries to change or delete its entry.

· If you enter a valid user ID in an empty form and click Update, the application deletes all the attributes for the User.
   The application should ensure that all required attribute fields contain valid entries before updating the directory.


Adding a directory entry
When you add an entry to an LDAP directory, you specify the DN, all the required attributes, including the entry's
object class, and any optional attributes. The following example builds a form that adds an entry to an LDAP directory.

1 Create a file that looks like the following:

    <!--- Set the LDAP server ID, user name, and password as variables
         here so they can be changed in only one place. --->
   <cfset myServer="ldap.myco.com">
   <cfset myUserName="cn=Directory Manager">
   <cfset myPassword="password">


   <!--- Initialize the values used in form fields to empty strings. --->
   <cfparam name="fullNameValue" default="">
   <cfparam name="surnameValue" default="">
   <cfparam name="emailValue" default="">
   <cfparam name="phoneValue" default="">
   <cfparam name="uidValue" default="">


   <!---When the form is submitted, add the LDAP entry. --->
   <cfif isdefined("Form.action") AND Trim(Form.uid) IS NOT "">
         <cfif Form.action is "add">
               <cfif Trim(Form.fullName) is "" OR Trim(Form.surname) is ""
                   OR Trim(Form.email) is "" OR Trim(Form.phone) is "">
                        <h2>You must enter a value in every field.</h2>
                        <cfset fullNameValue=Form.fullName>
                        <cfset surnameValue=Form.surname>
                        <cfset emailValue=Form.email>
                        <cfset phoneValue=Form.phone>
                        <cfset uidValue=Form.uid>
               <cfelse>
                   <cfset attributelist="objectclass=top, person,




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                 461
Accessing and Using Data




                           organizationalperson, inetOrgPerson;
                        cn=#Trim(Form.fullName)#; sn=#Trim(Form.surname)#;
                        mail=#Trim(Form.email)#;
                        telephonenumber=#Trim(Form.phone)#;
                        ou=Human Resources;
                        uid=#Trim(Form.uid)#">
                   <cfldap action="add"
                        attributes="#attributeList#"
                        dn="uid=#Trim(Form.uid)#, ou=People, o=Airius.com"
                        server=#myServer#
                        username=#myUserName#
                        password=#myPassword#>
                   <cfoutput><h3>Entry for User ID #Form.uid# has been added</h3>
                   </cfoutput>
              </cfif>
        </cfif>
   </cfif>


   <html>
   <head>
        <title>Update LDAP Form</title>
   </head>
   <body>
   <h2>Manage LDAP Entries</h2>


   <cfform action="update_ldap.cfm" method="post">
        <table>
              <tr><td>Full Name:</td>
                   <td><cfinput type="Text"
                         name="fullName"
                         value=#fullNameValue#
                         size="20"
                         maxlength="30"
                         tabindex="1"></td>
              </tr>
              <tr><td>Surname:</td>
                   <td><cfinput type="Text"
                        name="surname"
                        Value= "#surnameValue#"
                        size="20"
                        maxlength="20"
                        tabindex="2"></td>
              </tr>
              <tr>
                   <td>E-mail Address:</td>
                   <td><cfinput type="Text"
                        name="email"
                        value="#emailValue#"
                        size="20"
                        maxlength="20"
                        tabindex="3"></td>
              </tr>
              <tr>
                   <td>Telephone Number:</td>
                   <td><cfinput type="Text"
                        name="phone"
                        value="#phoneValue#"



                                         

DEVELOPING COLDFUSION 9 APPLICATIONS                              462
Accessing and Using Data




                        size="20"
                        maxlength="20"
                        tabindex="4"></td>
              </tr>
              <tr>
                   <td>User ID:</td>
                   <td><cfinput type="Text"
                        name="uid"
                        value="#uidValue#"
                        size="20"
                        maxlength="20"
                        tabindex="5"></td>
              </tr>
              <tr>
                   <td colspan="2">
                        <input type="Submit"
                         name="action"
                         value="Add"
                         tabindex="8"></td>
              </tr>
        </table>
        <br>
        *All fields are required for Add<br>
   </cfform>


   <!---Output the user list. --->
   <h2>User List for the Human Resources Department</h2>
   <cfldap name="GetList"
        server=#myServer#
        action="query"
        attributes="cn,sn,mail,telephonenumber,uid"
        start="o=Airius.com"
        scope="subtree"
        filter="ou=Human Resources"
        sort="sn,cn"
        sortControl="asc, nocase">


   <table border="1">
        <tr>
              <th>Full Name</th>
              <th>Surname</th>
              <th>Mail</th>
              <th>Phone</th>
              <th>UID</th>
        </tr>
        <cfoutput query="GetList">
        <tr>
              <td>#GetList.cn#</td>
              <td>#GetList.sn#</td>
              <td>#GetList.mail#</td>
              <td>#GetList.telephonenumber#</td>
              <td>#GetList.uid#</td>
        </tr>
        </cfoutput>
   </table>
   </body>
   </html>



                                         

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                    463
Accessing and Using Data




2 At the top of the file, change the myServer, myUserName, and myPassword variable assignments to values that are
   valid for your LDAP server.

3 Save the page as update_ldap.cfm and run it in your browser.


Reviewing the code
The following table describes the code:


Code                                                 Description

<cfset myServer="ldap.myco.com">                     Initializes the LDAP connection information variables. Uses variables for all
<cfset myUserName="cn=Directory Manager">            connection information so that any changes have to be made in only one
<cfset myPassword="password">
                                                     place.

<cfparam name="fullNameValue" default="">            Sets the default values of empty strings for the form field value variables.
<cfparam name="surnameValue" default="">             The data entry form uses cfinput fields with value attributes so that the
<cfparam name="emailValue" default="">
                                                     form can be prefilled and so that, if the user submits an incomplete form,
<cfparam name="phoneValue" default="">
                                                     ColdFusion can retain any entered values in the form when it redisplays
<cfparam name="uidValue" default="">
                                                     the page.

<cfif isdefined("Form.action") AND                   Ensures that the user entered a User ID in the form.
Trim(Form.uid) IS NOT "">

<cfif Form.action is "add">                          If the user clicks Add, processes the code that follows.

<cfif Trim(Form.fullName) is "" OR                   If any field in the submitted form is blank, display a message and set the
Trim(Form.surname) is ""                             other form fields to display data that the user submitted.
OR Trim(Form.email) is "" OR Trim(Form.phone) is
"">
<h2>You must enter a value in every field.</h2>
<cfset fullNameValue=Form.fullName>
<cfset surnameValue=Form.surname>
<cfset emailValue=Form.email>
<cfset phoneValue=Form.phone>
<cfset uidValue=Form.uid>

<cfelse>                                             If the user entered data in all fields, sets the attributelist variable to specify
<cfset attributelist="objectclass=top, person,       the entry's attributes, including the object class and the organizational
organizationalperson, inetOrgPerson;
                                                     unit (in this case, Human Resources).
cn=#Trim(Form.fullName)#;
sn=#Trim(Form.surname)#;                             The Trim function removes leading or trailing spaces from the user data.
mail=#Trim(Form.email)#;
telephonenumber=#Trim(Form.phone)#; ou=Human
Resources; uid=#Trim(Form.uid)#">

<cfldap action="add"                                 Adds the new entry to the directory.
attributes="#attributeList#"
dn="uid=#Trim(Form.uid)#, ou=People,
o=Airius.com" server=#myServer#
username=#myUserName# password=#myPassword#>
<cfoutput>
<h3>Entry for User ID #Form.uid# has been
added</h3>
</cfoutput>
</cfif>
</cfif>
</cfif>




                                            

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                               464
Accessing and Using Data




 Code                                                  Description

 <cffo      rm action="update_ldap.cfm"                Outputs the data entry form, formatted as a table. Each cfinput field
 method="post">                                        always has a value, set by the value attribute when the page is called. The
  <table>
                                                       value attribute lets ColdFusion update the form contents when the form
  <tr>
                                                       is redisplayed after the user clicks Add. The code that handles cases in
 <td>Full Name:</td>
  <td><cfinput type="Text"                             which the user fails to enter all the required data uses this feature.
   name="fullName"
   value=#fullNameValue#
   size="20"
   maxlength="30"
   tabindex="1"></td>
  </tr>

 .

 .

 <tr>
 <td colspan="2">
 <input type="Submit"
  name="action"
  value="Add"
  tabindex="8"></td>
  </tr>
 </table>
 <br>
 *All fields are required for Add<br>
 </cfform>

 <cfldap name="GetList"                                Queries the directory and gets the common name, surname, e-mail
  server=#myServer#                                    address, telephone number, and user ID from the matching entries.
  action="query"
  attributes="cn,sn,mail,telephonenumber,uid"          Searches the subtree from the entry with the DN of o=Airius.com, and
  start="o=Airius.com"                                 selects all entries in which the organizational unit is Human Resources.
  scope="subtree"
  filter="ou=Human Resources"                          Sorts the results by surname and then common name (to sort by last name,
  sort="sn,cn"
                                                       then first). Sorts in default ascending order that is not case sensitive.
  sortControl="asc, nocase">

 <table border="1">                                    Displays the query results in a table.
  <tr>
  <th>Full Name</th>
  <th>Surname</th>
  <th>Mail</th>
  <th>Phone</th>
  <th>UID</th>
  </tr>
  <cfoutput query="GetList">
  <tr>
  <td>#GetList.cn#</td>
  <td>#GetList.sn#</td>
  <td>#GetList.mail#</td>
  <td>#GetList.telephonenumber#</td>
  <td>#GetList.uid#</td>
  </tr>
  </cfoutput>
  </table>
  </body>
  </html>



Deleting a directory entry
To delete a directory entry,specify the entry DN.

The following example builds on the code that adds an entry. It adds Retrieve and Delete buttons. The Retrieve button
lets you view a user's information in the form before you delete it.

1 Open update_ldap.cfm, which you created in "Adding a directory entry" on page 460.

2 Between the first and second cfif tags, add the following code:




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                             465
Accessing and Using Data




   <cfelseif Form.action is "Retrieve">
        <cfldap name="GetEntry"
              server=#myServer#
              action="query"
              attributes="cn,sn,mail,telephonenumber,uid"
              scope="subtree"
              filter="uid=#Trim(Form.UID)#"
              start="o=Airius.com">
        <cfset fullNameValue = GetEntry.cn[1]>
        <cfset surnameValue = GetEntry.sn[1]>
        <cfset emailValue = GetEntry.mail[1]>
        <cfset phoneValue = GetEntry.telephonenumber[1]>
        <cfset uidValue = GetEntry.uid[1]>
   <cfelseif Form.action is "Delete">
        <cfldap action="delete"
              dn="uid=#Trim(Form.UID)#, ou=People, o=Airius.com"
              server=#myServer#
              username=#myUserName#
              password=#myPassword#>
        <cfoutput><h3>Entry for User ID #Form.UID# has been deleted
        </h3></cfoutput>

3 At the end of the code for the Add button (the input tag with Value=Add at the bottom of the form), delete the
   </td> end tag.

4 After the end of the Add button input tag, add the following code:

        &nbsp
        <input type="Submit"
               name="action"
               value="Retrieve"
               tabindex="7">
        &nbsp
        <input type="Submit"
               name="action"
               value="Delete"
               tabindex="8"></td>

5 Save the file and run it in your browser.


Reviewing the code
The following table describes the code:




                                           

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                     466
Accessing and Using Data




 Code                                                Description

 <cfelseif Form.action is "Retrieve">                If the user clicks Retrieve, queries the directory and gets the information for the
  <cfldap name="GetEntry"                            specified User ID.
  server=#myServer#
  action="query"                                     Sets the form field's Value attribute to the corresponding query column.
  attributes="cn,sn,mail,telephonenumber,uid"
  scope="subtree"                                    This example uses the array index [1] to identify the first row of the GetEntry
  filter="uid=#Trim(Form.UID)#"                      query object. Because the query always returns only one row, the index can be
  start="o=Airius.com">
                                                     omitted.
  <cfset fullNameValue = GetEntry.cn[1]>
  <cfset surnameValue = GetEntry.sn[1]>
  <cfset emailValue = GetEntry.mail[1]>
  <cfset phoneValue =
 GetEntry.telephonenumber[1]>
  <cfset uidValue = GetEntry.uid[1]>

 <cfelseif Form.action is "Delete">                  The user clicks delete, deletes the entry with the specified User ID, and informs
  <cfldap action="delete"                            the user that the entry was deleted.
  dn="uid=#Trim(Form.UID)#, ou=People,
 o=Airius.com"
  server=#myServer#
  username=#myUserName#
  password=#myPassword#>
  <cfoutput><h3>Entry for User ID #Form.UID#
 has been deleted
  </h3>

 &nbsp                                               Displays submit buttons for the Retrieve and Delete actions.
 <input type="Submit"
  name="action"
  value="Retrieve"
  tabindex="7">
 &nbsp
 <input type="Submit"
  name="action"
  value="Delete"
  tabindex="8"></td>



Updating a directory entry
The cfldap tag lets you change the values of entry attributes. To do so, you specify the entry DN in the dn attribute, and
list the attributes to change and their new values in the attributes attribute.

The following example builds on the code that adds and deletes an entry. It can update one or more of an entry's
attributes. Because the UID is part of the DN, you cannot change it.

1 Open update_ldap.cfm, which you created in "Adding a directory entry" on page 460.

2 Between the cfelseif block and the </cfif tag, add the following code:

     <cfelseif Form.action is "Update">
    <cfset attributelist="cn=#Trim(form.FullName)#; sn=#Trim(Form.surname)#;
    mail=#Trim(Form.email)#;
         telephonenumber=#Trim(Form.phone)#">
    <cfldap action="modify"
         modifytype="replace"
         attributes="#attributeList#"
         dn="uid=#Trim(Form.UID)#, ou=People, o=Airius.com"
         server=#myServer#
         username=#myUserName#
         password=#myPassword#>
    <cfoutput><h3>Entry for User ID #Form.UID# has been updated</h3>
    </cfoutput>

3 At the end of the code for the Delete button (the input tag with Value=Delete at the bottom of the form), delete
    the </td> mark.



                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                     467
Accessing and Using Data




4 After the end of the Delete button input tag, add the following code:

    &nbsp
   <input type="Submit"
         name="action"
         value="Update"
         tabindex="9"></td>

5 Save the file and run it in your browser.


Reviewing the code
The following table describes the code:


Code                                                        Description

<cfelseif Form.action is "Update">                          If the user clicks Update, sets the attribute list to the form field values
  <cfset attributelist="cn=#Trim(form.FullName)#;           and replaces the attributes for the entry with the specified UID.
sn=#Trim(Form.surname)#; mail=#Trim(Form.email)#;
  telephonenumber=#Trim(Form.phone)#">                      Displays a message to indicate that the entry was updated.
  <cfldap action="modify"
  modifytype="replace"                                      This code replaces all of the attributes in a form, without checking
  attributes="#attributeList#"                              whether they are blank. A more complete example would check for
  dn="uid=#Trim(Form.UID)#, ou=People,
                                                            blank fields and either require entered data or not include the
o=Airius.com"
                                                            corresponding attribute in the attributes string.
  server=#myServer#
  username=#myUserName#
  password=#myPassword#>
  <cfoutput><h3>Entry for User ID #Form.UID# has
been updated</h3>
  </cfoutput>

&nbsp                                                       Defines the Submit button for the update action.
  <input type="Submit"
  name="action"
  value="Update"
  tabindex="9"></td>



Adding and deleting attributes of a directory entry
The following table lists the cfldap tag attributes that you must specify to add and delete LDAP attributes in an entry:


Action                              cfldap syntax

Add attribute to entry              dn = "entry dn"
                                    action = "modify"
                                    modifyType = "add"
                                    attributes = "attribname=attribValue[;...]"

Delete attribute from entry         dn = "entry dn"
                                    action = "modify"
                                    modifyType = "delete"
                                    attributes = "attribName[;...]"


You can add or delete multiple attributes in one statement. To do this, use semicolons to separate the attributes in the
attribute string.

The following example specifies the description and seealso LDAP attributes:

attributes="description=Senior Technical Writer;seealso=writers"

You can change the character that you use to separate values of multivalued attributes in an attribute string. You can
also change the character that separates attributes when a string contains multiple attributes. For more information,
see "Specifying an attribute that includes a comma or semicolon" on page 468.

You can add or delete attributes only if the directory schema defines them as optional for the entry's object class.




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     468
Accessing and Using Data




Changing a directory entry's DN
To change the DN of an entry, provide the following information in the cfldap tag:

 dn="original DN"
action="modifyDN"
attributes="dn=new DN"

For example:

 <cfldap action="modifyDN"
     dn="#old_UID#, ou=People, o=Airius.com"
     attributes="uid=#newUID#"
     server=#myServer#
     username=#myUserName#
     password=#myPassword#>

The new DN and the entry attributes must conform to the directory schema; therefore, you cannot move entries
arbitrarily in a directory tree. You can only modify a leaf only. For example, you cannot modify the group name if the
group has children.

Note: LDAP v2 does not let you change entry DNs.


Advanced topics
Some more advanced techniques enable you to use LDAP directories more effectively.


Specifying an attribute that includes a comma or semicolon
LDAP attribute values can contain commas. The cfldap tag normally uses commas to separate attribute values in a
value list. Similarly, an attribute can contain a semicolon, which cfldap normally uses to delimit (separate) attributes
in an attribute list. To override the default separator and delimiter characters, you use the cfldap tag separator and
delimiter attributes.

For example, assume that you want to add the following attributes to an LDAP entry:

 cn=Proctor, Goodman, and Jones
description=Friends of the company; Rationalists

Use the cfldap tag in the following way:

 <cfldap action="modify"
     modifyType="add"
     attributes="cn=Proctor, Goodman, and Jones: description=Friends of the company;
            Rationalists"
     dn="uid=goodco, ou=People, o=Airius.com"
     separator="&"
     delimiter=":"
     server=#myServer#
     username=#myUserName#
     password=#myPassword#>


Using cfldap output
You can create a searchable Verity collection from LDAP data. For an example of building a Verity collection using an
LDAP directory, see "Indexing query results obtained from an LDAP directory" on page 503.

The ability to generate queries from other queries is useful when cfldap queries return complex data. For more
information on querying queries, see "Using Query of Queries" on page 428.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                            469
Accessing and Using Data




Viewing a directory schema
LDAP v3 exposes a directory's schema information in a special entry in the root DN. You use the directory root
subschemaSubentry attribute to access this information.

The following ColdFusion query shows how to get and display the directory schema. It displays information from the
schema's object class and attribute type definitions. For object classes, it displays the class name, superior class,
required attribute types, and optional attribute types. For attribute types, it displays the type name, type description,
and whether the type is single- or multivalued.

The example does not display all the information in the schema. For example, it does not display the matching rules.
It also does not display the object class IDs, attribute type IDs, attribute type syntax IDs, or the object class descriptions.
(The object class description values are all "Standard Object Class.")

Note: To be able to view the schema for an LDAP server, the server must support LDAP v3

This example does not work on iPlanet Directory Server 5.0. It does work on a 4.x server.


View the schema for an LDAP directory
1 Create a file that looks like the following:

     <html>
    <head>
         <title>LDAP Schema</title>
    </head>


    <body>
    <!--- Start at Root DSE to get the subschemaSubentry attribute. --->
    <cfldap
         name="EntryList"
         server="ldap.mycorp.com"
         action="query"
         attributes="subschemaSubentry"
         scope="base"
         start="">


    <!--- Use the DN from the subschemaSubEntry attribute to get the schema. --->
    <cfldap
         name="EntryList2"
         server="ldap.mycorp.com"
         action="query"
         attributes="objectclasses, attributetypes"
         scope="base"
         filter="objectclass=*"
         start=#entryList.subschemaSubentry#>


    <!--- Only one record is returned, so query loop is not required. --->
    <h2>Object Classes</h2>
    <table border="1">
         <tr>
              <th>Name</th>
              <th>Superior class</th>
              <th>Must have</th>
              <th>May have</th>
         </tr>
         <cfloop index = "thisElement" list = #Entrylist2.objectclasses#>
              <cfscript>




                                                  

DEVELOPING COLDFUSION 9 APPLICATIONS                                                           470
Accessing and Using Data




                   thiselement = Trim(thisElement);
                   nameloc = Find("NAME", thisElement);
                   descloc = Find("DESC", thisElement);
                   suploc = Find("SUP", thisElement);
                   mustloc = Find("MUST", thisElement);
                   mayloc = Find("MAY", thisElement);
                   endloc = Len(thisElement);
              </cfscript>
              <tr>
                   <td><cfoutput>#Mid(thisElement, nameloc+6, descloc-nameloc-8)#
                        </cfoutput></td>
                   <cfif #suploc# NEQ 0>
                        <td><cfoutput>#Mid(thisElement, suploc+5, mustloc-suploc-7)#
                        </cfoutput></td>
                   <cfelse>
                        <td>NONE</td>
                   </cfif>
                   <cfif #mayloc# NEQ 0>
                        <td><cfoutput>#Replace(Mid(thisElement, mustloc+6,
                           mayloc-mustloc-9), " $ ", ", ", "all")#</cfoutput></td>
                        <td><cfoutput>#Replace(Mid(thisElement, mayloc+5, endloc-mayloc-8),
                           " $ ", ", ", "all")#</cfoutput></td>
                   <cfelse>
                        <td><cfoutput>#Replace(Mid(thisElement, mustloc+6,
                           endloc-mustloc-9), " $ ", ", ", "all")#</cfoutput></td>
                        <td>NONE</td>
                   </cfif>
              </tr>
        </cfloop>
   </table>
   <br><br>


        <h2>Attribute Types</h2>
   <table border="1" >
        <tr>
              <th>Name</th>
              <th>Description</th>
              <th>multivalued?</th>
        </tr>
        <cfloop index = "thisElement"
              list = #ReplaceNoCase(EntryList2.attributeTypes, ", alias", "<br> Alias",
              "all")# delimiters = ",">
              <cfscript>
                   thiselement = Trim(thisElement);
                   nameloc = Find("NAME", thisElement);




                                         

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                         471
Accessing and Using Data




                   descloc = Find("DESC", thisElement);
                   syntaxloc = Find("SYNTAX", thisElement);
                   singleloc = Find("SINGLE", thisElement);
                   endloc = Len(thisElement);
              </cfscript>
              <tr>
                   <td><cfoutput>#Mid(thisElement, nameloc+6, descloc-nameloc-8)#
                        </cfoutput></td>
                   <td><cfoutput>#Mid(thisElement, descloc+6, syntaxloc-descloc-8)#
                        </cfoutput></td>
                   <cfif #singleloc# EQ 0>
                         <td><cfoutput>Yes</cfoutput></td>
                   <cfelse>
                         <td><cfoutput>No</cfoutput></td>
                   </cfif>
              </tr>
        </cfloop>
   </table>
   </body>
   </html>

2 Change the server from ldap.mycorp.com to your LDAP server. You might also need to specify a user ID and
   password in the cfldap tag.

3 Save the template as ldapschema.cfm in myapps under your web root directory and view it in your browser.


Reviewing the code
The following table describes the code and its function:




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                  472
Accessing and Using Data




Code                                               Description

<cfldap                                            Gets the value of the subschemaSubentry attribute from the root of
 name="EntryList"                                  the directory server. The value is the DN of the schema.
 server="ldap.mycorp.com"
 action="query"
 attributes="subschemaSubentry"
 scope="base"
 start="">

<cfldap                                            Uses the schema DN to get the objectclasses and attributetypes
 name="EntryList2"                                 attributes from the schema.
 server="ldap.mycorp.com"
 action="query"
 attributes="objectclasses, attributetypes"
 scope="base"
 filter="objectclass=*"
 start=#entryList.subschemaSubentry#>




                                        

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                           473
Accessing and Using Data




Code                                                Description

<h2>Object Classes</h2>                             Displays the object class name, superior class, required attributes,
 <table border="1">                                 and optional attributes for each object class in a table.
 <tr>
 <th>Name</th>                                      The schema contains the definitions of all object classes in a comma
 <th>Superior class</th>                            delimited list, so the code uses a list type cfloop tag.
 <th>Must have</th>
 <th>May have</th>                                  The thisElement variable contains the object class definition. Trim off
 </tr>
                                                    any leading or trailing spaces, then use the class definition field
 <cfloop index = "thisElement" list =
                                                    keywords in Find functions to get the starting locations of the
#Entrylist2.objectclasses#>
 <cfscript>                                         required fields, including the Object class ID. (The ID is not displayed.)
 thiselement = Trim(thisElement);
 nameloc = Find("NAME", thisElement);               Gets the length of the thisElement string for use in later
 descloc = Find("DESC", thisElement);               calculations.
 suploc = Find("SUP", thisElement);
 mustloc = Find("MUST", thisElement);
 mayloc = Find("MAY", thisElement);
 endloc = Len(thisElement);
 </cfscript>

<tr>                                                Displays the field values. Uses the Mid function to extract individual
<td><cfoutput>#Mid(thisElement, nameloc+6, descloc- field values from the thisElement string.
nameloc-8)#
</cfoutput></td>                                    The top object class does not have a superior class entry. Handles this
<cfif #suploc# NEQ 0>                               special case by testing the suploc location variable. If the value is not
 <td><cfoutput>#Mid(thisElement, suploc+5, mustloc-
                                                    0, handles normally, otherwise, output "NONE".
suploc-7)#
 </cfoutput></td>
                                                    There might not be any optional attributes. Handles this case
 <cfelse>
                                                    similarly to the superior class. The calculation of the location of
 <td>NONE</td>
 </cfif>                                            required attributes uses the location of the optional attributes if the
 <cfif #mayloc# NEQ 0>                              field exists; otherwise, uses the end of the object class definition
 <td><cfoutput>#Replace(Mid(thisElement, mustloc+6, string.
 mayloc-mustloc-9), " $ ", ", ",
"all")#</cfoutput></td>
 <td><cfoutput>#Replace(Mid(thisElement, mayloc+5,
endloc-mayloc-8),
 " $ ", ", ", "all")#</cfoutput></td>
 <cfelse>
 <td><cfoutput>#Replace(Mid(thisElement, mustloc+6,
 endloc-mustloc-9), " $ ", ", ",
"all")#</cfoutput></td>
 <td>NONE</td>
 </cfif>
 </tr>
 </cfloop>
 </table>




                                        

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                       474
Accessing and Using Data




 Code                                                          Description

 <h2>Attribute Types</h2>                                      Does the same types of calculations for the attribute types as for the
  <table border="1" >                                          object classes.
  <tr>
  <th>Name</th>
  <th>Description</th>
  <th>multivalued?</th>
  </tr>
  <cfloop index = "thisElement"
 list = #ReplaceNoCase(EntryList2.attributeTypes, ",
 alias", "<br> Alias",                                         The attribute type field can contain the text ", alias for....". This text
  "all")# delimiters = ",">                                    includes a comma, which also delimits attribute entries. Use the
  <cfscript>                                                   REReplaceNoCase function to replace any comma that precedes the
  thiselement = Trim(thisElement);
                                                               word "alias" with an HTML <br> tag.
  nameloc = Find("NAME", thisElement);
  descloc = Find("DESC", thisElement);
  syntaxloc = Find("SYNTAX", thisElement);
  singleloc = Find("SINGLE", thisElement);
  endloc = Len(thisElement);
  </cfscript>
  <tr>
 <td><cfoutput>#Mid(thisElement, nameloc+6, descloc-           The attribute definition includes a numeric syntax identifier, which
 nameloc-8)#
                                                               the code does not display, but uses its location in calculating the
  </cfoutput></td>
                                                               locations of the other fields.
  <td><cfoutput>#Mid(thisElement, descloc+6,
 syntaxloc-descloc-8)#
  </cfoutput></td>
  <cfif #singleloc# EQ 0>
   <td><cfoutput>Yes</cfoutput></td>
  <cfelse>
   <td><cfoutput>No</cfoutput></td>
  </cfif>
  </tr>
  </cfloop>



Referrals
An LDAP database can be distributed over multiple servers. If the requested information is not on the current server,
the LDAP v3 standard provides a mechanism for the server to return a referral to the client that informs the client of
an alternate server. (This feature is also included in some LDAP v2-compliant servers.)

ColdFusion can handle referrals automatically. If you specify a nonzero referral attribute in the cfldap tag,
ColdFusion sends the request to the server specified in the referral.

The referral attribute value specifies the number of referrals allowed for the request. For example, if the referral
attribute is 1, and server A sends a referral to server B, which then sends a referral to server C, ColdFusion returns an
error. If the referral attribute is 2, and server C has the information, the LDAP request succeeds. The value to use
depends on the topology of the distributed LDAP directory, the importance of response speed, and the value of
response completeness.

When ColdFusion follows a referral, the rebind attribute specifies whether ColdFusion uses the cfldap tag login
information in the request to the new server. The default, No, sends an anonymous login to the server.


Managing LDAP security
When you consider how to implement LDAP security, consider server security and application security.


Server security
The cfldap tag supports secure socket layer (SSL) v2 security. This security provides certificate-based validation of the
LDAP server. It also encrypts data transferred between the ColdFusion server and the LDAP server, including the user
password, and ensures the integrity of data passed between the servers. To specify SSL v2 security, set the cfladap tag
secure="cfssl_basic" attribute.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      475
Accessing and Using Data




About LDAP Server Security
ColdFusion uses Java Native Directory Interface (JNDI), the LDAP provider, and an SSL package to create the client
side of an SSL communication. The LDAP server provides the server side. The LDAP server that the cfldap tag
connects to using SSL holds an SSL server certificate, a certificate that is securely "signed" by a trusted authority and
identifies (authenticates) the sender. During the initial SSL connection, the LDAP server presents its server certificate
to the client. If the client trusts this certificate, the SSL connection is established and secure LDAP communication can
begin.

ColdFusion determines whether to trust the server by comparing the server's certificate with the information in the
jre/lib/security/cacerts keystore of the JRE used by ColdFusion. The ColdFusion default cacerts file contains
information about many certificate granting authorities. If you must update the file with additional information, you
can use the keytool utility in the ColdFusion jre/bin directory to import certificates that are in X.509 format. For
example, enter the following:

 keytool -import -keystore cacerts -alias ldap -file ldap.crt -keypass bl19mq

The keytool utility initial keypass password is "change it". For more information on using the keytool utility, see the
Sun JDK documentation.

Once ColdFusion establishes secure communication with the server, it must provide the server with login credentials.
You specify the login credentials in the cfldap tag username and password attributes. When the server determines
that the login credentials are valid, ColdFusion can access the directory.


Using LDAP security
To use security, first ensure that the LDAP server supports SSL v2 security.

Specify the cfldap tag secure attribute as follows:

 secure = "cfssl_basic"

For example:

 <cfldap action="modify"
      modifyType="add"
      atributes="cn=Lizzie"
      dn="uid=lborden, ou=People, o=Airius.com"
      server=#myServer#
      username=#myUserName#
      password=#myPassword#
      secure="cfssl_basic"
      port=636>

The port attribute specifies the server port used for secure LDAP communications, which is 636 by default. If you do
not specify a port, ColdFusion attempts to connect to the default, nonsecure, LDAP port 389.


Application security
To ensure application security, prevent outsiders from gaining access to the passwords that you use in cfldap tags. The
best way to do this is to use variables for your username and password attributes. You can set these variables on one
encrypted application page. For more information on securing applications, see "Securing Applications" on page 339.




                                                     

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      476
Accessing and Using Data




Building a Search Interface

You can provide a full text search capability for documents and data sources on an Adobe ColdFusion site by enabling
the Verity search engine. Verity full text search lets people visiting your site use simple one- and two-word searches to
quickly find the information they need. You can use the more robust Verity Query Language and the Verity advanced
search operators to transparently implement business-specific meaning behind searches. Verity search allows even one
word searches to return accurate results.

You can build a Verity search interface with which users can perform powerful searches on your site. You also can
index your documents and data sources so that users can search them.


About Verity
To efficiently search through paragraphs of text or files of varying types, you need full-text search capabilities.
ColdFusion includes the Verity search engine, which provides full-text indexing and searching.

The Verity engine performs searches against collections, not against the actual documents. A collection is a special
database created by Verity that contains metadata that describes the documents that you have indexed. The indexing
process examines documents of various types in a collection and creates a metadata description--the index--which is
specialized for rapid search and retrieval operations.

The ColdFusion implementation of Verity supports collections of the following basic data types:

· Text files such as HTML pages and CFML pages

· Binary documents (see "Supported file types" on page 477)

· Recordsets returned from a query and CF query object, including: cfquery, cfldap, and cfpop queries

You can build collections from individual documents or from an entire directory tree. Collections can be stored
anywhere, so you have a great deal of flexibility in accessing indexed data.

In your ColdFusion application, you can search multiple collections, each of which can focus on a specific group of
documents or queries, according to subject, document type, location, or any other logical grouping. Because you can
perform searches against multiple collections, you have substantial flexibility in designing your search interface.


Using Verity with ColdFusion
Here are some ways to use Verity with ColdFusion:

· Index your website and provide a generalized search mechanism, such as a form interface, for executing searches.

· Index specific directories that contain documents for subject-based searching.

· Index specific categories of documents. By organizing your documents into categories, you can let users search
   specific types of documents. For example, if your website contains FAQs, documentation, and tutorials, you can
   create a search that lets users search within each of these categories.

· Index cfquery recordsets, giving users the ability to search against the data. Because collections contain data
   optimized for retrieval, this method is much faster than performing multiple database queries to return the same data.

· Index cfldap and cfpop query results.

· Manage and search collections generated outside ColdFusion using native Verity tools. Collections must be
   registered with the Verity K2 administration service. To do this either use the Verity tools, or map the collection
   using the cfcollection tag.

· Index e-mail generated by ColdFusion application pages and create a searching mechanism for the indexed
   messages.



                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      477
Accessing and Using Data




· Build collections of inventory data and make those collections available for searching from your ColdFusion
   application pages.

· Support international users in a range of languages using the cfindex, cfcollection, and cfsearch tags.


Advantages of using Verity
Verity can index the output from queries so that you or a user can search against the recordsets. Searching query results
has a clear advantage over using SQL to search a database directly in speed of execution because metadata from the
recordsets are stored in a Verity index that is optimized for searching.

Performing a Verity search has the following advantages over other search methods:

· You can reduce the programming overhead of query constructs by allowing users to construct their own queries
   and execute them directly. You need to be concerned only with presenting the output to the client web browser.

· Verity can index database text fields, such as notes and product descriptions, that native database tools cannot
   effectively index.

· When indexing collections that contain documents in formats such as Adobe Acrobat (PDF) and Microsoft Word,
   Verity scans for the document title (if one was entered), in addition to the document text, and displays the title in
   the search results list.

· When Verity indexes web pages, it can return the URL for each document. This is a valuable document
   management feature.

For more information, see "Indexing data returned by a query" on page 497.


Supported file types
The ColdFusion Verity implementation supports a wide array of file and document types. As a result, you can index
web pages, ColdFusion applications, and many binary document types and produce search results that include
summaries of these documents.

Verity supports the following formats:


Document format          Format                                                Version(s)

Text and markup          ANSI (TXT)                                            All versions

                         ASCII (TXT)                                           All versions

                         HTML (HTM)                                            3

                         IBM DCA/RFT (Revisable Form Text) (DC)                SC23-0758-1

                         Rich Text Format/WordPad (RTF)                        1 through 1.6

                         Unicode Text (TXT)                                    3, 4




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                          478
Accessing and Using Data




Document format         Format                                            Version(s)

Word processing         Adobe Maker Interchange Format (MIF)              5, 5.5, 6, 7

                        Applix Words (AW)                                 3.11, 4.2, 4.3, 4.4, 4, 41, 4.2

                        DisplayWrite (IP)                                 4

                        Folio Flat File (FFF)                             3.1

                        Fujitsu Oasys (OA2)                               7

                        JustSystems Ichitaro (JTD)                        8, 9, 10, 12

                        Lotus AMI Pro (SAM)                               2, 3

                        Lotus Word Pro (LWP) (Windows only)               96, 97, Millennium Edition R9

                        Microsoft Word for PC (DOC)                       4, 5, 5.5, 6

                        Microsoft Word for Windows (DOC)                  1 through 2002

                        Microsoft Word for Macintosh (DOC)                4, 5, 6, 98

                        Microsoft Works (WPS)                             1 through 2000

                        Microsoft Windows Write (WRI)                     1, 2, 3

                        WordPerfect for Windows V5 (WO)                   5, 5.1

                        WordPerfect for Windows V6 and higher (WPD)       6, 7, 8, 10, 2000

                        WordPerfect for Macintosh                         1.02, 2, 2.1, 2.2, 3, 3.1

                        WordPerfect for Linux                             6

                        XyWrite (XY4)                                     4.12

Spreadsheet formats     Applix Spreadsheets (AS)                          4.2, 4.3, 4.4

                        Comma Separated Values (CSV)                      No specific version

                        Corel Quattro Pro (QPW, WB3)                      5, 6, 7, 8

                        Lotus 1-2-3 for SmartSuite (123)                  96, 97, Millennium Edition R9

                        Lotus 1-2-3 (WK4)                                 2, 3, 4, 5

                        Lotus 1-2-3 Charts (123)                          2, 3, 4, 5

                        Microsoft Excel for Windows (XLS)                 2.2, 3, 4, 5, 96, 97, 2000, 2002

                        Microsoft Excel for Macintosh (XLS)               98

                        Microsoft Excel Charts (XLS)                      2, 3, 4, 5, 6, 7

                        Microsoft Works Spreadsheet (S30,S40)             1, 2, 3, 4




                                                  

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                           479
Accessing and Using Data




 Document format         Format                                                      Version(s)

 Presentation formats    Applix Presents (AG)                                        4.0, 4.2, 4.3, 4.4

                         Corel Presentations (SHW)                                   7, 9, 10, 11, 2000

                         Lotus Freelance Graphics for Windows (PRE)                  2, 96, 97, 98, Millennium Edition R9

                         Lotus Freelance Graphics 2 (PRE)                            2

                         Microsoft PowerPoint for Windows (PPT)                      95, 97, 2000, 2002

                         Microsoft PowerPoint for PC (PPT)                           4

                         Microsoft PowerPoint for Macintosh (PPT)                    98

                         Microsoft Project (MPP)                                     98, 2000, 2002

 Display formats         Adobe Portable Document Format (PDF)                        1.1 (Acrobat 2.0) to 1.4 (Acrobat 5.0)

 Graphics formats        AutoCAD Drawing format (DWG) (standalone) (does not extract R13, R14, and R2000
 supported for indexing  metadata)

                         AutoCAD Drawing format (DXF) (standalone) (does not extract R13, R14, and R2000
                         metadata)

                         Computer Graphics Metafile (CGM) (embedded)                 No specific version

                         Enhanced Metafile (EMF) (embedded and standalone)           No specific version

                         Lotus Pic (PIC) (standalone)                                No specific version

                         Microsoft Visio (standalone)                                6

                         Tagged Image File (TIFF) (standalone)                       5

                         Windows Metafile (WMF) (embedded and standalone)            3

 Multimedia formats      MPEG-1 audio layer 3 (MP3)                                  ID3 versions 1 and 2

 Container formats       DynaZIP                                                     No specific version

                         PKZIP (zip)                                                 PKWARE versions through 2.04g

                         WinZIP                                                      No specific version

 E-mail formats          Microsoft Outlook (msg)                                     97, 2000, 2002

                         Microsoft Outlook Express (eml)                             No specific version



Specifying a language
If you install the optional ColdFusion International Search pack, you can specify a language other than English when
creating a collection.

ColdFusion supports Verity Locales in European, Asian, and Middle Eastern languages. For more information about
installing Verity Locales, see Installing ColdFusion.

For English language support, Verity provides two options: English (Basic) and English (Advanced). The default
language for Verity collections is English (Basic). Indexing a collection using English (Basic) is faster than using
English (Advanced), however, English (Advanced) provides better search results.




                                                   

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       480
Accessing and Using Data




Specify a language when you create the collection. The language you specify should match the language the documents
were authored in. By specifying the language your documents are written in, Verity is able to correctly interpret accented
characters, and, in many languages, use variations of word stems and roots. However, Verity does not support the
following in Eastern European and Middle Eastern languages, including these languages in the Universal language pack:

· Stemming

· Normalization

· Decomposition of compound words into subwords

· Part of speech

· Special number handling

If you have documents in several languages, create separate collections for each of them.

To specify a language when you are indexing data, select the language from the pop-up menu when you create a
collection with the ColdFusion Administrator. In CFML, the cfcollection, cfindex, and cfsearch tags have an
optional language attribute that you use to specify the language of the collection.

Use the following table to find the correct value for the language attribute for your collection. For example, the
following code creates a collection for simplified Chinese:

<cfcollection action = "create" collection = "lei_01"
path = "c:\CFusion\verity\collections"
language = "simplified_chinese">

The following table lists the languages names and attributes that ColdFusion supports:


 Language                            Language attribute

 Arabic                              arabic

 Chinese (simplified)                simplified_chinese

 Chinese (traditional)               traditional_chinese

 Czech                               czech

 Danish                              danish

 Dutch                               dutch

 English (Basic)                     english

 English (Advanced)                  englishx

 Finnish                             finnish

 French                              french

 German                              german

 Greek                               greek

 Hebrew                              hebrew

 Hungarian                           hungarian

 Italian                             italian

 Japanese                            japanese

 Korean                              korean




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    481
Accessing and Using Data




 Language                             Language attribute

 Norwegian                            norwegian

 Norwegian (Bokmal)                   bokmal

 Norwegian (Nynorsk)                  nynorsk

 Polish                               polish

 Portuguese                           portuguese

 Russian                              russian

 Spanish                              spanish

 Swedish                              swedish

 Turkish                              turkish

 Multiple languages                   uni


You can register collections in the ColdFusion Administrator or by creating a collection with the cfcollection tag.
If you register a given collection with ColdFusion and you specify a language attribute, you do not have to specify the
language attribute when using cfindex and cfsearch tags for that collection. If you do not register a given collection
with ColdFusion, ColdFusion uses English (Basic), the default language, unless you specify the language in the
language attribute for the cfindex and cfsearch tags for that collection.

Note: When you search a collection in a language other than English, translate operators such as AND and OR into the
language of the collection.


Creating a search tool for ColdFusion applications
The three main tasks in creating a search tool for your ColdFusion application are:

1 Create a collection.

2 Index the collection.

3 Design a search interface.

You can perform each task programmatically--that is, by writing CFML code. Alternatively, you can use the
ColdFusion Administrator to create and index a collection.


Creating a collection with the ColdFusion Administrator
Use the following procedure to quickly create a collection with the ColdFusion Administrator:

1 In the ColdFusion Administrator, select Data & Services > Verity Collections.

2 Enter a name for the collection; for example, DemoDocs.

3 Enter a path for the directory location of the new collection, for example, C:\CFusion\verity\collections\.

   By default in the server configuration, ColdFusion stores collections in cf_root\verity\collections\ in Windows and
   in cf_root/verity/collections on UNIX. In the multiserver configuration, the default location for collections is
   cf_webapp_root/verity/collections. In the J2EE configuration, the default location for collections is
   verity_root/verity/collections, where verity_root is the directory in which you installed Verity.

   Note: This is the location for the collection, not for the files that you search.

4 (Optional) Select a language other than English for the collection from the Language drop-down list.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                              482
Accessing and Using Data




   For more information on selecting a language, see "Specifying a language" on page 479.

5 (Optional) Select Enable Category Support to create a Verity Parametric collection.

   For more information on using categories, see "Narrowing searches by using categories" on page 492.

6 Click Create Collection.

   The name and full path of the new collection appears in the list of Verity Collections.

You have successfully created an empty collection. A collection becomes populated with data when you index it.


About indexing a collection
In order for information to be searched, it must be indexed. Indexing extracts both meaning and structure from
unstructured information by indexing each document that you specify into a separate Verity collection that contains
a complete list of all the words used in a given document along with metadata about that document. Indexed
collections include information such as word proximity, metadata about physical file system addresses, and URLs of
documents.

When you index databases and other recordsets that you generated using a query, Verity creates a collection that
normalizes both the structured and unstructured data. Search requests then check these collections rather than
scanning the actual documents and database fields. This provides a faster search of information, regardless of the file
type and whether the source is structured or unstructured.

Just as with creating a collection, you can index a collection programmatically or by using the ColdFusion
Administrator. Use the following guidelines to determine which method to use:


 Use the Administrator                                    Use the cfindex tag

 To index document files                                  To index ColdFusion query results

 When the collection does not require frequent updates    When the collection requires frequent updates

 To create the collection without writing any CFML code   To dynamically update a collection from a ColdFusion application page

 To create a collection once                              When the collection requires updating by others


You can use cfcollectionaction="optimize" if you notice that searches on a collection take longer than they did
previously.


Updating an index
Documents are modified frequently in many user environments. After you index your documents, any changes that
you make are not reflected in subsequent Verity searches until you reindex the collection. Depending on your
environment, you can create a scheduled task to automatically keep your indexes current. For more information on
scheduled tasks, see Configuring and Administering ColdFusion.


Creating a ColdFusion search tool programmatically
You can create a Verity search tool for your ColdFusion application in CFML. Although writing CFML code can take
more development time than using these tools, in some situations, writing code is the preferred development method.


Creating a collection with the cfcollection tag
The following are cases in which you might prefer using the cfcollection tag rather than the ColdFusion
Administrator to create a collection:

· You want your ColdFusion application to be able to create, delete, and maintain a collection.




                                                     

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                       483
Accessing and Using Data




· You do not want to expose the ColdFusion Administrator to users.

· You want to create indexes on servers that you cannot access directly; for example, if you use a hosting company.

When using the cfcollection tag, you can specify the same attributes as in the ColdFusion Administrator:


Attribute               Description

action                  (Optional) The action to perform on the collection (create, delete, or optimize). The default value for the action
                        attribute is list. For more information, see cfcollection in CFML Reference.

collection              The name of the new collection, or the name of a collection upon which you perform an action.

path                    The location for the Verity collection.

language                The language.

categories              (Optional) Specifies that cfcollection create a Verity Parametric Index (PI) for this collection. By default, the
                        categories attribute is set to False. To create a collection that uses categories, specify Yes.


You can create a collection by directly assigning a value to the collection attribute of the cfcollection tag, as
shown in the following code:

<cfcollection action = "create"
     collection = "a_new_collection"
     path = "c:\CFusion\verity\collections\">

If you want your users to be able to dynamically supply the name and location for a new collection, use the following
procedures to create form and action pages.


Create a simple collection form page
1 Create a ColdFusion page with the following content:

    <html>
    <head>
        <title>Collection Creation Input Form</title>
    </head>


    <body>
    <h2>Specify a collection</h2>
    <form action="collection_create_action.cfm" method="POST">


        <p>Collection name:
        <input type="text" name="CollectionName" size="25"></p>


        <p>What do you want to do with the collection?</p>
        <input type="radio"
              name="CollectionAction"
              value="Create" checked>Create<br>
        <input type="radio"
              name="CollectionAction"
              value="Optimize">Optimize<br>
        <input type="submit"
              name="submit"
              value="Submit">
    </form>


    </body>
    </html>




                                                    

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                     484
Accessing and Using Data




2 Save the file as collection_create_form.cfm in the myapps directory under the web root directory.

Note: The form does not work until you write an action page for it, which is the next procedure.


Create a collection action page
1 Create a ColdFusion page with the following content:

   <html>
   <head>
        <title>cfcollection</title>
   </head>


   <body>
   <h2>Collection creation</h2>


   <cfoutput>


        <cfswitch expression=#Form.collectionaction#>
              <cfcase value="Create">
                   <cfcollection action="Create"
                   collection="#Form.CollectionName#"
                   path="c:\CFusion\verity\collections\">
                   <p>The collection #Form.CollectionName# is created.</p>
              </cfcase>


              <cfcase value="Optimize">
                   <cfcollection action="Optimize"
                   collection="#Form.CollectionName#">
                   <p>The collection #Form.CollectionName# is optimized.</p>
              </cfcase>


              <cfcase value="Delete">
                   <cfcollection action="Delete"
                   collection="#Form.CollectionName#">
                   <p>The collection is deleted.</p>
              </cfcase>
        </cfswitch>
   </cfoutput>
   </body>
   </html>

2 Save the file as collection_create_action.cfm in the myapps directory under the web root directory.

3 In the web browser, enter the following URL to display the form page:

   http://hostname:portnumber/myapps/collection_create_form.cfm

4 Enter a collection name; for example, CodeColl.

5 Verify that Create is selected and submit the form.

6 (Optional) In the ColdFusion Administrator, reload the ColdFusion Collections page.

The name and full path of the new collection appear in the list of Verity Collections.

You successfully created a collection, named CodeColl, that currently has no data.




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                        485
Accessing and Using Data




Indexing a collection by using the cfindex tag
You can index a collection in CFML by using the cfindex tag, which eliminates the need to use the ColdFusion
Administrator. The cfindex tag populates the collection with metadata that is then used to retrieve search results. You
can use the cfindex tag to index either physical files (documents stored within your website's root folder), or the
results of a database query.

Note: Before indexing a collection, create a Verity collection by using the ColdFusion Administrator, or the
cfcollection tag. For more information, see "Creating a collection with the ColdFusion Administrator" on page 481,
or "Creating a collection with the cfcollection tag" on page 482.

When using the cfindex tag, the following attributes correspond to the values that you would enter by using the
ColdFusion Administrator to index a collection:


 Attribute               Description

 collection              The name of the collection.

 action                  Specifies what the cfindex tag should do to the collection. The default action is to update the collection,
                         which generates a new index. Other actions are to delete, purge, or refresh the collection.

 type                    Specifies the type of files or other data to which the cfindex tag applies the specified action. The value you
                         assign to the type attribute determines the value to use with the key attribute (see the following list). When you
                         enter a value for the type attribute, cfindex expects a corresponding value in the key attribute. For example,
                         if you specify type=file, cfindex expects a directory path and filename for the key attribute.

                         The type attribute has the following possible values:

                         ·  file: Specifies a directory path and filename for the file that you are indexing.

                         ·  path: Specifies a directory path that contains the files that you are indexing.

                         ·  custom: Specifies custom data, such as a recordset returned from a query.


 extensions              (Optional) The delimited list of file extensions that ColdFusion uses to index files if type="path".

 key                     The value that you specify for the key attribute depends on the value set for the type attribute:

                         · If type="file", the key is the directory path and filename for the file you are indexing.

                         · If type="path", the key is the directory path that contains the files you are indexing.

                         · If type="custom", the key is a unique identifier specifying the location of the documents you are indexing;
                            for example, the URL of a specific web page or website whose contents you want to index. If you are indexing
                            data returned by a query (from a database for example), the key is the name of the recordset column that
                            contains the primary key.

 URLpath                 (Optional) The URL path for files if type="file" and type="path". When the collection is searched with the
                         cfsearch tag, ColdFusion works as follows:

                         ·  type="file": The URLpath attribute contains the URL to the file.

                         ·  type="path": The path name is automatically prefixed to filenames and returned as the URLpath attribute.


 recurse                 (Optional) Yes or No. If type = "path" , Yes specifies that directories below the path specified in the key
                         attribute are included in the indexing operation.

 language                (Optional) The language of the collection. The default language is English Basic.

                         To learn more about support for languages, see "Specifying a language" on page 479.


You can use form and action pages like the following examples to select and index a collection.


Select which collection to index
1 Create a ColdFusion page with the following content:



                                                     

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                             486
Accessing and Using Data




   <html>
   <head>
        <title>Select the Collection to Index</title>
   </head>
   <body>


   <h2>Specify the index you want to build</h2>


   <form method="Post" action="collection_index_action.cfm">
        <p>Enter the collection you want to index:
        <input type="text" name="IndexColl" size="25" maxLength="35"></p>
        <p>Enter the location of the files in the collection:
        <input type="text" name="IndexDir" size="50" maxLength="100"></p>
        <p>Enter a Return URL to prepend to all indexed files:
        <input type="text" name="urlPrefix" size="80" maxLength="100"></p>


        <input type="submit" name="submit" value="Index">


   </form>


   </body>
   </html>

2 Save the file as collection_index_form.cfm in the myapps directory under the web_root.

Note: The form does not work until you write an action page for it, which you do when you index a collection.


Use cfindex to index a collection
1 Create a ColdFusion page with the following content:

   <html>
   <head>
   <title>Creating Index</title>
   </head>
   <body>
   <h2>Indexing Complete</h2>


   <cfindex collection="#Form.IndexColl#"
        action="refresh"
        extensions=".htm, .html, .xls, .txt, .mif, .doc"
        key="#Form.IndexDir#"
        type="path"
        urlpath="#Form.urlPrefix#"
        recurse="Yes"
        language="English">


   <cfoutput>
        The collection #Form.IndexColl# has been indexed.
   </cfoutput>
   </body>
   </html>

2 Save the file as collection_index_action.cfm.

3 In the web browser, enter the following URL to display the form page:

   http://hostname:portnumber/myapps/collection_index_form.cfm

4 Enter a collection name; for example, CodeColl.



                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      487
Accessing and Using Data




5 Enter a file location; for example, C:\ColdFusion9\wwwroot\vw_files.

6 Enter a URL prefix; for example, http://localhost:8500/vw_files (assuming that you are using the built-in web
   server).

7 Click Index.

   A confirmation message appears on successful completion.

Note: For information about using the cfindex tag with a database to index a collection, see "Working with data
returned from a query" on page 497.


Indexing a collection with the ColdFusion Administrator
As an alternative to programmatically indexing a collection, use the following procedure to index a collection with the
ColdFusion Administrator.

1 In the list of Verity Collections, select a collection name; for example, CodeColl.

2 Click Index to open the index page.

3 For File Extensions, enter the types of files to index. Use a comma to separate multiple file types; for example, .htm,
   .html, .xls, .txt, .mif, .doc.

4 Enter (or Browse to) the directory path that contains the files to be indexed; for example,
   C:\Inetpub\wwwroot\vw_files.

5 (Optional) To extend the indexing operation to all directories below the selected path, select the Recursively index
   subdirectories check box.

6 (Optional) Enter a Return URL to prepend to all indexed files.

   This step lets you create a link to any of the files in the index; for example, http://127.0.0.1/vw_files/.

7 (Optional) Select a language other than English.

   For more information, see "Specifying a language" on page 479.

8 Click Submit Changes.

   On completion, the ColdFusion Collections page appears.

Note: The time required to generate the index depends on the number and size of the selected files in the path.

This interface lets you easily build a very specific index based on the filename extension and path information you
enter. In most cases, you do not need to change your server file structures to accommodate the generation of indexes.


Creating a search page
You use the cfsearch tag to search an indexed collection. Searching a Verity collection is like a standard ColdFusion
query: both use a dedicated ColdFusion tag that requires a name attribute for their searches and both return a query
object that contains rows matching the search criteria. The following table compares the two tags:


 cfquery                                                 cfsearch

 Searches a data source                                  Searches a collection

 Requires a name attribute                               Requires a name attribute




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                               488
Accessing and Using Data




 cfquery                                                        cfsearch

 Uses SQL statements to specify search criteria                 Uses a criteria attribute to specify search criteria

 Returns variables keyed to database table field names          Returns a unique set of variables

 Uses cfoutput to display query results                         Uses cfoutput to display search results


Note: You receive an error if you attempt to search a collection that has not been indexed.

The following are important attributes for the cfsearch tag:


 Attribute                       Description

 name                            The name of the search query.

 collection                      The name of the collection(s) being searched. Separate multiple collections with a comma; for example,
                                 collection = "sprocket_docs,CodeColl".


 criteria                        The search target (can be dynamic).

 maxrows                         The maximum number of records returned by the search. Always specify this attribute to ensure optimal
                                 performance (start with 300 or less, if possible).


Each cfsearch returns variables that provide the following information about the search:


 Attribute                        Description

 RecordCount                      The total number of records returned by the search.

 CurrentRow                       The current row of the recordset.

 RecordsSearched                  The total number of records in the index that were searched. If no records are returned in the search, this
                                  property returns a null value.

 Summary                          Automatic summary saved by the cfindex tag.

 Context                          A context summary that contains the search terms, highlighted in bold (by default). This is enabled if you
                                  set the contextpassages attribute to a number greater than zero.


Additionally, if you specify the status attribute, the cfsearch tag returns the status structure, which contains the
information in the following table:


 Variable                        Description

 found                           The number of documents that contain the search criteria.

 searched                        The number of documents searched. Corresponds to the recordsSearched column in the search results.

 time                            The number of milliseconds the search took, as reported by the Verity K2 search service.

 suggestedQuery                  An alternative query, as suggested by Verity, that may produce better results. This often contains corrected
                                 spellings of search terms. Present only when the suggestions tag attribute criteria is met.

 Keywords                        A structure that contains each search term as a key to an array of up to five possible alternative terms in order
                                 of preference. Present only when the suggestions tag attribute criteria is met.


You can use search form and results pages like the following examples to search a collection.


Create a search form
1 Create a ColdFusion page with the following content:




                                                      

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                               489
Accessing and Using Data




   <html>
   <head>
        <title>Searching a collection</title>
   </head>
   <body>
   <h2>Searching a collection</h2>


   <form method="post" action="collection_search_action.cfm">
        <p>Enter search term(s) in the box below. You can use AND, OR, NOT, and
        parentheses. Surround an exact phrase with quotation marks.</p>
        <p><input type="text" name="criteria" size="50" maxLength="50">
        </p>
        <input type="submit" value="Search">
   </form>
   </body>
   </html>

2 Save the file as collection_search_form.cfm.

Enter search target words in this form, which ColdFusion passes as the variable criteria to the action page, which
displays the search results.


Create the results page
1 Create a ColdFusion page with the following content:

   <html>
   <head>
        <title>Search Results</title>
   </head>
   <body>
   <cfsearch
        name = "codecoll_results"
        collection = "CodeColl"
        criteria = "#Form.criteria#"
        contextPassages = "1"
        contextBytes = "300"
        maxrows = "100">


   <h2>Search Results</h2>
   <cfoutput>
   Your search returned #codecoll_results.RecordCount# file(s).
   </cfoutput>


   <cfoutput query="codecoll_results">
        <p>
        File: <a href="#URL#">#Key#</a><br>
        Document Title (if any): #Title#<br>
        Score: #Score#<br>
        Summary: #Summary#<br>
        Highlighted Summary: #context#</p>
   </cfoutput>
   </body>
   </html>

2 Save the file as collection_search_action.cfm.

3 View collection_search_form.cfm in the web browser.




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                   490
Accessing and Using Data




4 Enter target words and click Search.

Note: As part of the indexing process, Verity automatically produces a summary of every document file or every query
recordset that gets indexed. The default summary result set column selects the best sentences, based on internal rules, up
to a maximum of 500 characters. Every cfsearch operation returns summary information by default. For more
information, see "Using Verity Search Expressions" on page 505. Alternatively, you can use the context result set column,
which provides a context summary with highlighted search terms.


Enhancing search results
ColdFusion lets you enhance the results of searches by letting you incorporate search features that let users more easily
find the information they need. Verity provides the following search enhancements:

· Highlighting search terms

· Providing alternative spelling suggestions

· Narrowing searches using categories


Highlighting search terms
Term highlighting lets users quickly scan retrieved documents to determine whether they contain the desired
information. This can be especially useful when searching lengthy documents, letting users quickly locate relevant
information returned by the search.

To implement term highlighting, use the following cfsearch attributes in the search results page:


 Attributes                          Description

 ContextHighlightBegin               Specifies the HTML tag to prefix to the search term within the returned documents. This attribute
                                     must be used in conjunction with ContextHighlightEnd to highlight the resulting search terms. The
                                     default HTML tag is <b>, which highlights search terms using bold type.

 ContextHighlightEnd                 Specifies the HTML tag to append to the search term within the returned documents.

 ContextPassages                     The number of passages/sentences Verity returns in the context summary (the context column of
                                     the results). The default value is 0; this disables the context summary.

 ContextBytes                        The total number of bytes that Verity returns in the context summary. The default is 300 bytes.


The following example adds to the previous search results example by highlighting the returned search terms with bold
type.


Create a search results page that includes term highlighting
1 Create a ColdFusion page with the following content:




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       491
Accessing and Using Data




    <html>
   <head>
         <title>Search Results</title>
   </head>
   <body>
   <cfsearch
         name = "codecoll_results"
         collection = "CodeColl"
         criteria = "#Form.Criteria#"
         ContextHighlightBegin="<b>"
         ContextHighlightEnd="</b>"
         ContextPassages="1"
         ContextBytes="500"
         maxrows = "100">
   <h2>Search Results</h2>
   <cfoutput>
   Your search returned #codecoll_results.RecordCount# file(s).
   </cfoutput>


   <cfoutput query="codecoll_results">
         <p>
         File: <a href="#URL#">#Key#</a><br>
         Document Title (if any): #Title#<br>
         Score: #Score#<br>
         Summary: #Summary#<br>
         Highlighted Summary: #context#</p>
   </cfoutput>
   </body>
   </html>

2 Save the file as collection_search_action.cfm.

   Note: This overwrites the previous ColdFusion example page.

3 View collection_search_form.cfm in the web browser:

4 Enter target words and click Search.


Providing alternative spelling suggestions
Many unsuccessful searches are the result of incorrectly spelled query terms. Verity can automatically suggest
alternative spellings for misspelled queries using a dictionary that is dynamically built from the search index.

To implement alternative spelling suggestions, you use the cfsearch tag's suggestions attribute with an integer
value. If the number of documents returned by the search is less than or equal to the value you specify, Verity provides
alternative search term suggestions. In addition to using the suggestions attribute, you can also use the cfif tag to
output the spelling suggestions, and a link through which to search on the suggested terms.

Note: Using alternative spelling suggestions incurs a small performance penalty. This occurs because the cfsearch tag must
also look up alternative spellings in addition to the specified search terms.

The following example specifies that if the number of search results returned is less than or equal to 5, an alternative
search term--which is displayed using the cfif tag--is displayed with a link that the user can click to activate the
alternate search.


Create a search results page that provides alternative spelling suggestions
1 Create a ColdFusion page with the following content:




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      492
Accessing and Using Data




    <html>
   <head>
         <title>Search Results</title>
   </head>
   <body>
   <cfsearch
         name = "codecoll_results"
         collection = "CodeColl"
         criteria = "#Form.Criteria#">
         status = "info"
         suggestions="5"
         ContextPassages = "1"
         ContextBytes = "300"
         maxrows = "100">
   <h2>Search Results</h2>
   <cfoutput>
   Your search returned #codecoll_results.RecordCount# file(s).
   </cfoutput>
   <cfif info.FOUND LTE 5 AND isDefined("info.SuggestedQuery")>
         Did you mean:
         <a href="search,cfm?query=#info.SuggestedQuery#>#info.SuggestedQuery#</a>
   </cfif>
   <cfoutput query="codecoll_results">
         <p>
         File: <a href="#URL#">#Key#</a><br>
         Document Title (if any): #Title#<br>
         Score: #Score#<br>
         Summary: #Summary#<br>
         Highlighted Summary: #context#</p>
   </cfoutput>
   </body>
   </html>

2 Save the file as collection_search_action.cfm.

   Note: This overwrites the previous ColdFusion example page.

3 View collection_search_form.cfm in the web browser:

4 Enter any misspelled target words and click Search.


Narrowing searches by using categories
Verity lets you organize your searchable documents into categories. Categories are groups of documents (or database
tables) that you define, and then let users search within them. For example, if you wanted to create a search tool for a
software company, you can create categories such as whitepapers, documentation, release notes, and marketing
collateral. Users can then specify one or more categories in which to search for information. Thus, if users visiting the
website wanted to learn about a conceptual aspect of your company's technology, they might restrict their search to
the whitepaper and marketing categories.

Typically, you provide users with pop-up menus or check boxes from which they can select categories to narrow their
searches. Alternately, you can create a form that lets users enter both a category name in which to search, and search
keywords.


Create a search application that uses categories
1 Create a collection with support for categories enabled.




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     493
Accessing and Using Data




2 Index the collection, specifying the category and categoryTree attributes appropriate to the collection.

   For more information on indexing Verity collections with support for categories, see "Indexing collections that
   contain categories" on page 493.

3 Create a search page that lets users search within the categories that you created.

   Create a search page using the cfsearch tag that lets users more easily search for information by restricting
   searches to the specified category and, if specified, its hierarchical tree.

   For more information on searching Verity collections with support for categories, see "Searching collections that
   contain categories" on page 494.


Creating collections with support for categories
You can either select Enable Category Support from the ColdFusion Administrator, or write a cfcollection tag that
uses the category attribute. By enabling category support, you create a collection that contains a Verity Parametric
Index (PI).

<cfcollection
     action = "action"
     collection = "collectionName"
     path = "path_to_verity_collection"
     language = "English"
     categories = "yes">

For more information on using the cfcollection tag to create Verity collections with support for categories, see
cfcollection in the CFML Reference.


Indexing collections that contain categories
When you index a collection with support for categories enabled, do the following:

· Specify a category name using the category attribute. The name (or names) that you provide identifies the
   category so that users can specify searches on the documents that the collection contains. For example, you create
   five categories named taste, touch, sight, sound, and smell. When performing a search, users could select from either
   a pop-up menu or check box to search within one or more of the categories, thereby limiting their search within a
   given range of topics.

   <cfindex collection="#Form.IndexColl#"
        action="update"
        extensions=".htm, .html, .xls, .txt, .mif, .doc, .pdf"
        key="#Form.IndexDir#"
        type="path"
        urlpath="#Form.urlPrefix#"
        recurse="Yes"
        language="English"
        category="taste, touch, sight, sound, smell">

· Specify a hierarchical document tree (like a file system tree) within which you can limit searches, when you use the
   categoryTree attribute. With the categoryTree attribute enabled, ColdFusion limits searches to documents
   contained within the specified path.

   To use the categoryTree attribute, you specify a hierarchical document tree by listing each category as a string,
   and separating them using forward slashes (/). The tree structure that you specify in a search is the root of the
   document tree from which you want the search to begin. The type=path attribute appends directory names to the
   end of the returned value (as it does when specifying the urlpath attribute).

   Note: You can specify only a single category tree.



                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       494
Accessing and Using Data




    <cfindex collection="#Form.IndexColl#"
         action="update"
         extensions=".htm, .html, .xls, .txt, .mif, .doc, .pdf"
         key="#Form.IndexDir#"
         type="path"
         urlpath="#Form.urlPrefix#"
         recurse="Yes"
         language="English"
         category="taste, touch, sight, sound, smell"
         categoryTree="human/senses/taste">

For more information on using the cfindex tag to create Verity collections with support for categories, see cfindex
in the CFML Reference.


Searching collections that contain categories
When searching data in a collection created with categories, you specify category and categoryTree. The values
supplied to these attributes specify the category to be searched for the specified search string (the criteria attribute).
The category attribute can contain a comma-separated list of categories to search. Both attributes can be specified at
the same time.

<cfsearch collection="collectionName"
     name="results"
     maxrows = "100"
     criteria="search keywords"
     category="FAQ,Technote"
     categoryTree="Docs/Tags">

Note: If cfsearch is executed on a collection that was created without category information, an exception is thrown.

To search collections that contain categories, you use the cfsearch tag, and create an application page that searches
within specified categories. The following example lets the user enter and submit the name of the collection, the
category in which to search, and the document tree associated with the category through a form. By restricting the
search in this way, the users are better able to retrieve the documents that contain the information they are looking for.
In addition to searching with a specified category, this example also makes use of the contextHighlight attribute,
which highlights the returned search results.

<cfparam name="collection" default="test-pi">


<cfoutput>
<form action="#CGI.SCRIPT_NAME#" method="POST">
     Collection Name: <input Type="text" Name="collection" value="#collection#">
     <P>
     Category: <input Type="text" Name="category" value=""><br>
     CategoryTree: <input Type="text" Name="categoryTree" value=""><br>
     <P>
Search: <input Type="text" Name="criteria">
     <input Type="submit" Value="Search">
</form>
</cfoutput>


<cfif isdefined("Form.criteria")>
     <cfoutput>Search results for: <b>#criteria#</b></cfoutput>
     <br>
     <cfsearch collection="#form.collection#"
          category="#form.category#"
          categoryTree="#form.categoryTree#"
          name="sr"



                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                    495
Accessing and Using Data




          status="s"
          criteria="#form.criteria#"
          contextPassages="3"
          contextBytes="300"
          contextHighlightBegin="<i><b>"
          contextHighlightEnd="</b></i>"
          maxrows="100">
     <cfdump var="#s#">


     <cfoutput>
     <p>Number of records in query: #sr.recordcount#</P>
     </cfoutput>


     <cfdump var="#sr#">


     <cfoutput Query="sr">
     Title: <i>#title#</i><br>
     URL: #url#<br>
     Score: #score#<br>
     <hr>
     #context#<br>
     <br>
     #summary#<br>
     <hr>
     </cfoutput>
</cfif>

For more information on using the cfindex tag to create Verity collections with support for categories, see cfsearch
in the CFML Reference.


Retrieving information about the categories contained in a collection
You can retrieve the category information for a collection by using the cfcollection tag's categoryList action.The
categoryList action returns a structure that contains two keys:


 Variable            Description

 categories          The name of the category and its hit count, where hit count is the number of documents in the specified category.

 categorytrees       The document tree (a/b/c) and hit count, where hit count is the number of documents at or below the branch of the
                     document tree.


Use the information returned by categoryList to display to users the number of documents available for searching,
as well the document tree available for searching. You can also create a search interface that lets the user select what
category to search within based on the results returned by categoryList.

<cfcollection
     action="categoryList"
     collection="collectionName"
     name="info">


<cfoutput>
     <cfset catStruct=info.categories>
     <cfset catList=StructKeyList(catStruct)>
     <cfloop list="catList" index="cat"> Category: #cat# <br>
          Documents: #catStruct[cat]#<br>
     </cfloop>
</cfoutput>



                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    496
Accessing and Using Data




To retrieve information about the categories contained in a collection, you use the cfcollection tag, and create an
application page that retrieves category information from the collection and displays the number of documents
contained by each category. This example lets the user enter and submit the name of the collection via a form, and then
uses the categoryList action to retrieve information about the number of documents contained by the collection,
and the hierarchical tree structure into which the category is organized.

<html>
<head>
     <title>Category information</title>
</head>
<body>
<cfoutput>
<form action="#CGI.SCRIPT_NAME#" method="POST">
     Enter Collection Name: <input Type="text" Name="collection"
          value="#collection#"><br>
     <input Type="submit" Value="GetInfo">
</form>
</cfoutput>
<cfif isdefined("Form.collection")>
     <cfoutput>
     Getting collection info...
     <br>
     <cfflush>
     <cfcollection
          action="categorylist"
          collection="#collection#"
          name="out">
     <br>
     <cfset categories=out.categories>
     <cfset tree=out.categorytrees>
     <cfset klist=StructKeyList(categories)>
     <table border=1>
     <th>Category</th> <th>Documents</th>
     <cfloop index="x" list="#klist#">
     <tr>
          <td>#x#</td> <td align="center">#categories[x]#</td>
     </tr>
     </cfloop>
     </table>
     <cfset klist=StructKeyList(tree)>
     <table border=1>
     <th>Category</th> <th>Documents</th>
     <cfloop index="x" list="#klist#">
     <tr>
      <td>#x#</td> <td align="center">#tree[x]#</td>
     </tr>
     </cfloop>
     </table>
     </cfoutput>
</cfif>
</body>

For more information on using the cfcollection tag to create Verity collections with support for categories, see
cfcollection in CFML Reference.




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                     497
Accessing and Using Data




Working with data returned from a query
Using Verity, you can search data returned by a query--such as a database recordset--as if it is a collection of
documents stored on your web server. Using Verity to search makes implementing a search interface much easier, as
well as letting users more easily find information contained in database files. A database can direct the indexing
process, by using different values for the type attribute of the cfindex tag. There are also several reasons and
procedures for indexing the results of database and other queries.


Recordsets and types of queries
When indexing recordsets generated from a query (using the cfquery, cfldap, or cfpop tag), cfindex creates indexes
based on the type attribute and its set value:


Type                  Attribute values

File                  The key attribute is the name of a column in the query that contains a full filename (including path).

Path                  The key attribute is the name of a column in the query that contains a directory pathname.

Custom                The key attribute specifies a column name that can contain anything you want. In this case, the body attribute is
                      required, and is a comma-delimited list of the names of the columns that contain the text data to be indexed.


The cfindex tag treats all collections the same, whether they originate from a database recordset, or if they are a
collection of documents stored within your website's root folder.


Indexing data returned by a query
Indexing the results of a query is like indexing physical files located on your website, with the added step that you must
write a query that retrieves the data to search. The following are the steps to perform a Verity search on recordsets
returned from a query:

1 Create a collection.

2 Write a query that retrieves the data you want to search, and generate a recordset.

3 Index the recordset using the cfindex tag.

   The cfindex tag indexes the recordset as if it is a collection of documents in a folder within your website.

4 Search the collection.

   The information returned from the collection includes the database key and other selected columns. You can then
   use the information as-is, or use the key value to retrieve the entire row from the database table.

Use Verity to search databases in the following cases:

· You want to perform full-text search on database data. You can search Verity collections that contain textual data
   much more efficiently with a Verity search than using SQL to search database tables.

· You want to give your users access to data without interacting directly with the data source itself.

· You want to improve the speed of queries.

· You want users to be able to execute queries, but not update database tables.

Unlike indexing documents stored on your web server, indexing information contained in a database requires an
additional step-- first write a query (using the cfquery, cfldap, or cfpop tag) that retrieves the data you want to let
your users search. You then pass the information retrieved by the query to a cfindex tag, which indexes the data.

When indexing data with the cfindex tag, specify which column of the query represents the filename, which column
represents the document title, and which column (or columns) represents the document's body (the information that
you want to make searchable).


                                                     

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                            498
Accessing and Using Data




When indexing a recordset retrieved from a database, the cfindex tag uses the following attributes that correspond
to the data source:


 Attribute              Description

 key                    Primary key column of the data source table.

 title                  Specifies a query column name.

 body                   Columns that you want to search for the index.

 type                   If set to custom, this attribute specifies the columns that you want to index. If set to file or path, this is a column
                        that contains either a directory path and filename, or a directory path that contains the documents to be indexed.


Using the cfindex tag to index tabular data is like indexing documents, with the exception that you refer to column
names from the generated recordset in the body attribute. In the following example, the type attribute is set to custom,
specifying that the cfindex tag index the contents of the recordset columns Emp_ID, FirstName, LastName, and
Salary, which are identified using the body attribute. The Emp_ID column is listed as the key attribute, making it the
primary key for the recordset.


Index a ColdFusion query
1 Create a Verity collection for the data that you want to index.

   The following example assumes that you have a Verity collection named CodeColl. You can use the ColdFusion
   Administrator to create the collection, or you can create the collection programmatically by using the
   cfcollection tag. For more information, see "Creating a collection with the ColdFusion Administrator" on
   page 481 or "Creating a collection with the cfcollection tag" on page 482.

2 Create a ColdFusion page with the following content:




                                                    

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                499
Accessing and Using Data




   <html>
   <head>
        <title>Adding Query Data to an Index</title>
   </head>
   <body>


   <!--- Retrieve data from the table. --->
   <cfquery name="getEmps" datasource="cfdocexamples">
        SELECT * FROM EMPLOYEE
   </cfquery>


   <!--- Update the collection with the above query results. --->
   <cfindex
        query="getEmps"
        collection="CodeColl"
        action="Update"
        type="Custom"
        key="Emp_ID"
        title="Emp_ID"
        body="Emp_ID,FirstName,LastName,Salary">


   <h2>Indexing Complete</h2>


   <!--- Output the record set. --->
   <p>Your collection now includes the following items:</p>
   <cfoutput query="getEmps">
        <p>#Emp_ID# #FirstName# #LastName# #Salary#</p>
   </cfoutput>
   </body>
   </html>

3 Save the file as collection_db_index.cfm in the myapps directory under the web root directory.

4 Open the file in the web browser to index the collection.

   The resulting recordset appears.


Search and display the query results
1 Create a ColdFusion page with the following content:




                                            

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                 500
Accessing and Using Data




   <html>
   <head>
        <title>Searching a collection</title>
   </head>
   <body>


   <h2>Searching a collection</h2>


   <form method="post" action="collection_db_results.cfm">
        <p>Collection name: <input type="text" name="collname" size="30" maxLength="30"></p>


        <p>Enter search term(s) in the box below. You can use AND, OR, NOT,
        and parentheses. Surround an exact phrase with quotation marks.</p>
        <p><input type="text" name="criteria" size="50" maxLength="50">
        </p>
        <p><input type="submit" value="Search"></p>
   </form>


   </body>
   </html>

2 Save the file as collection_db_search_form.cfm in the myapps directory under the web_root.

   This file is like collection_search_form.cfm, except the form uses collection_db_results.cfm, which you create in
   the next step, as its action page.

3 Create another ColdFusion page with the following content:




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      501
Accessing and Using Data




    <html>
   <head>
   <title>Search Results</title>
   </head>


   <body>


   <cfsearch
              collection="#Form.collname#"
              name="getEmps"
              criteria="#Form.Criteria#"
        maxrows = "100">


   <!--- Output the record set. --->
   <cfoutput>
   Your search returned #getEmps.RecordCount# file(s).
   </cfoutput>


   <cfoutput query="getEmps">
        <p><table>
        <tr><td>Title: </td><td>#Title#</td></tr>
        <tr><td>Score: </td><td>#Score#</td></tr>
        <tr><td>Key: </td><td>#Key#</td></tr>
        <tr><td>Summary: </td><td>#Summary#</td></tr>
        <tr><td>Custom 1:</td><td>#Custom1#</td></tr>
        <tr><td>Column list: </td><td>#ColumnList#</td></tr>
   </table></p>


   </cfoutput>
   </body>
   </html>

4 Save the file as collection_db_results.cfm in the myapps directory under the web_root.

5 View collection_db_search_form.cfm in the web browser and enter the name of the collection and search terms.


Indexing a file returned by using a query
You can index an individual file that uses a query by retrieving a table row whose contents are a filename. In this case,
the key specifies the column that contains the complete filename. The file is indexed using the cfindex tag as if it is a
document under the web server root folder.

In the following example, the cfindex tag's type attribute has been set to file, and the specified key is the name of
the column that contains the full path to the file and the filename.

<cfquery name="getEmps" datasource="cfdocexamples">
SELECT * FROM EMPLOYEE WHERE EMP_ID = 1
</cfquery>
<cfindex
     query="getEmps"
     collection="CodeColl"
     action="Update"
     type="file"
     key="Contract_File"
     title="Contract_File"
     body="Emp_ID,FirstName,LastName,Contract_File">




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     502
Accessing and Using Data




Search and display the file
 Create a ColdFusion page that contains the following content:

    <!--- Output the record set.--->
   <p>Your collection now includes the following items:</p>
   <cfoutput query="getEmps">
   <p>#Emp_ID# #FirstName# #LastName# #Contract_File#</p>
   </cfoutput>
   <cfsearch
         collection="#Form.collname#"
         name="getEmps"
         criteria="#Form.Criteria#"
         maxrows = "100">


   <!--- Output the filename contained in the record set. --->
   <cfoutput>
   Your search returned #getEmps.RecordCount# file(s).
   </cfoutput>
   <cfoutput query="getEmps">
   <p><table>
         <tr><td>Title: </td><td>#Title#</td></tr>
         <tr><td>Score: </td><td>#Score#</td></tr>
         <tr><td>Key: </td><td>#Key#</td></tr>
         <tr><td>Summary: </td><td>#Summary#</td></tr>
         <tr><td>Custom 1:</td><td>#Custom1#</td></tr>
         <tr><td>Column list: </td><td>#ColumnList#</td></tr>
   </table></p>
   </cfoutput>


Indexing a path returned by using a query
You can index a directory path to a document (or collection of documents) using a query by retrieving a row whose
contents are a full directory path name. In this case, the key specifies the column that contains the complete directory
path. Documents located in the directory path are indexed using the cfindex tag as if they are under the web server
root folder.

In this example, the type attribute is set to path, and the key attribute is assigned the column name Project_Docs. The
Project_Docs column contains directory paths, which Verity indexes as if they are specified as a fixed path pointing to
a collection of documents without the use of a query.


Index a directory path within a query
1 Create a ColdFusion page that contains the following content:




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    503
Accessing and Using Data




   <cfquery name="getEmps" datasource="cfdocexamples">
   SELECT * FROM EMPLOYEE WHERE Emp_ID = 15
   </cfquery>
   <!--- Update the collection with the above query results. --->
   <!--- Key specifies a column that contains a directory path. --->
   <cfindex
        query="getEmps"
        collection="CodeColl"
        action="update"
        type="path"
        key="Project_Docs"
        title="Project_Docs"
        body="Emp_ID,FirstName,LastName,Project_Docs">


   <h2>Indexing Complete</h2>
   <p>Your collection now includes the following items:</p>
   <cfoutput query="getEmps">
   <p>#Emp_ID# #FirstName# #LastName# #Project_Docs#</p>
   </cfoutput>

2 Save the file as indexdir.cfm in the myapps directory.

The ColdFusion cfindex tag indexes the contents of the specified directory path.


Search and display the directory path
1 Create a ColdFusion page that contains the following content:

   <cfsearch
        collection="#Form.collname#"
        name="getEmps"
        criteria="#Form.Criteria#"
        maxrows = "100">


   <!--- Output the directory path contained in the record set. --->
   <cfoutput>
   Your search returned #getEmps.RecordCount# file(s).
   </cfoutput>


   <cfoutput query="getEmps">
   <p><table>
        <tr><td>Title: </td><td>#Title#</td></tr>
        <tr><td>Score: </td><td>#Score#</td></tr>
        <tr><td>Key: </td><td>#Key#</td></tr>
        <tr><td>Summary: </td><td>#Summary#</td></tr>
        <tr><td>Custom 1:</td><td>#Custom1#</td></tr>
        <tr><td>Column list: </td><td>#ColumnList#</td></tr>
   </table></p>
   </cfoutput>

2 Save the file as displaydir.cfm.


Indexing query results obtained from an LDAP directory
The widespread use of the Lightweight Directory Access Protocol (LDAP) to build searchable directory structures,
internally and across the web, gives you opportunities to add value to the sites that you create. You can index contact
information or other data from an LDAP-accessible server and let users search it.




                                            

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    504
Accessing and Using Data




When creating an index from an LDAP query, remember the following considerations:

· Because LDAP structures vary greatly, you must know the directory schema of the server and the exact name of
   every LDAP attribute that you intend to use in a query.

· The records on an LDAP server can be subject to frequent change.

In the following example, the search criterion is records with a telephone number in the 617 area code. Generally,
LDAP servers use the Distinguished Name (dn) attribute as the unique identifier for each record so that attribute is
used as the key value for the index.

<!--- Run the LDAP query. --->
<cfldap name="OrgList"
     server="myserver"
     action="query"
     attributes="o, telephonenumber, dn, mail"
     scope="onelevel"
     filter="(|(O=a*) (O=b*))"
     sort="o"
     start="c=US">


<!--- Output query record set. --->
<cfoutput query="OrgList">
     DN: #dn# <br>
     O: #o# <br>
     TELEPHONENUMBER: #telephonenumber# <br>
     MAIL: #mail# <br>
=============================<br>
</cfoutput>


<!--- Index the record set. --->
<cfindex action="update"
     collection="ldap_query"
     key="dn"
     type="custom"
     title="o"
     query="OrgList"
     body="telephonenumber">


<!--- Search the collection. --->
<!--- Use the wildcard * to contain the search string. --->
<cfsearch collection="ldap_query"
     name="s_ldap"
     criteria="*617*"
     maxrows = "100">


<!--- Output returned records. --->
<cfoutput query="s_ldap">
     #Key#, #Title#, #Body# <br>
</cfoutput>


Indexing cfpop query results
The contents of mail servers are volatile; specifically, the message number is reset as messages are added and deleted.
To avoid mismatches between the unique message number identifiers on the server and in the Verity collection,
reindex the collection before processing a search.




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       505
Accessing and Using Data




As with the other query types, provide a unique value for the key attribute and enter the data fields to index in the body
attribute.

The following example updates the pop_query collection with the current mail for user1, and searches and returns the
message number and subject line for all messages that contain the word action:

<!--- Run POP query. --->
<cfpop action="getall"
     name="p_messages"
     server="mail.company.com"
     userName="user1"
     password="user1">


<!--- Output POP query record set. --->
<cfoutput query="p_messages">
     #messagenumber# <br>
     #from# <br>
     #to# <br>
     #subject# <br>
     #body# <br>
<hr>
</cfoutput>


<!--- Index record set. --->
<cfindex action="refresh"
     collection="pop_query"
     key="messagenumber"
     type="custom"
     title="subject"
     query="p_messages"
     body="body">


<!--- Search messages for the word "action". --->
<cfsearch collection="pop_query"
     name="s_messages"
     criteria="action"
     maxrows = "100">


<!--- Output search record set. --->
<cfoutput query="s_messages">
     #key#, #title# <br>
</cfoutput>




Using Verity Search Expressions

You can use Verity search expressions to refine your searches to yield the most accurate results.


About Verity query types
When you search a Verity collection, you can use a simple, explicit, natural, or Internet query. The following table
compares the query types:




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   506
Accessing and Using Data




 Query type       Content           Use of operators and modifiers           CFML example

 Simple           One or more words Uses STEM operator and MANY              <cfsearch name = "band_search"
                                    modifier, by default
                                                                             collection="bbb"

                                                                             type = "simple"

                                                                             criteria="film">

 Explicit         Words, operators, Must be specified                        <cfsearch name = "my_search"
                  modifiers
                                                                             collection="bbb"

                                                                             type = "explicit"

                                                                             criteria="<WILDCARD>'sl[iau]m'">

 Natural          One or more words Uses STEM operator and MANY              <cfsearch name = "my_search"
                                    modifier, by default
                                                                             collection="bbb"

                                                                             type = "natural"

                                                                             criteria="Boston subway maps">

 Internet         Words, operators,                                          <cfsearch name = "my_search"
                  modifiers
                                                                             collection="bbb"

                                                                             type = "Internet"

                                                                             criteria="Boston subway maps">


The query type determines whether the search words that you enter are stemmed, and whether the retrieved words
contribute to relevance-ranked scoring. Both of these conditions occur by default in simple queries. For more
information on the STEM operator and MANY modifier, see "Stemming in simple queries" on page 507.

Note: Operators and modifiers are formatted as uppercase letters here solely to enhance legibility. They might be all
lowercase or uppercase.


Using simple queries
The simple query is the default query type and is appropriate for the vast majority of searches. When entering text on
a search form, you perform a simple query by entering a word or comma-delimited strings, with optional wildcard
characters. Verity treats each comma as a logical OR. If you omit the commas, Verity treats the expression as a phrase.

Important: Many web search engines assume a logical AND for multiple word searches, and search for a phrase only if
you use quotation marks. Because Verity treats multiple word searches differently, it helps your users if you provide
examples on your search page or a brief explanation of how to search.

The following table shows examples of simple searches:


 Example                              Search result

 low,brass,instrument                 low or brass or instrument

 low brass instrument                 the phrase, low brass instrument

 film                                 film, films, filming, or filmed

 filming AND fun                      film, films, filming, or filmed, and fun

 filming OR fun                       film, films, filming, or filmed, or fun

 filming NOT fun                      film, films, filming, or filmed, but not fun




                                                    

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                        507
Accessing and Using Data




The operators AND and OR, and the modifier NOT, do not require angle brackets (<>). Operators typically require
angle brackets and are used in explicit queries. For more information about operators and modifiers, see "Operators
and modifiers" on page 515.


Stemming in simple queries
By default, Verity interprets words in a simple query as if you entered the STEM operator (and MANY modifier). The
STEM operator searches for words that derive from a common stem. For example, a search for instructional returns
files that contain instruct, instructs, instructions, and so on.

The STEM operator works on words, not word fragments. A search for "instrument" returns documents containing
"instrument," "instruments," "instrumental," and "instrumentation," whereas a search for "instru" does not. (A
wildcard search for instru* returns documents with these words, and also those with instruct, instructional, and so on.)

Note: The MANY modifier presents the files returned in the search as a list based on a relevancy score. A file with more
occurrences of the search word has a higher score than a file with fewer occurrences. As a result, the search engine ranks
files according to word density as it searches for the word that you specify, as well as words that have the same stem. For
more information on the MANY modifier, see "Modifiers" on page 521.

In CFML, enter your search terms, operators, and modifiers in the criteria attribute of the cfsearch tag:

<cfsearch name="search_name"
      collection="bbb"
      type="simple"
criteria="instructional">


Preventing stemming
When entering text on a search form, you can prevent Verity from implicitly adding the STEM operator by doing one
of the following:

· Perform an explicit query.

· Use the WORD operator. For more information, see "Operators" on page 515.

· Enclose the search term that has double-quotation marks with single-quotation marks, as follows:

    <cfsearch name="search_name"
         collection="bbb"
         type="simple"
    criteria='"instructional"'



Using explicit queries
In an explicit query, the Verity search engine literally interprets your search terms. The following are two ways to
perform an explicit query:

· On a search form, use quotation marks around your search terms.

· In CFML, use type="explicit" in the cfsearch tag.

When you place a search term in quotation marks, Verity does not use the STEM operator. For example, a search for
"instructional" --enclosed in quotation marks, as shown in "Preventing stemming" on page 507-- does not return files
that contain instruct, instructs, instructions, and so on (unless the files also contain instructional).

Note: The Verity products and documentation refers to the Explicit parser as the BooleanPlus parser.




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                     508
Accessing and Using Data




When you specify type="explicit" the search expression must be a valid Verity Query Language expression. As a
result, an individual search term must be in explicit quotation marks. The following table shows valid and invalid
criteria:


Attribute                                         Effect

criteria="government"                             Generates an error

criteria="'government'" or                        Finds only government

criteria='"government"'


criteria="<WORD>government"                       Finds only government

criteria="<STEM>government"                       Finds government, governments, and governmental

criteria="<MANY><STEM>government"                 Finds government, governments, and governmental ranked by relevance

criteria="<WILDCARD>governmen*"                   Finds government, governments, and governmental



Using AND, OR, and NOT
Verity has many powerful operators and modifiers available for searching. However, users might use only the most
basic operators--AND, OR, and the modifier NOT. The following are a few important points:

· You can type operators in uppercase or lowercase letters.

· Verity reads operators from left to right.

· The AND operator takes precedence over the OR operator.

· Use parentheses to clarify the search. Terms enclosed in parentheses are evaluated first; innermost parentheses are
   evaluated first when there are nested parentheses.

· To search for a literal AND, OR, or NOT, enclose the literal term in double-quotation marks; for example:

   love "and" marriage

Note: Although NOT is a modifier, you use it only with the AND and OR operators. Therefore, it is sometimes casually
referred to as an operator.

For more information, see "Operators and modifiers" on page 515.

The following table gives examples of searches and their results:


Search term                                    Returns files that contain

doctorate AND nausea                           both doctorate and nausea

doctorate "and" nausea                         the phrase doctorate and nausea

"doctorate and nausea"                         the phrase doctorate and nausea

masters OR doctorate AND nausea                masters, or the combination of doctorate and nausea

masters OR (doctorate AND nausea)              masters, or the combination of doctorate and nausea

(masters OR doctorate) AND nausea              either masters or doctorate, and nausea

masters OR doctorate NOT nausea                either masters or doctorate, but not nausea




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                                 509
Accessing and Using Data




Using wildcards and special characters
Part of the strength of the Verity search is its use of wildcards and special characters to refine searches. Wildcard
searches are especially useful when you are unsure of the correct spelling of a term. Special characters help you search
for tags in your code.


Searching with wildcards
The following table shows the wildcard characters that you can use to search Verity collections:


 Wildcard        Description                                               Example                             Search result

 ?               Matches any single alphanumeric character.                 apple?                             apples or applet

 *               Matches zero or more alphanumeric characters.              app*ed                             Appleseed,applied,appropriated,
                 Avoid using the asterisk as the first character in a                                          and so on
                 search string. An asterisk is ignored in a set, ([]) or an
                 alternative pattern ({}).

 [ ]             Matches any one of the characters in the brackets.         <WILDCARD> 'sl[iau]m'              slim, slam, or slum
                 Brackets [] indicate an implied OR.

 { }             Matches any one of a set of patterns separated by a        <WILDCARD> 'hoist{s,ing,ed}'       hoists, hoisting, or hoisted
                 comma,

 ^               Matches any character not in the set.                      <WILDCARD>'sl[^ia]m'               slum, but not slim or slam

 -               Specifies a range for a single character in a set.         <WILDCARD> 'c[a-r]t'               cat, cot, but not cut (that is, every
                                                                                                               word beginning with c, ending
                                                                                                               with t, and containing any single
                                                                                                               letter from a to r)


To search for a wildcard character as a literal, place a backslash character before it:

· To match a question mark or other wildcard character, precede the ? with one backslash. For example, type the
      following in a search form: Checkers\?

· To match a literal asterisk, you precede the * with two backslashes, and enclose the search term with either single
      or double quotation marks. For example, type the following in a search form: 'M\\*' (or "M\*") The following is the
      corresponding CFML code:

       <cfsearch name = "quick_search"
            collection="bbb"
            type = "simple"
            criteria="'M\\*'">

Note: The last line is equivalent to criteria='"M\\*"'>.


Searching for special characters
The search engine handles several characters in particular ways as the following table describes:


 Characters           Description

 , ( ) [              These characters end a text token.

                      A token is a variable that stores configurable properties. It lets the administrator or user configure various settings and
                      options.

 = > < !              These characters also end a text token. They are terminated by an associated end character.

 ' ` < { [ !          These characters signify the start of a delimited token. They are terminated by an associated end character.




                                                         

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      510
Accessing and Using Data




To search for special characters as literals, precede the following nonalphanumeric characters with a backslash
character (\) in a search string:

· comma (,)

· left parenthesis (

· right parenthesis )

· double-quotation mark (")

· backslash (\)

· left curly bracket ({)

· left bracket ([)

· less than sign (<)

· backquote (`)

In addition to the backslash character, you can use paired backquote characters (` `) to interpret special characters as
literals. For example, to search for the wildcard string "a{b" you can surround the string with back quotation marks,
as follows:

`a{b`

To search for a wildcard string that includes the literal backquote character (`) use two backquote characters together
and surround the entire string in back quotation marks:

`*n``t`

You can use paired back quotation marks or backslashes to escape special characters. There is no functional difference
between the two. For example, you can query for the term: <DDA> using \<DDA\> or `<DDA>` as your search term.


Using natural queries
The Natural parser supports searching for similar documents, a search method sometimes referred to as similarity
searching. The Natural parser supports searching the full text of documents only. The Natural parser does not support
searching collection fields and zones. The Natural parser does not support Verity query language except for topics.

Note: The Verity products and documentation refer to the Natural parser as the Query-By-Example parser, as well as the
Free Text parser.

Meaningful words are automatically treated as if they are preceded by the MANY modifier and the STEM operator.
By implicitly applying the STEM operator, the search engine searches not only for the meaningful words themselves,
but also for words that have the same stem. By implicitly applying the MANY modifier, Verity calculates each
document's score based on the word density it finds for meaningful words; the denser the occurrences of a word in a
document, the higher the document's score.

By default, common words (such as the, has, and for) are stripped away, and the query is built based on the more
significant words (such as personnel, interns, schools, and mentors). Therefore, the results of a natural language search
are likely to be less precise than a search performed using the simple or explicit parser.

The Natural parser interprets topic names as topic objects. This means that if the specified text block contains a topic
name, the query expression represented by the topic is considered in the search.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    511
Accessing and Using Data




Using Internet queries
With the Internet query parser, users can search entire documents or parts of documents (zones and fields) entering
words, phrases, and plain language like what many web search engines use. Adobe ColdFusion supports two Internet
query parsers in the cfsearch type attribute.

Internet Uses standard, web-style query syntax. For more information, see "Query syntax" on page 512.

Internet_basic Like Internet. This query parser enhances performance, but produces less accurate relevancy statistics.

Note: Verity also includes the Internet_BasicWeb and Internet_AdvancedWeb query parsers, which are not directly
supported by ColdFusion.


Search terms
In a search form enabled with the Internet query parser, users can enter words, phrases, and plain language. The
Internet parser does not support the Verity query language (VQL).


Words
To search for multiple words, separate them with spaces.


Phrases
To search for an exact phrase, surround it with double-quotation marks. A string of capitalized words is assumed to
be a name. Separate a series of names with commas. Commas aren't needed when the phrases are surrounded by
quotation marks.

The following example searches for a document that contains the phrases "San Francisco" and "sourdough bread":

"San Francisco" "sourdough bread"


Plain language
To search with plain language, enter a question or concept. The Internet Query Parser identifies the important words
and searches for them. For example, enter a question such as:

Where is the sales office in San Francisco?

This query produces the same results as entering:

sales office San Francisco


Including and excluding search terms
You can limit searches by excluding or requiring search terms, or by limiting the areas of the document that are
searched.

A minus sign (­) immediately preceding a search term (word or phrase) excludes documents containing the term.

A plus sign (+) immediately preceding a search term (word or phrase) means that returned documents are guaranteed
to contain the term.

If neither sign is associated with the search term, the results can include documents that do not contain the specified
term as long as they meet other search criteria.


Field searches
The Internet parser lets users perform field searches. The fields that are available for searching depend on field
extraction rules based on the document type of the documents in the collection.




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                   512
Accessing and Using Data




To search a document field, type the name of the field, a colon (:), and the search term with no spaces.

field:term

If you enter a minus sign (­) immediately preceding field, documents that contain the specified term are excluded from
the search results. For example, if you enter -field:term, documents that contain the specified term in the specified
field are excluded from the results of the search.

If you enter a plus sign (+) immediately proceeding the field search specification, such as +field:term, documents
are included in the search results only if the search term is present in the specified field.

Field searches are enabled by the enableField parameter in a template file. This parameter, set to 0 by default, must
be set to 1 to allow searching a document field.

Important: The enableField parameter is the only thing in a template file to be modified.


Query syntax
The query syntax is like the syntax that users expect to use on the web. Queries are interpreted according to the
following rules:

· Individual search terms are separated by whitespace characters, such as a space, tab, or comma, for example:

    cake recipes

· Search phrases are entered within double-quotation marks, for example:

    "chocolate cake" recipe

· Exclude terms with the negation operator, minus ( - ), or the NOT operator, for example:

    cake recipes -rum

    cake recipes NOT rum

· Require a compulsory term with the unary inclusion operator, plus sign (+); in this example, the term chocolate
    must be included:

    cake recipes +chocolate

· Require compulsory terms with the binary inclusion operator AND; in this example, the terms recipes and chocolate
    must be included:

    cake recipes and chocolate


Field searches
You can search fields or zones by specifying name: term, where:

name is the name of the field or zone

term is an individual search term or phrase

For example:

bakery city:"San Francisco"
bakery city:Sunnyvale

For more information, see "Refining your searches with zones and fields" on page 522.




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       513
Accessing and Using Data




Pass-through of terms
Search terms are passed through to the VDK-level and are interpreted as Verity Query Language (VQL) syntax. No
issues arise if the terms contain only alphabetic or numeric characters. Other kinds of characters might be interpreted
by the language you're using. If a term contains a character that is not handled by the specified language, it can be
interpreted as VQL. For example, a search term that includes an asterisk (*)can be interpreted as a wildcard.


Stop words
The configurable Internet query parser uses its own stop-word list, qp_inet.stp, to specify terms to ignore for natural
language processing.

Note: You can override the "stop out" by using quotation marks around the word.

For example, the following stop words are provided in the query parser's stop-word file for the English (Basic)
template:


 a                        did                      i                       or                     what

 also                     do                       i'm                     should                 when

 an                       does                     if                      so                     where

 and                      find                     in                      than                   whether

 any                      for                      is                      that                   which

 am                       from                     it                      the                    who

 are                      get                      its                     there                  whose

 as                       got                      it's                    to                     why

 at                       had                      like                    too                    will

 be                       has                      not                     want                   with

 but                      have                     of                      was                    would

 can                      how                      on                      were                   <or>


Verity provides a populated stop-word file for the English and English (Advanced) languages. You need not modify
the qp_inet.stp file for these languages. If you use the configurable Internet query parser for another language, provide
your own qp_inet.stp file that contains the stop words that you want to ignore in that language. This stop-word file
must contain, at a minimum, the language-equivalent words for or and <or>.

Note: The configurable Internet query parser's stop-word file contains a different word list than the vdk30.stp word file,
which is used for other purposes, such as summarization.


Composing search expressions
The following rules apply to the composition of search expressions.


Case sensitivity
Verity searches are case sensitive only when the search term is entered in mixed case. For example, a search for zeus
finds zeus, Zeus, or ZEUS; however, a search for Zeus finds only Zeus.

To have your application always ignore the case that the user types, use the ColdFusion LCase function in the
criteria attribute of cfsearch. The following code converts user input to lowercase, thereby eliminating case
sensitivity concerns:



                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                      514
Accessing and Using Data




<cfsearch name="results"
     collection="#form.collname#"
     criteria="#LCase(form.criteria)#"
     type="#form.type#">


Prefix and infix notation
By default, Verity uses infix notation, in which precedence is implicit in the expression; for example, the AND operator
takes precedence over the OR operator.

You can use prefix notation with any operator except an evidence operator (typically, STEM, WILDCARD, or WORD;
for a description of evidence operators, see "Evidence operators" on page 518). In prefix notation, the expression
explicitly specifies precedence. Rather than repeating an operator, you can use prefix notation to list the operator once
and list the search targets in parentheses. For example, the following expressions are equivalent:

· Moses <NEAR> Larry <NEAR> Jerome <NEAR> Daniel <NEAR> Jacob

· <NEAR>(Moses,Larry,Jerome,Daniel,Jacob)

The following prefix notation example searches first for documents that contain Larry and Jerome, and then for
documents that contain Moses:

OR (Moses, AND (Larry,Jerome))

The infix notation equivalent of this is as follows:

Moses OR (Larry AND Jerome)


Commas in expressions
If an expression includes two or more search terms within parentheses, a comma is required between the elements
(whitespace is ignored). The following example searches for documents that contain any combination of Larry and
Jerome together:

AND (Larry, Jerome)


Precedence rules
Expressions are read from left to right. The AND operator takes precedence over the OR operator; however, terms
enclosed in parentheses are evaluated first. When the search engine encounters nested parentheses, it starts with the
innermost term.


 Example                                          Search result

 Moses AND Larry OR Jerome                        Documents that contain Moses and Larry, or Jerome

 (Moses AND Larry) OR Jerome                      (Same as above)

 Moses AND (Larry OR Jerome)                      Documents that contain Moses and either Larry or Jerome



Delimiters in expressions
You use angle brackets (< >), double quotation marks ("), and backslashes (\) to delimit various elements in a search
expression, as the following table describes:




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                        515
Accessing and Using Data




Character            Usage

< >                  Left and right angle brackets are reserved for designating operators and modifiers. They are optional for the AND, OR,
                     and NOT, but required for all other operators.

"                    Use double quotation marks in expressions to search for a word that is otherwise reserved as an operator or modifier,
                     such as AND, OR, and NOT.

\                    To include a backslash in a search expression, insert two backslashes for each backslash character that you want
                     included in the search; for example, C:\\CFusion\\bin.



Operators and modifiers
You are probably familiar with searches containing AND, OR, and NOT. Verity has many additional operators and
modifiers, of various types, that offer you a high degree of specificity in setting search parameters.


Operators
An operator represents logic to be applied to a search element. This logic defines the qualifications that a document
must meet to be retrieved. You can use operators to refine your search or to influence the results in other ways.

For example, you can construct an HTML form for conducting searches. In the form, you can search for a single term.
You can refine the search by limiting the search scope in many ways. Operators are available for limiting a query to a
sentence or paragraph, and you can search words based on proximity.

Ordinarily, you use operators in explicit searches, as follows:

"<operator>search_string"

The following operator types are available:


Operator type             Purpose

Concept                   Identifies a concept in a document by combining the meanings of search elements.

Relational                Searches fields in a collection.

Evidence                  Specifies basic and intelligent word searches.

Proximity                 Specifies the relative location of words in a document.

Score                     Manipulates the score returned by a search element. You can set the score percentage display to four decimal
                          places.


The following table shows the operators, according to type, that are available for conducting searches of ColdFusion
Verity collections:


Concept                Relational                     Evidence                   Proximity                     Score

ACCRUE                 <                              STEM                       NEAR                          YESNO

ALL                    <=                             WILDCARD                   NEAR/N                        PRODUCT

AND                    =                              WORD                       PARAGRAPH                     SUM

ANY                    >                              THESAURUS                  PHRASE                        COMPLEMENT

OR                     >=                             SOUNDEX                    SENTENCE

                       CONTAINS                       TYPO/N                     IN

                       MATCHES




                                                     

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                       516
Accessing and Using Data




                       STARTS

                       ENDS

                       SUBSTRING



Concept operators
Concept operators combine the meaning of search elements to identify a concept in a document. Documents retrieved
using concept operators are ranked by relevance. The following table describes each concept operator:


Operator               Description

AND                    Selects documents that contain all the search elements that you specify.

OR                     Selects documents that show evidence of at least one of the search elements that you specify.

ACCRUE                 Selects documents that include at least one of the search elements that you specify. Documents are ranked based
                       on the number of search elements found.

ALL                    Selects documents that contain all of the search elements that you specify. A score of 1.00 is assigned to each
                       retrieved document. ALL and AND retrieve the same results, but queries using ALL are always assigned a score of
                       1.00.

ANY                    Selects documents that contain at least one of the search elements that you specify. A score of 1.00 is assigned to
                       each retrieved document. ANY and OR retrieve the same results, but queries using ANY are always assigned a score
                       of 1.00.



Relational operators
Relational operators search document fields (such as AUTHOR) that you defined in the collection. Documents that
contain specified field values are returned. Documents retrieved using relational operators are not ranked by
relevance, and you cannot use the MANY modifier with relational operators.

You use the following operators for numeric and date comparisons:


Operator                Description

=                       Equal

!=                      Not equal

>                       Greater than

>=                      Greater than or equal to

<                       Less than

<=                      Less than or equal to


For example, to search for documents that contain values for 1999 through 2002, you perform either of the following
searches:

· A simple search for 1999,2000,2001,2002

· An explicit search using the = operator: >=1999,<=2002

If a document field named PAGES is defined, you can search for documents that are five pages or fewer by entering
PAGES < 5 in your search. Similarly, if a document field named DATE is defined, you can search for documents dated
before and including December 31, 1999 by entering DATE <= 12-31-99 in your search.

The following relational operators compare text and match words and parts of words:




                                                  

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                           517
Accessing and Using Data




 Operator        Description                                                             Example

 CONTAINS        Selects documents by matching the word or phrase that you specify      · In a document field named TITLE, to retrieve
                 with the values stored in a specific document field. Documents are        documents whose titles contain music, musical,
                 selected only if the search elements specified appear in the same         or musician, search for TITLE <CONTAINS> Musi*.
                 sequential and contiguous order in the field value.
                                                                                        · To retrieve CFML and HTML pages whose meta
                                                                                           tags contain Framingham as a content word,
                                                                                           search for KEYWORD <CONTAINS> Framingham.

 MATCHES         Selects documents by matching the query string with values stored in    For examples, see the text immediately following
                 a specific document field. Documents are selected only if the search    this table.
                 elements specified match the field value exactly. If a partial match is
                 found, a document is not selected. When you use the MATCHES
                 operator, you specify the field name to search, and the word, phrase,
                 or number to locate. You can use ? and * to represent individual and
                 multiple characters, respectively, within a string.

 STARTS          Selects documents by matching the character string that you specify     In a document field named REPORTER, to retrieve
                 with the starting characters of the values stored in a specific         documents written by Clark, Clarks, and Clarkson,
                 document field.                                                         search for REPORTER <STARTS> Clark.

 ENDS            Selects documents by matching the character string that you specify     In a document field named OFFICER, to retrieve
                 with the ending characters of the values stored in a specific           arrest reports written by Tanner, Garner, and Milner,
                 document field.                                                         search for OFFICER <ENDS> ner.

 SUBSTRING       Selects documents by matching the query string that you specify         In a document field named TITLE, to retrieve
                 with any portion of the strings in a specific document field.           documents whose titles contain words such as
                                                                                         solution, resolution, solve, and resolve, search for
                                                                                         TITLE <SUBSTRING> sol.


For example, assume a document field named SOURCE includes the following values:

· Computer

· Computerworld

· Computer Currents

· PC Computing

To locate documents whose source is Computer, enter the following:

SOURCE <MATCHES> computer

To locate documents whose source is Computer, Computerworld, and Computer Currents, enter the following:

SOURCE <MATCHES> computer*

To locate documents whose source is Computer, Computerworld, Computer Currents, and PC Computing, enter the
following:

SOURCE <MATCHES> *comput*

For an example of ColdFusion code that uses the CONTAINS relational operator, see "Field searches" on page 523.

You can use the SUBSTRING operator to match a character string with data stored in a specified data source. In the
example described here, a data source called TEST1 contains the table YearPlaceText, which contains three columns:
Year, Place, and Text. Year and Place make up the primary key. The following table shows the TEST1 schema:




                                                      

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                  518
Accessing and Using Data




 Year                   Place                  Text

 1990                   Utah                   Text about Utah 1990

 1990                   Oregon                 Text about Oregon 1990

 1991                   Utah                   Text about Utah 1991

 1991                   Oregon                 Text about Oregon 1991

 1992                   Utah                   Text about Utah 1992


The following application page matches records that have 1990 in the TEXT column and are in the Place Utah. The
search operates on the collection that contains the TEXT column and then narrows further by searching for the string
Utah in the CF_TITLE document field. Document fields are defaults defined in every collection corresponding to the
values that you define for URL, TITLE, and KEY in the cfindex tag.

<cfquery name="GetText"
     datasource="TEST1">
     SELECT Year || Place AS Identifier, text
     FROM YearPlaceText
</cfquery>


<cfindex collection="testcollection"
     action="Update"
     type="Custom"
     title="Identifier"
     key="Identifier"
     body="TEXT"
     query="GetText">


<cfsearch name="GetText_Search"
     collection="testcollection"
     type="Explicit"
     criteria="1990 and CF_TITLE <SUBSTRING> Utah">
<cfoutput>
     Record Counts: <br>
     #GetText.RecordCount# <br>
     #GetText_Search.RecordCount# <br>
</cfoutput>


Query Results --- Should be 5 rows <br>
<cfoutput query="Gettext">
     #Identifier# <br>
</cfoutput>


Search Results -- should be 1 row <br>
<cfoutput query="GetText_Search">
     #GetText_Search.TITLE# <br>
</cfoutput>


Evidence operators
Evidence operators let you specify a basic word search or an intelligent word search. A basic word search finds
documents that contain only the word or words specified in the query. An intelligent word search expands the query
terms to create an expanded word list so that the search returns documents that contain variations of the query terms.

Documents retrieved using evidence operators are not ranked by relevance unless you use the MANY modifier.



                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                             519
Accessing and Using Data




The following table describes the evidence operators:


Operator            Description                                                               Example

STEM                Expands the search to include the word that you enter and its             <STEM>believe retrieves matches such as
                    variations. The STEM operator is automatically implied in any             "believe," "believing," and "believer".
                    simple query.

WILDCARD            Matches wildcard characters included in search strings. Certain           spam* retrieves matches such as, spam, spammer,
                    characters automatically indicate a wildcard specification, such as       and spamming.
                    apostrophe (*) and question mark(?).

WORD                Performs a basic word search, selecting documents that include            <WORD> logic retrieves logic, but not variations
                    one or more instances of the specific word that you enter. The            such as logical and logician.
                    WORD operator is automatically implied in any SIMPLE query.

THESAURUS           Expands the search to include the word that you enter and its             <THESAURUS> altitude retrieves documents
                    synonyms. Collections do not have a thesaurus by default; to use          containing synonyms of the word altitude, such as
                    this feature you must build one.                                          height or elevation.

SOUNDEX             Expands the search to include the word that you enter and one or          <SOUNDEX> sale retrieves words such as sale, sell,
                    more words that "sound like," or whose letter pattern is similar to,      seal, shell, soul, and scale.
                    the word specified. Collections do not have sound-alike indexes by
                    default; to use this feature you must build sound-alike indexes.

TYPO/N              Expands the search to include the word that you enter plus words          <TYPO> swept retrieves kept.
                    that are similar to the query term. This operator performs
                    "approximate pattern matching" to identify similar words. The
                    optional N variable in the operator name expresses the maximum
                    number of errors between the query term and a matched term, a
                    value called the error distance. If N is not specified, the default error
                    distance is 2.


The following example uses an evidence operator:

<cfsearch name = "quick_search"
     collection="bbb"
     type = "explicit"
     criteria="<WORD>film">


Proximity operators
Proximity operators specify the relative location of specific words in the document. To retrieve a document, the
specified words must be in the same phrase, paragraph, or sentence. In the case of NEAR and NEAR/N operators,
retrieved documents are ranked by relevance based on the proximity of the specified words. Proximity operators can
be nested; phrases or words can appear within SENTENCE or PARAGRAPH operators, and SENTENCE operators
can appear within PARAGRAPH operators.

The following table describes the proximity operators:




                                                        

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                      520
Accessing and Using Data




 Operator           Description                                                        Example

 NEAR               Selects documents containing specified search terms. The closer the war <NEAR> peace retrieves documents that
                    search terms are to one another within a document, the higher the   contain stemmed variations of these words
                    document's score. The document with the smallest possible region    within close proximity to each other (as defined
                    containing all search terms always receives the highest score.      by Verity). To control search proximity, use
                    Documents whose search terms are not within 1000 words of each      NEAR/N.
                    other are not selected.

 NEAR/N             Selects documents containing two or more search terms within N      commute <NEAR/10> bicycle <NEAR/10> train
                    number of words of each other, where N is an integer between 1 and  <NEAR/10> retrieves documents that contain
                    1024. NEAR/1 searches for two words that are next to each other.    stemmed variations of these words within 10
                    The closer the search terms are within a document, the higher the   words of each other.
                    document's score.

                    You can specify multiple search terms using multiple instances of
                    NEAR/N as long as the value of N is the same.

 PARAGRAPH          Selects documents that include all of the words you specify within  <PARAGRAPH>(mission,goal,statement) retrieves
                    the same paragraph. To search for three or more words or phrases in documents that contain these terms within a
                    a paragraph, you must use the PARAGRAPH operator between each       paragraph.
                    word or phrase.

 PHRASE             Selects documents that include a phrase you specify. A phrase is a  <PHRASE> (mission, oak) returns documents that
                    grouping of two or more words that occur in a specific order.       contain the phrase mission oak.

 SENTENCE           Selects documents that include all of the words you specify within  <SENTENCE> (jazz, musician) returns documents
                    the same sentence.                                                  that contain these words in the same sentence.

 IN                 Selects documents that contain specified values in one or more      Chang <IN> author searches document zones
                    document zones. A document zone represents a region of a            named author for the word Chang.
                    document, such as the document's summary, date, or body text. To
                    search for a term only within the one or more zones that have
                    certain conditions, you qualify the IN operator with the WHEN
                    operator.


The following example uses a proximity operator:

<cfsearch name = "quick_search"
     collection="bbb"
     type = "explicit"
     criteria="red<near>socks">

For an example using the IN proximity operator to search XML documents, see "Zone searches" on page 522.


Score operators
Score operators control how the search engine calculates scores for retrieved documents. The maximum score that a
returned search element can have is 1.000. You can set the score to display a maximum of four decimal places.

When you use a score operator, the search engine first calculates a separate score for each search element found in a
document, and then performs a mathematical operation on the individual element scores to arrive at the final score
for each document.

The document's score is available as a result column. You can use the SCORE result column to get the relevancy score
of any document retrieved, for example:

<cfoutput>
     <a href="#Search1.URL#">#Search1.Title#</a><br>
     Document Score=#Search1.SCORE#<BR>
</cfoutput>

The following table describes the score operators:




                                                     

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                         521
Accessing and Using Data




 Operator            Description                                                               Example

 YESNO               Forces the score of an element to 1 if the element's score is nonzero.    <YESNO>mainframe. If the retrieval result of
                                                                                               the search on mainframe is 0.75, the YESNO
                                                                                               operator forces the result to 1. You can use
                                                                                               YESNO to avoid relevance ranking.

 PRODUCT             Multiplies the scores for the search elements in each document            <PRODUCT>(computers, laptops) takes the
                     matching a query.                                                         product of the resulting scores.

 SUM                 Adds the scores for the search element in each document matching a        <SUM>(computers, laptops) takes the sum of
                     query, up to a maximum value of 1.                                        the resulting scores.

 COMPLEMENT          Calculates scores for documents matching a query by taking the            <COMPLEMENT>computers. If the search
                     complement (subtracting from 1) of the scores for the query's search      element's original score is .785, the
                     elements. The new score is 1 minus the search element's original          COMPLEMENT operator recalculates the score
                     score.                                                                    as .215.



Modifiers
You combine modifiers with operators to change the standard behavior of an operator in some way. The following
table describes the available modifiers:


 Modifier            Description                                                                Example

 CASE                Specifies a case-sensitive search. Normally, Verity searches are case-     <CASE>Java OR <CASE>java retrieves
                     insensitive for search text entered in all uppercase or all lowercase, and documents that contain Java or java, but not
                     case-sensitive for mixed-case search strings.                              JAVA.

 MANY                Counts the density of words, stemmed variations, or phrases in a           <PARAGRAPH><MANY>javascript <AND>
                     document and produces a relevance-ranked score for retrieved               vbscript.
                     documents. Use with the following operators:
                                                                                                You cannot use the MANY modifier with the
                     · WORD                                                                     following operators:

                     · WILDCARD                                                                 · AND

                     · STEM                                                                     · OR

                     · PHRASE                                                                   · ACCRUE

                     · SENTENCE                                                                 · Relational operators

                     · PARAGRAPH

 NOT                 Excludes documents that contain the specified word or phrase. Use          Java <AND> programming <NOT> coffee
                     only with the AND and OR operators.                                        retrieves documents that contain Java and
                                                                                                programming, but not coffee.

 ORDER               Specifies that the search elements must occur in the same order in         <ORDER><PARAGRAPH> ("server", "Java")
                     which you specify them in the query. Use with the following operators: retrieves documents that contain server
                                                                                                before Java.
                     · PARAGRAPH

                     · SENTENCE

                     · NEAR/N

                     Place the ORDER modifier before any operator.




                                                     

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       522
Accessing and Using Data




Refining your searches with zones and fields
One of the strengths of Verity is its ability to perform full-text searches on documents of many formats. However,
sometimes you want to restrict a search to certain portions of a document, to improve search relevance. If a Verity
collection contains some documents about baseball and other documents about caves, a search for the word bat can
retrieve several irrelevant results.

If the documents are structured documents, you can take advantage of the ability to search zones and fields. The
following are some examples of structured documents:

· Documents created with markup languages (XML, SGML, HTML)

· Internet Message Format documents

· Documents created by many word-processing applications

Note: Although your word processor opens with what appears to be a blank page, the document has many regions such
as title, subject, and author. Refer to the documentation of your application or online help system for how to view a
document's properties.


Zone searches
You can perform zone searches on markup language documents. The Verity zone filter includes built-in support for
HTML and several file formats; for a list of supported file formats, see "Building a Search Interface" on page 476. Verity
searches XML files by treating the XML tags as zones. When you use the zone filter, the Verity engine builds zone
information into the collection's full-word index. This index, enhanced with zone information, permits quick and
efficient searches over zones. The zone filter can automatically define a zone, or you can define it yourself in the
style.zon file. You can use zone searching to limit your search to a particular zone. This can produce more accurate,
but not necessarily faster, search results than searching an entire file.

Note: The contents of a zone cannot be returned in the results list of an application.


Examples
The following examples perform zone searching on XML files. In a list of rock bands, you could have XML files with
tags for the instruments and for comments. In the following XML file, the word Pete appears in a comment field:

<band.xml>
            <Lead_Guitar>Dan</Lead_Guitar>
            <Rhythm_Guitar>Jake</Rhythm_Guitar>
            <Bass_Guitar>Mike</Bass_Guitar>
            <Drums>Chris</Drums>
            <COMMENT_A>Dan plays guitar, better than Pete.</COMMENT_A>
            <COMMENT_B>Jake plays rhythm guitar.</COMMENT_B>
</band.xml>

The following CFML code shows a search for the word Pete:

<cfsearch name = "band_search"
      collection="my_collection"
      type = "simple"
criteria="Pete">

The above search for Pete returns this XML file because this search target is in the COMMENT_A field. In contrast,
Pete is the lead guitarist in the following XML file:




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       523
Accessing and Using Data




<band.xml>
           <Lead_Guitar>Pete</Lead_Guitar>
           <Rhythm_Guitar>Roger</Rhythm_Guitar>
      <Bass_Guitar>John</Bass_Guitar>
           <Drums>Kenny</Drums>
           <COMMENT_A>Who knows who's better than this band?</COMMENT_A>
           <COMMENT_B>Ticket prices correlated with decibels.</COMMENT_B>
</band.xml>

To retrieve only the files in which Pete is the lead guitarist, perform a zone search using the IN operator according to
the following syntax:

(query) <IN> (zone1, zone2, ...)

Note: As with other operators, IN might be uppercase or lowercase. Unlike AND, OR, or NOT, enclose IN within brackets.

Thus, the following explicit search retrieves files in which Pete is the lead guitarist:

(Pete) <in> Lead_Guitar

This is expressed in CFML as follows:

<cfsearch name = "band_search"
      collection="my_collection"
      type = "explicit"
      criteria="(Pete) <in> Lead_Guitar">

To retrieve files in which Pete plays either lead or rhythm guitar, use the following explicit search:

(Pete) <in> (Lead_Guitar,Rhythm_Guitar)

This is expressed in CFML as follows:

<cfsearch name = "band_search"
      collection="bbb"
      type = "explicit"
      criteria="(Pete) <in> (Lead_Guitar,Rhythm_Guitar)">


Field searches
Fields are extracted from the document and stored in the collection for retrieval and searching, and can be returned
on a results list. Zones, on the other hand, are merely the definitions of "regions" of a document for searching purposes,
and are not physically extracted from the document in the same way that fields are extracted.

You must define a region of text as a zone before it can be a field. Therefore, it can be only a zone, or it can be both a
field and a zone. Whether you define a region of text as a zone only or as both a field and a zone depends on your
particular requirements.

A field must be defined in the style file, style.ufl, before you create the collection. To map zones to fields (to display
field data), define and add these extra fields to style.ufl.

You can specify the values for the cfindex attributes TITLE, KEY, and URL as document fields for use with relational
operators in the criteria attribute. (The SCORE and SUMMARY attributes are automatically returned by a
cfsearch; these attributes are different for each record of a collection as the search criteria changes.) Text comparison
operators can reference the following document fields:

· cf_title

· cf_key

· cf_url




                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                                             524
Accessing and Using Data




· cf_custom1

· cf_custom2

· cf_custom3

· cf_custom4

Text comparison operators can also reference the following automatically populated document fields:

· title

· key

· url

· vdksummary

· author

· mime-type

To explore how to use document fields to refine a search, consider the following database table, named Calls. This table
has four columns and three records, as the following table shows:


call_ID      Problem_Description                                                Short_Description                  Product

1            Can't bold text properly under certain conditions                   Bold Problem                      HomeSite+

2            Certain optional attributes are acting as required attributes       Attributes Problem                ColdFusion

3            Can't do a File/Open in certain cases                               File Open Problem                 HomeSite+


A Verity search for the word certain returns three records. However, you can use the document fields to restrict your
search; for example, a search to retrieve HomeSite+ problems with the word certain in the problem description.

These are the requirements to run this procedure:

· Create and populate the Calls table in a database of your choice

· Create a collection named Training (you can do this in CFML or in the ColdFusion Administrator).

The following table shows the relationship between the database column and cfindex attribute:


Database column                The cfindex        Comment
                               attribute

call_ID                        key                The primary key of a database table is often a key attribute.

Problem_Description            body               This column is the information to be indexed.

Short_Description              title              A short description is conceptually equivalent to a title, as in a running title of a journal
                                                  article.

Product                        custom1            This field refines the search.


You begin by selecting all data in a query:

<cfquery name = "Calls" datasource = "MyDSN">
     Select * from Calls
</cfquery>

The following code shows the cfindex tag for indexing the collection (the type attribute is set to custom for tabular
data):




                                                      

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                           525
Accessing and Using Data




<cfindex
     query = "Calls"
     collection = "training"
     action = "UPDATE"
     type = "CUSTOM"
     title = "Short_Description"
     key = "Call_ID"
     body = "Problem_Description"
     custom1 = "Product">

To perform the refined search for HomeSite+ problems with the word certain in the problem description, the
cfsearch tag uses the CONTAINS operator in its criteria attribute:

<cfsearch
     collection = "training"
     name = "search_calls"
     criteria = "certain and CF_CUSTOM1 <CONTAINS> HomeSite">

The following code displays the results of the refined search:

<table border="1" cellspacing="5">
<tr>
     <th align="LEFT">KEY</th>
     <th align="LEFT">TITLE</th>
     <th align="LEFT">CUSTOM1</th>
</tr>


<cfoutput query = "search_calls">
<tr>
     <td>#KEY#</td>
     <td>#TITLE#</td>
     <td>#CUSTOM1#</td>
</tr>
</cfoutput>
</table>




Solr search support

The Solr search service is an open source enterprise search server based on the Lucene Java search library.


Solr search service
Solr is a full-text search engine, based on Lucene, that contains the following features:

· XML/HTTP Interfaces

· Loose schema to define types and fields

· Web Administration Interface

· Extensive Caching

· Index Replication

· Extensible Open Architecture

· Written in Java5, deployable as a WAR

· Support for stemming


                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                         526
Accessing and Using Data




· Support for MS Office 2007 file formats

The ColdFusion installer automatically creates the ColdFusion 9 Solr service, which contains the Solr web application.
For UNIX and Linux, you need to start and stop the Solr shell script.


CFML tags used to configure Solr
cfcollection To create a collection using this tag, specify engine="solr"with action="create"/"list"/"map". For
a Solr collection, you do not need to specify the language. Language can be specified in the <cfindex> tag. All other
attributes remain the same.

cfindex ColdFusion detects the search engine based on the collection name.


Language support
Solr supports the following languages:

· Danish

· Dutch

· Finnish

· French

· German

· Italian

· Norwegian

· Spanish

· Portugese

· Russian

· Swedish

· Chinese

· Japanese

· Korean

· Czech

· Greek

· Thai

Solr supports documents in any language. If the document has a language (for example, Arabic) not listed above, it can
still index the content, but stemming is not available. In this case, do not specify a language attribute in the cfindex tag.

Solr supports stemming. That is, it considers the root form (stem) of the word for search. This applies only if you
provide the attribute language.


Solr search examples
The following examples show the search syntax used while performing search operations using Solr:

· Single word search: The following example shows how to search for a single word in a collection:

    <cfsearch name="qsearch1" collection="solr_complex" criteria="Graphics">




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                              527
Accessing and Using Data




· Multiple word search: The following example shows how to search a document or query having words
   "ColdFusion" and "Green" in it:

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria="+Green +Coldfusion">

· Search with at least one word: The following example shows how search for at least "Coldfusion" OR (Green OR
   Blue):

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria=" +Coldfusion Green Blue">

· Search for one word, but not the other: The following example shows how to search for "Green" but NOT
   "Coldfusion":

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria=" -Coldfusion +Green">

· Fuzzy search: The following example shows how to search words like roam, roams, foam, foams:

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria=" roam~">

   Alternate way to perform a fuzzy search for "roam":

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria="roam~">

   Searching for higher similarity with `roam':

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria=" roam~0.8" >

· Wildcard search: The following syntax searches for 'test', 'text', 'teat', and so on:

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria=" te?t">

   This example searches for 'test', 'text', 'teeeeeext', and 'texyzt':

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria=" te*t">

   Note: You cannot use a * or question mark (?) symbol as the first character of a search.

· Proximity search: To search for "apache" and "jakarta" within five words of each other in a document, use the
   following search:

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria='"jakarta apache" ~10'>

· Range Search: Following searches all documents with title between 'fuzzy1.txt' to 'text1.txt':

   <cfsearch name="qsearch"
   collection="solr_srch"
   criteria="title:fuzzy1.txt TO text1.txt">



                                                 

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                           528
Accessing and Using Data




   To search a document whose modification date is between a given range:

   <cfsearch name="qsearch"
   collection="solr_srch"
   criteia="modified:20080101 TO 20500101">

   These ranges are inclusive of start and end terms. To exclude them, use curly brackets{} instead.

· Field search: To search any document whose title contains "fuzzy1.txt"

   <cfsearch name="qsearch"
   collection="solr_srch"
   criteria="title:fuzzy1.txt">

   Searching for document that contains title as 'fuzzy1.txt' OR 'fuzzy2.txt':

   <cfsearch name="qsearch"
   collection="solr_srch"
   criteria="title:fuzzy?.txt">

   The following syntax can be used to perform the same search:

   <cfsearch name="qsearch"
   collection="solr_srch"
   criteria=' ""title:fuzzy1.txt"" OR ""title:fuzzy2.txt"" '>

   Alternatively, you can search using the following syntax:

   <cfsearch name="qsearch"
   collection="solr_srch"
   criteria="title:(test* +fuzzy1*)">

· String search:

   <cfsearch name="qsearch1"
   collection="solr_complex"
   criteria='"Cold Fusiongava" OR "Internet Tools"'>

· Searching synonyms: There are two ways to search documents that have synonymous words like 'MB', 'megabyte',
   'gig', and so on:

   1 If collection is not yet created, go to:

      <cf_home>/solr/multicore/template/conf/synonyms.txt

      This file contains some default mappings such as 'GB, gig, gigabyte, gigabytes'. Define your synonym
      mappings in the next row.

   2 If you want to add a synonym mapping for a collection that is already created, go to
      <collection_location>/conf/synonyms.txt and define your mapping.

      Restart the Solr server after defining mapping.


Term highlighting
By default, Solr highlights searched terms in the summary content as described in the following snippet:




                                              

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                    529
Accessing and Using Data




<cfsearch
collection="syn1"
criteria="Services solr"
name="results"
status="r"
suggestions="always"
contextPassages="1">

To highlight contents in the entire document, modify the solrconfig.xml and schema.xml files. These files are available
in the following locations:

· <Collection Directory>/conf: Modify files in this location to apply the changes to all future Solr collections.

· <Solr Home>/multicore/template/conf: Modify files in this location to apply the changes only to a particular
   collection.

1 Stop Solr service.

2 Replace the following section in the solrconfig.xml

   <requestHandler name="standard" class="solr.StandardRequestHandler" default="true">
        <!-- default values for query parameters -->
          <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="hl.fl">summary title </str>
            <!-- omp = Only More Popular -->
            <str name="spellcheck.onlyMorePopular">false</str>
            <!-- exr = Extended Results -->
            <str name="spellcheck.extendedResults">false</str>
            <!--    The number of suggestions to return -->
            <str name="spellcheck.count">1</str>


          </lst>
          <arr name="last-components">
           <str>spellcheck</str>
          </arr>
     </requestHandler>

   with

   <requestHandler name="standard" class="solr.StandardRequestHandler" default="true">
        <!-- default values for query parameters -->
          <lst name="defaults">
            <str name="echoParams">explicit</str>
            <str name="hl.fl">contents title </str>
            <!-- omp = Only More Popular -->
            <str name="spellcheck.onlyMorePopular">false</str>
            <!-- exr = Extended Results -->
            <str name="spellcheck.extendedResults">false</str>
            <!--    The number of suggestions to return -->
            <str name="spellcheck.count">1</str>


          </lst>
          <arr name="last-components">
           <str>spellcheck</str>
          </arr>
     </requestHandler>

3 Replace the following section in the schema.xml




                                             

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                       530
Accessing and Using Data




   <field name="contents" type="text" indexed="true"                   stored="false" required="false"
   multiValued="true" omitNorms="true"/>

   with

   <field name="contents" type="text" indexed="true" stored="true" required="false"
   multiValued="true" omitNorms="true"/>

4 Restart Solr.

5 Reindex the collection.

Note: The modifications to solrconfig.xml and schema.xml will increase the index size.


Migrating from Verity to Solr
To migrate from Verity to Solr, perform the following tasks:

Step1: Migrate collections from Verity to Solr using ColdFusion Administrator

1 Log into ColdFusion Administrator.

2 Click Data & Services > Migrate Verity Collection

3 Select the name of the collection from the Verity collection name to migrate drop-down list.

4 Specify the name of the collection in the Name field.

5 Browse and select the path of the Verity collection that you want to migrate.

6 Click Submit.

Step 2: Change search engine in <cfcollection> tag

Specify the search engine for the <cfcollection> tag as engine = solr.

Step 3: Change the search code within <cfsearch> tag

Syntax searching for Solr collection is different from searching syntax for a Verity collection. The following examples
show how searching syntax is different in Solr from Verity:

The search criteria is set differently in Solr and Verity. Check the search criteria specified in the <cfsearch> tag after
migrating the collection to Solr.

For example, in Solr the criteria for searching the term "Green" and "ColdFusion" is:

<cfsearch
     name="qsearch1"
     collection="solr_complex"
     criteria="+Green +Coldfusion">

However, in Verity the criteria for searching the same term is:

<cfsearch
     name="qsearch1"
     collection="Verity_complex"
     type="simple"
     criteria="Green AND Coldfusion">

Following are some more comparative examples:

· Using wildcards:

   Solr




                                                

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                 531
Accessing and Using Data




   <cfsearch
        name="qsearch1"
        collection="solr_complex"
        criteria ="te?t">

   Verity

   <cfsearch
        name="qsearch1"
        collection="Verity_complex"
        type="explicit"
        criteria="<WILDCARD>te?t">

· Searching titles

   Solr:

   <cfsearch
        name="qsearch1"
        collection="solr_complex"
        criteria ="title:fuzzy?.txt">

   Verity:

   <cfsearch
        name="qsearch1"
        collection="Verity_complex"
        type="explicit"criteria="CF_TITLE<SUBSTRING>fuzzy">

For more examples of how search criteria is set in Solr, see "Solr search examples" on page 526 and for Verity, see
"Using Verity Search Expressions" on page 505.


Configuring Solr memory
Perform the following steps to increase the memory for Solr.


Non-Windows platforms
1 Stop Solr using the following command:

   sudo ./cfsolr stop

2 In the cfsolr script, modify the line that starts with VMARGS= by changing the default value -Xmx256m with an
   appropriate value. For example, -Xmx1024m.

3 Start Solr using the following command:

   sudo ./cfsolr start


Windows platform
1 Stop the Solr service ColdFusion 9 Solr Service.

2 In the solr.lax, modify the line that starts with lax.nl.java.option.additional= by changing the default value
   -Xmx256m with an appropriate value. For example, -Xmx1024m.

3 Start Solr service.




                                               

DEVELOPING COLDFUSION 9 APPLICATIONS                                                                                          532
Accessing and Using Data




Solr enhancements in ColdFusion 9.0.1
Apart from overall improvement in the accuracy of indexing, the following are the enhancements:

· Displays correct MIME types for all documents

· Enhanced support for indexing of metadata for binary files such as mp3 and JPEG

· Support for the attribute previousCriteria (in the tag cfsearch)

· Both the tags cfindex and cfsearch support the attribute categoryTree.

· A new section to enable/disable term highlighting for entire document has been added to the ColdFusion
   Administrator. This applies only if Solr is running on local machine.

   Note: The following steps apply only if Solr is running on local machine. If Solr is on a remote machine, follow the steps
   provided in the section Term highlighting in Developing ColdFusion 9 Applications.

   1 In the ColdFusion Administrator, go to ColdFusion Collections and then click a Solr collection.

   2 Use the Enable/Disable button to enable/disable term highlighting.

   3 Reindex the collection.

   Note: Enabling term highlighting increases the size of the Solr collection. So ensure that you allocate adequate memory
   for Solr if you are enabling term highlighting.


Upgrading Solr
Solr is upgraded as part of updater.

Therefore, to use Solr with ColdFusion 9.0.1, upgrade Solr.

For local installation, Solr is auto-upgraded when you run the ColdFusion Updater.

For remote installation, manually upgrade Solr using the following steps:

1 Stop Solr.

2 Back up solr.xml available in Solr_Home/multicore.

3 Uninstall Solr.

4 Reinstall the standalone version of Solr available on Adobe download location.

5 Stop Solr (if it has started automatically).

6 Bring back the backed up copy of solr.xml to Solr_Home/multicore.

Note: After you upgrade, ensure that you reindex the entire Solr collection before you use the search service.
